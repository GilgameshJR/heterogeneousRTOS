-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_read_data is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sourceStream_din : OUT STD_LOGIC_VECTOR (319 downto 0);
    sourceStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    sourceStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    sourceStream_full_n : IN STD_LOGIC;
    sourceStream_write : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputAOV : IN STD_LOGIC_VECTOR (63 downto 0);
    startCopy : IN STD_LOGIC_VECTOR (7 downto 0);
    startCopy_ap_vld : IN STD_LOGIC;
    startCopy_ap_ack : OUT STD_LOGIC;
    copying : OUT STD_LOGIC_VECTOR (7 downto 0);
    copying_ap_vld : OUT STD_LOGIC );
end;


architecture behav of run_read_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sourceStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal icmp_ln542_reg_241 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal startCopy_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln_fu_137_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln_reg_230 : STD_LOGIC_VECTOR (57 downto 0);
    signal gmem_addr_reg_235 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln542_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_245 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp2_reg_252 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_done : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_idle : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_ready : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln560_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal copying_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_block_state75 : BOOLEAN;
    signal icmp_ln576_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln576_fu_173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln576_fu_176_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_182_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_198_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_s_fu_207_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln174_fu_216_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_read_data_Pipeline_VITIS_LOOP_558_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln560 : IN STD_LOGIC_VECTOR (57 downto 0) );
    end component;



begin
    grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130 : component run_read_data_Pipeline_VITIS_LOOP_558_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start,
        ap_done => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_done,
        ap_idle => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_idle,
        ap_ready => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_ready,
        m_axi_gmem_AWVALID => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln560 => trunc_ln_reg_230);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    copying_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                copying_preg <= ap_const_lv8_0;
            else
                if ((not(((icmp_ln542_reg_241 = ap_const_lv1_0) and (sourceStream_full_n = ap_const_logic_0))) and (icmp_ln576_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln542_reg_241 = ap_const_lv1_0))) then 
                    copying_preg <= ap_const_lv8_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0) and (startCopy_ap_vld = ap_const_logic_1))) then 
                    copying_preg <= ap_const_lv8_FF;
                end if; 
            end if;
        end if;
    end process;


    grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0) and (startCopy_ap_vld = ap_const_logic_1))) then 
                    grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                gmem_addr_read_reg_245 <= m_axi_gmem_RDATA;
                tmp2_reg_252 <= m_axi_gmem_RDATA(55 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_235 <= sext_ln560_fu_147_p1;
                trunc_ln_reg_230 <= inputAOV(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln542_reg_241 <= icmp_ln542_fu_157_p2;
            end if;
        end if;
    end process;
    ap_done_reg <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, sourceStream_full_n, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, startCopy_ap_vld, ap_CS_fsm_state75, icmp_ln542_reg_241, ap_CS_fsm_state4, ap_CS_fsm_state74, ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_1) and (startCopy_ap_vld = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0) and (startCopy_ap_vld = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if ((not(((icmp_ln542_reg_241 = ap_const_lv1_0) and (sourceStream_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln576_fu_176_p2 <= std_logic_vector(signed(sext_ln576_fu_173_p1) + signed(ap_const_lv9_1FE));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(startCopy_ap_vld)
    begin
        if ((startCopy_ap_vld = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_done)
    begin
        if ((grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;

    ap_ST_fsm_state74_blk_assign_proc : process(m_axi_gmem_RVALID)
    begin
        if ((m_axi_gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state75_blk_assign_proc : process(sourceStream_full_n, icmp_ln542_reg_241)
    begin
        if (((icmp_ln542_reg_241 = ap_const_lv1_0) and (sourceStream_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state75_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state75_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state75_assign_proc : process(sourceStream_full_n, icmp_ln542_reg_241)
    begin
                ap_block_state75 <= ((icmp_ln542_reg_241 = ap_const_lv1_0) and (sourceStream_full_n = ap_const_logic_0));
    end process;

    ap_done <= ap_done_reg;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_const_logic_0;

    copying_assign_proc : process(sourceStream_full_n, startCopy_ap_vld, ap_CS_fsm_state75, icmp_ln542_reg_241, ap_CS_fsm_state2, icmp_ln542_fu_157_p2, copying_preg, icmp_ln576_fu_192_p2)
    begin
        if ((not(((icmp_ln542_reg_241 = ap_const_lv1_0) and (sourceStream_full_n = ap_const_logic_0))) and (icmp_ln576_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln542_reg_241 = ap_const_lv1_0))) then 
            copying <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0) and (startCopy_ap_vld = ap_const_logic_1))) then 
            copying <= ap_const_lv8_FF;
        else 
            copying <= copying_preg;
        end if; 
    end process;


    copying_ap_vld_assign_proc : process(sourceStream_full_n, startCopy_ap_vld, ap_CS_fsm_state75, icmp_ln542_reg_241, ap_CS_fsm_state2, icmp_ln542_fu_157_p2, icmp_ln576_fu_192_p2)
    begin
        if (((not(((icmp_ln542_reg_241 = ap_const_lv1_0) and (sourceStream_full_n = ap_const_logic_0))) and (icmp_ln576_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln542_reg_241 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0) and (startCopy_ap_vld = ap_const_logic_1)))) then 
            copying_ap_vld <= ap_const_logic_1;
        else 
            copying_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_ap_start_reg;
    icmp_ln542_fu_157_p2 <= "1" when (startCopy = ap_const_lv8_0) else "0";
    icmp_ln576_fu_192_p2 <= "1" when (tmp_fu_182_p4 = ap_const_lv8_0) else "0";

    m_axi_gmem_ARADDR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state2, gmem_addr_reg_235, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARADDR, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_235;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARADDR <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARADDR;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_ARBURST_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARBURST, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARBURST <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARBURST;
        else 
            m_axi_gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARCACHE, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARCACHE <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARCACHE;
        else 
            m_axi_gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARID_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARID <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARID;
        else 
            m_axi_gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_ARLEN_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLEN, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARLEN <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLEN;
        else 
            m_axi_gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLOCK, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARLOCK <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARLOCK;
        else 
            m_axi_gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem_ARPROT_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARPROT, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARPROT <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARPROT;
        else 
            m_axi_gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_ARQOS_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARQOS, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARQOS <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARQOS;
        else 
            m_axi_gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARREGION_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARREGION, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARREGION <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARREGION;
        else 
            m_axi_gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARSIZE, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARSIZE <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARSIZE;
        else 
            m_axi_gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem_ARUSER_assign_proc : process(ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARUSER, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARUSER <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARUSER;
        else 
            m_axi_gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem_ARVALID_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state4, ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_gmem_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_ARVALID <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state74, ap_CS_fsm_state2, icmp_ln542_fu_157_p2, grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) and (m_axi_gmem_RVALID = ap_const_logic_1))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln542_fu_157_p2 = ap_const_lv1_0)))) then 
            m_axi_gmem_RREADY <= grp_read_data_Pipeline_VITIS_LOOP_558_2_fu_130_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
        sext_ln560_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_137_p4),64));

        sext_ln576_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_252),9));


    sourceStream_blk_n_assign_proc : process(sourceStream_full_n, ap_CS_fsm_state75, icmp_ln542_reg_241)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln542_reg_241 = ap_const_lv1_0))) then 
            sourceStream_blk_n <= sourceStream_full_n;
        else 
            sourceStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sourceStream_din <= ((tmp_8_fu_198_p4 & tmp_s_fu_207_p4) & trunc_ln174_fu_216_p1);

    sourceStream_write_assign_proc : process(sourceStream_full_n, ap_CS_fsm_state75, icmp_ln542_reg_241)
    begin
        if ((not(((icmp_ln542_reg_241 = ap_const_lv1_0) and (sourceStream_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state75) and (icmp_ln542_reg_241 = ap_const_lv1_0))) then 
            sourceStream_write <= ap_const_logic_1;
        else 
            sourceStream_write <= ap_const_logic_0;
        end if; 
    end process;


    startCopy_ap_ack_assign_proc : process(startCopy_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (startCopy_ap_vld = ap_const_logic_1))) then 
            startCopy_ap_ack <= ap_const_logic_1;
        else 
            startCopy_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    startCopy_blk_n_assign_proc : process(startCopy_ap_vld, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            startCopy_blk_n <= startCopy_ap_vld;
        else 
            startCopy_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tmp_8_fu_198_p4 <= gmem_addr_read_reg_245(351 downto 96);
    tmp_fu_182_p4 <= add_ln576_fu_176_p2(8 downto 1);
    tmp_s_fu_207_p4 <= gmem_addr_read_reg_245(71 downto 32);
    trunc_ln174_fu_216_p1 <= gmem_addr_read_reg_245(24 - 1 downto 0);
    trunc_ln_fu_137_p4 <= inputAOV(63 downto 6);
end behav;
