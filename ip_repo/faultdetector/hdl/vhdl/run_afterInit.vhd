-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_afterInit is
port (
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputAOV : IN STD_LOGIC_VECTOR (63 downto 0);
    startCopy : IN STD_LOGIC_VECTOR (7 downto 0);
    outcomeInRam_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outcomeInRam_ce0 : OUT STD_LOGIC;
    outcomeInRam_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
    outcomeInRam_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
    outcomeInRam_we0 : OUT STD_LOGIC_VECTOR (35 downto 0);
    errorInTask_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    errorInTask_ce0 : OUT STD_LOGIC;
    errorInTask_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    errorInTask_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    errorInTask_we0 : OUT STD_LOGIC;
    failedTask : OUT STD_LOGIC_VECTOR (15 downto 0);
    n_regions_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    n_regions_V_ce0 : OUT STD_LOGIC;
    n_regions_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_regions_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    n_regions_V_we0 : OUT STD_LOGIC;
    n_regions_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    n_regions_V_ce1 : OUT STD_LOGIC;
    n_regions_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    n_regions_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    n_regions_V_we1 : OUT STD_LOGIC;
    regions_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_ce0 : OUT STD_LOGIC;
    regions_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_we0 : OUT STD_LOGIC;
    regions_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_ce1 : OUT STD_LOGIC;
    regions_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_we1 : OUT STD_LOGIC;
    regions_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_1_ce0 : OUT STD_LOGIC;
    regions_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_1_we0 : OUT STD_LOGIC;
    regions_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_1_ce1 : OUT STD_LOGIC;
    regions_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_1_we1 : OUT STD_LOGIC;
    regions_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_2_ce0 : OUT STD_LOGIC;
    regions_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_2_we0 : OUT STD_LOGIC;
    regions_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_2_ce1 : OUT STD_LOGIC;
    regions_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_2_we1 : OUT STD_LOGIC;
    regions_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_3_ce0 : OUT STD_LOGIC;
    regions_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_3_we0 : OUT STD_LOGIC;
    regions_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_3_ce1 : OUT STD_LOGIC;
    regions_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_3_we1 : OUT STD_LOGIC;
    regions_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_4_ce0 : OUT STD_LOGIC;
    regions_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_4_we0 : OUT STD_LOGIC;
    regions_4_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_4_ce1 : OUT STD_LOGIC;
    regions_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_4_we1 : OUT STD_LOGIC;
    regions_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_5_ce0 : OUT STD_LOGIC;
    regions_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_5_we0 : OUT STD_LOGIC;
    regions_5_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_5_ce1 : OUT STD_LOGIC;
    regions_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_5_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    inputAOV_ap_vld : IN STD_LOGIC;
    startCopy_ap_vld : IN STD_LOGIC;
    startCopy_ap_ack : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    failedTask_ap_vld : OUT STD_LOGIC;
    failedTask_ap_ack : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of run_afterInit is 
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal read_data_U0_ap_start : STD_LOGIC;
    signal read_data_U0_ap_done : STD_LOGIC;
    signal read_data_U0_ap_continue : STD_LOGIC;
    signal read_data_U0_ap_idle : STD_LOGIC;
    signal read_data_U0_ap_ready : STD_LOGIC;
    signal read_data_U0_sourceStream_din : STD_LOGIC_VECTOR (319 downto 0);
    signal read_data_U0_sourceStream_write : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read_data_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal read_data_U0_startCopy_ap_ack : STD_LOGIC;
    signal compute_U0_ap_start : STD_LOGIC;
    signal compute_U0_ap_done : STD_LOGIC;
    signal compute_U0_ap_continue : STD_LOGIC;
    signal compute_U0_ap_idle : STD_LOGIC;
    signal compute_U0_ap_ready : STD_LOGIC;
    signal compute_U0_sourceStream_read : STD_LOGIC;
    signal compute_U0_destStream_din : STD_LOGIC_VECTOR (296 downto 0);
    signal compute_U0_destStream_write : STD_LOGIC;
    signal compute_U0_n_regions_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal compute_U0_n_regions_V_ce0 : STD_LOGIC;
    signal compute_U0_n_regions_V_we0 : STD_LOGIC;
    signal compute_U0_n_regions_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal compute_U0_regions_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_ce0 : STD_LOGIC;
    signal compute_U0_regions_we0 : STD_LOGIC;
    signal compute_U0_regions_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_ce1 : STD_LOGIC;
    signal compute_U0_regions_we1 : STD_LOGIC;
    signal compute_U0_regions_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_1_ce0 : STD_LOGIC;
    signal compute_U0_regions_1_we0 : STD_LOGIC;
    signal compute_U0_regions_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_1_ce1 : STD_LOGIC;
    signal compute_U0_regions_1_we1 : STD_LOGIC;
    signal compute_U0_regions_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_2_ce0 : STD_LOGIC;
    signal compute_U0_regions_2_we0 : STD_LOGIC;
    signal compute_U0_regions_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_2_ce1 : STD_LOGIC;
    signal compute_U0_regions_2_we1 : STD_LOGIC;
    signal compute_U0_regions_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_3_ce0 : STD_LOGIC;
    signal compute_U0_regions_3_we0 : STD_LOGIC;
    signal compute_U0_regions_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_3_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_3_ce1 : STD_LOGIC;
    signal compute_U0_regions_3_we1 : STD_LOGIC;
    signal compute_U0_regions_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_4_ce0 : STD_LOGIC;
    signal compute_U0_regions_4_we0 : STD_LOGIC;
    signal compute_U0_regions_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_4_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_4_ce1 : STD_LOGIC;
    signal compute_U0_regions_4_we1 : STD_LOGIC;
    signal compute_U0_regions_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_5_ce0 : STD_LOGIC;
    signal compute_U0_regions_5_we0 : STD_LOGIC;
    signal compute_U0_regions_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_regions_5_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal compute_U0_regions_5_ce1 : STD_LOGIC;
    signal compute_U0_regions_5_we1 : STD_LOGIC;
    signal compute_U0_regions_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal handle_outcome_U0_ap_start : STD_LOGIC;
    signal handle_outcome_U0_ap_done : STD_LOGIC;
    signal handle_outcome_U0_ap_continue : STD_LOGIC;
    signal handle_outcome_U0_ap_idle : STD_LOGIC;
    signal handle_outcome_U0_ap_ready : STD_LOGIC;
    signal handle_outcome_U0_errorInTask_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal handle_outcome_U0_errorInTask_ce0 : STD_LOGIC;
    signal handle_outcome_U0_errorInTask_we0 : STD_LOGIC;
    signal handle_outcome_U0_errorInTask_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal handle_outcome_U0_outcomeInRam_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal handle_outcome_U0_outcomeInRam_ce0 : STD_LOGIC;
    signal handle_outcome_U0_outcomeInRam_we0 : STD_LOGIC_VECTOR (35 downto 0);
    signal handle_outcome_U0_outcomeInRam_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal handle_outcome_U0_failedTask : STD_LOGIC_VECTOR (15 downto 0);
    signal handle_outcome_U0_failedTask_ap_vld : STD_LOGIC;
    signal handle_outcome_U0_destStream_read : STD_LOGIC;
    signal sourceStream_full_n : STD_LOGIC;
    signal sourceStream_dout : STD_LOGIC_VECTOR (319 downto 0);
    signal sourceStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal sourceStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal sourceStream_empty_n : STD_LOGIC;
    signal destStream_full_n : STD_LOGIC;
    signal destStream_dout : STD_LOGIC_VECTOR (296 downto 0);
    signal destStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal destStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal destStream_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_read_data_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_data_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_compute_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_compute_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_handle_outcome_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_handle_outcome_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sourceStream_din : OUT STD_LOGIC_VECTOR (319 downto 0);
        sourceStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        sourceStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        sourceStream_full_n : IN STD_LOGIC;
        sourceStream_write : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputAOV : IN STD_LOGIC_VECTOR (63 downto 0);
        startCopy : IN STD_LOGIC_VECTOR (7 downto 0);
        startCopy_ap_vld : IN STD_LOGIC;
        startCopy_ap_ack : OUT STD_LOGIC );
    end component;


    component run_compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sourceStream_dout : IN STD_LOGIC_VECTOR (319 downto 0);
        sourceStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        sourceStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        sourceStream_empty_n : IN STD_LOGIC;
        sourceStream_read : OUT STD_LOGIC;
        destStream_din : OUT STD_LOGIC_VECTOR (296 downto 0);
        destStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        destStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        destStream_full_n : IN STD_LOGIC;
        destStream_write : OUT STD_LOGIC;
        n_regions_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        n_regions_V_ce0 : OUT STD_LOGIC;
        n_regions_V_we0 : OUT STD_LOGIC;
        n_regions_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_regions_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        regions_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_ce0 : OUT STD_LOGIC;
        regions_we0 : OUT STD_LOGIC;
        regions_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_ce1 : OUT STD_LOGIC;
        regions_we1 : OUT STD_LOGIC;
        regions_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_1_ce0 : OUT STD_LOGIC;
        regions_1_we0 : OUT STD_LOGIC;
        regions_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_1_ce1 : OUT STD_LOGIC;
        regions_1_we1 : OUT STD_LOGIC;
        regions_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_2_ce0 : OUT STD_LOGIC;
        regions_2_we0 : OUT STD_LOGIC;
        regions_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_2_ce1 : OUT STD_LOGIC;
        regions_2_we1 : OUT STD_LOGIC;
        regions_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_3_ce0 : OUT STD_LOGIC;
        regions_3_we0 : OUT STD_LOGIC;
        regions_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_3_ce1 : OUT STD_LOGIC;
        regions_3_we1 : OUT STD_LOGIC;
        regions_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_4_ce0 : OUT STD_LOGIC;
        regions_4_we0 : OUT STD_LOGIC;
        regions_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_4_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_4_ce1 : OUT STD_LOGIC;
        regions_4_we1 : OUT STD_LOGIC;
        regions_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_5_ce0 : OUT STD_LOGIC;
        regions_5_we0 : OUT STD_LOGIC;
        regions_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_5_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_5_ce1 : OUT STD_LOGIC;
        regions_5_we1 : OUT STD_LOGIC;
        regions_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_handle_outcome IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        errorInTask_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        errorInTask_ce0 : OUT STD_LOGIC;
        errorInTask_we0 : OUT STD_LOGIC;
        errorInTask_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        errorInTask_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        outcomeInRam_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        outcomeInRam_ce0 : OUT STD_LOGIC;
        outcomeInRam_we0 : OUT STD_LOGIC_VECTOR (35 downto 0);
        outcomeInRam_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        failedTask : OUT STD_LOGIC_VECTOR (15 downto 0);
        failedTask_ap_vld : OUT STD_LOGIC;
        failedTask_ap_ack : IN STD_LOGIC;
        destStream_dout : IN STD_LOGIC_VECTOR (296 downto 0);
        destStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        destStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        destStream_empty_n : IN STD_LOGIC;
        destStream_read : OUT STD_LOGIC );
    end component;


    component run_fifo_w320_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (319 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (319 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_fifo_w297_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (296 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (296 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    read_data_U0 : component run_read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_data_U0_ap_start,
        ap_done => read_data_U0_ap_done,
        ap_continue => read_data_U0_ap_continue,
        ap_idle => read_data_U0_ap_idle,
        ap_ready => read_data_U0_ap_ready,
        sourceStream_din => read_data_U0_sourceStream_din,
        sourceStream_num_data_valid => sourceStream_num_data_valid,
        sourceStream_fifo_cap => sourceStream_fifo_cap,
        sourceStream_full_n => sourceStream_full_n,
        sourceStream_write => read_data_U0_sourceStream_write,
        m_axi_gmem_AWVALID => read_data_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => read_data_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => read_data_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => read_data_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => read_data_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => read_data_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => read_data_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => read_data_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => read_data_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => read_data_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => read_data_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => read_data_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => read_data_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => read_data_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => read_data_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => read_data_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => read_data_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => read_data_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => read_data_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => read_data_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => read_data_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => read_data_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => read_data_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => read_data_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => read_data_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => read_data_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => read_data_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => read_data_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => read_data_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => read_data_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => read_data_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => read_data_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        inputAOV => inputAOV,
        startCopy => startCopy,
        startCopy_ap_vld => startCopy_ap_vld,
        startCopy_ap_ack => read_data_U0_startCopy_ap_ack);

    compute_U0 : component run_compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compute_U0_ap_start,
        ap_done => compute_U0_ap_done,
        ap_continue => compute_U0_ap_continue,
        ap_idle => compute_U0_ap_idle,
        ap_ready => compute_U0_ap_ready,
        sourceStream_dout => sourceStream_dout,
        sourceStream_num_data_valid => sourceStream_num_data_valid,
        sourceStream_fifo_cap => sourceStream_fifo_cap,
        sourceStream_empty_n => sourceStream_empty_n,
        sourceStream_read => compute_U0_sourceStream_read,
        destStream_din => compute_U0_destStream_din,
        destStream_num_data_valid => destStream_num_data_valid,
        destStream_fifo_cap => destStream_fifo_cap,
        destStream_full_n => destStream_full_n,
        destStream_write => compute_U0_destStream_write,
        n_regions_V_address0 => compute_U0_n_regions_V_address0,
        n_regions_V_ce0 => compute_U0_n_regions_V_ce0,
        n_regions_V_we0 => compute_U0_n_regions_V_we0,
        n_regions_V_d0 => compute_U0_n_regions_V_d0,
        n_regions_V_q0 => n_regions_V_q0,
        regions_address0 => compute_U0_regions_address0,
        regions_ce0 => compute_U0_regions_ce0,
        regions_we0 => compute_U0_regions_we0,
        regions_d0 => compute_U0_regions_d0,
        regions_q0 => regions_q0,
        regions_address1 => compute_U0_regions_address1,
        regions_ce1 => compute_U0_regions_ce1,
        regions_we1 => compute_U0_regions_we1,
        regions_d1 => compute_U0_regions_d1,
        regions_q1 => regions_q1,
        regions_1_address0 => compute_U0_regions_1_address0,
        regions_1_ce0 => compute_U0_regions_1_ce0,
        regions_1_we0 => compute_U0_regions_1_we0,
        regions_1_d0 => compute_U0_regions_1_d0,
        regions_1_q0 => regions_1_q0,
        regions_1_address1 => compute_U0_regions_1_address1,
        regions_1_ce1 => compute_U0_regions_1_ce1,
        regions_1_we1 => compute_U0_regions_1_we1,
        regions_1_d1 => compute_U0_regions_1_d1,
        regions_1_q1 => regions_1_q1,
        regions_2_address0 => compute_U0_regions_2_address0,
        regions_2_ce0 => compute_U0_regions_2_ce0,
        regions_2_we0 => compute_U0_regions_2_we0,
        regions_2_d0 => compute_U0_regions_2_d0,
        regions_2_q0 => regions_2_q0,
        regions_2_address1 => compute_U0_regions_2_address1,
        regions_2_ce1 => compute_U0_regions_2_ce1,
        regions_2_we1 => compute_U0_regions_2_we1,
        regions_2_d1 => compute_U0_regions_2_d1,
        regions_2_q1 => regions_2_q1,
        regions_3_address0 => compute_U0_regions_3_address0,
        regions_3_ce0 => compute_U0_regions_3_ce0,
        regions_3_we0 => compute_U0_regions_3_we0,
        regions_3_d0 => compute_U0_regions_3_d0,
        regions_3_q0 => regions_3_q0,
        regions_3_address1 => compute_U0_regions_3_address1,
        regions_3_ce1 => compute_U0_regions_3_ce1,
        regions_3_we1 => compute_U0_regions_3_we1,
        regions_3_d1 => compute_U0_regions_3_d1,
        regions_3_q1 => regions_3_q1,
        regions_4_address0 => compute_U0_regions_4_address0,
        regions_4_ce0 => compute_U0_regions_4_ce0,
        regions_4_we0 => compute_U0_regions_4_we0,
        regions_4_d0 => compute_U0_regions_4_d0,
        regions_4_q0 => regions_4_q0,
        regions_4_address1 => compute_U0_regions_4_address1,
        regions_4_ce1 => compute_U0_regions_4_ce1,
        regions_4_we1 => compute_U0_regions_4_we1,
        regions_4_d1 => compute_U0_regions_4_d1,
        regions_4_q1 => regions_4_q1,
        regions_5_address0 => compute_U0_regions_5_address0,
        regions_5_ce0 => compute_U0_regions_5_ce0,
        regions_5_we0 => compute_U0_regions_5_we0,
        regions_5_d0 => compute_U0_regions_5_d0,
        regions_5_q0 => regions_5_q0,
        regions_5_address1 => compute_U0_regions_5_address1,
        regions_5_ce1 => compute_U0_regions_5_ce1,
        regions_5_we1 => compute_U0_regions_5_we1,
        regions_5_d1 => compute_U0_regions_5_d1,
        regions_5_q1 => regions_5_q1);

    handle_outcome_U0 : component run_handle_outcome
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => handle_outcome_U0_ap_start,
        ap_done => handle_outcome_U0_ap_done,
        ap_continue => handle_outcome_U0_ap_continue,
        ap_idle => handle_outcome_U0_ap_idle,
        ap_ready => handle_outcome_U0_ap_ready,
        errorInTask_address0 => handle_outcome_U0_errorInTask_address0,
        errorInTask_ce0 => handle_outcome_U0_errorInTask_ce0,
        errorInTask_we0 => handle_outcome_U0_errorInTask_we0,
        errorInTask_d0 => handle_outcome_U0_errorInTask_d0,
        errorInTask_q0 => errorInTask_q0,
        outcomeInRam_address0 => handle_outcome_U0_outcomeInRam_address0,
        outcomeInRam_ce0 => handle_outcome_U0_outcomeInRam_ce0,
        outcomeInRam_we0 => handle_outcome_U0_outcomeInRam_we0,
        outcomeInRam_d0 => handle_outcome_U0_outcomeInRam_d0,
        failedTask => handle_outcome_U0_failedTask,
        failedTask_ap_vld => handle_outcome_U0_failedTask_ap_vld,
        failedTask_ap_ack => failedTask_ap_ack,
        destStream_dout => destStream_dout,
        destStream_num_data_valid => destStream_num_data_valid,
        destStream_fifo_cap => destStream_fifo_cap,
        destStream_empty_n => destStream_empty_n,
        destStream_read => handle_outcome_U0_destStream_read);

    sourceStream_U : component run_fifo_w320_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_data_U0_sourceStream_din,
        if_full_n => sourceStream_full_n,
        if_write => read_data_U0_sourceStream_write,
        if_dout => sourceStream_dout,
        if_num_data_valid => sourceStream_num_data_valid,
        if_fifo_cap => sourceStream_fifo_cap,
        if_empty_n => sourceStream_empty_n,
        if_read => compute_U0_sourceStream_read);

    destStream_U : component run_fifo_w297_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_U0_destStream_din,
        if_full_n => destStream_full_n,
        if_write => compute_U0_destStream_write,
        if_dout => destStream_dout,
        if_num_data_valid => destStream_num_data_valid,
        if_fifo_cap => destStream_fifo_cap,
        if_empty_n => destStream_empty_n,
        if_read => handle_outcome_U0_destStream_read);





    ap_sync_reg_compute_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_compute_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_compute_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_compute_U0_ap_ready <= ap_sync_compute_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_handle_outcome_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_handle_outcome_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_handle_outcome_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_handle_outcome_U0_ap_ready <= ap_sync_handle_outcome_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_data_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_data_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_data_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_data_U0_ap_ready <= ap_sync_read_data_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (read_data_U0_ap_idle and handle_outcome_U0_ap_idle and compute_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_compute_U0_ap_ready <= (compute_U0_ap_ready or ap_sync_reg_compute_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (handle_outcome_U0_ap_done and compute_U0_ap_done);
    ap_sync_handle_outcome_U0_ap_ready <= (handle_outcome_U0_ap_ready or ap_sync_reg_handle_outcome_U0_ap_ready);
    ap_sync_read_data_U0_ap_ready <= (read_data_U0_ap_ready or ap_sync_reg_read_data_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_data_U0_ap_ready and ap_sync_handle_outcome_U0_ap_ready and ap_sync_compute_U0_ap_ready);
    compute_U0_ap_continue <= ap_sync_continue;
    compute_U0_ap_start <= ((ap_sync_reg_compute_U0_ap_ready xor ap_const_logic_1) and ap_start);
    errorInTask_address0 <= handle_outcome_U0_errorInTask_address0;
    errorInTask_ce0 <= handle_outcome_U0_errorInTask_ce0;
    errorInTask_d0 <= handle_outcome_U0_errorInTask_d0;
    errorInTask_we0 <= handle_outcome_U0_errorInTask_we0;
    failedTask <= handle_outcome_U0_failedTask;
    failedTask_ap_vld <= handle_outcome_U0_failedTask_ap_vld;
    handle_outcome_U0_ap_continue <= ap_sync_continue;
    handle_outcome_U0_ap_start <= ((ap_sync_reg_handle_outcome_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem_ARADDR <= read_data_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= read_data_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= read_data_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= read_data_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= read_data_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= read_data_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= read_data_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= read_data_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= read_data_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= read_data_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= read_data_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= read_data_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= read_data_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    n_regions_V_address0 <= compute_U0_n_regions_V_address0;
    n_regions_V_address1 <= ap_const_lv6_0;
    n_regions_V_ce0 <= compute_U0_n_regions_V_ce0;
    n_regions_V_ce1 <= ap_const_logic_0;
    n_regions_V_d0 <= compute_U0_n_regions_V_d0;
    n_regions_V_d1 <= ap_const_lv8_0;
    n_regions_V_we0 <= compute_U0_n_regions_V_we0;
    n_regions_V_we1 <= ap_const_logic_0;
    outcomeInRam_address0 <= handle_outcome_U0_outcomeInRam_address0;
    outcomeInRam_ce0 <= handle_outcome_U0_outcomeInRam_ce0;
    outcomeInRam_d0 <= handle_outcome_U0_outcomeInRam_d0;
    outcomeInRam_we0 <= handle_outcome_U0_outcomeInRam_we0;
    read_data_U0_ap_continue <= ap_const_logic_1;
    read_data_U0_ap_start <= ((ap_sync_reg_read_data_U0_ap_ready xor ap_const_logic_1) and ap_start);
    regions_1_address0 <= compute_U0_regions_1_address0;
    regions_1_address1 <= compute_U0_regions_1_address1;
    regions_1_ce0 <= compute_U0_regions_1_ce0;
    regions_1_ce1 <= compute_U0_regions_1_ce1;
    regions_1_d0 <= compute_U0_regions_1_d0;
    regions_1_d1 <= compute_U0_regions_1_d1;
    regions_1_we0 <= compute_U0_regions_1_we0;
    regions_1_we1 <= compute_U0_regions_1_we1;
    regions_2_address0 <= compute_U0_regions_2_address0;
    regions_2_address1 <= compute_U0_regions_2_address1;
    regions_2_ce0 <= compute_U0_regions_2_ce0;
    regions_2_ce1 <= compute_U0_regions_2_ce1;
    regions_2_d0 <= compute_U0_regions_2_d0;
    regions_2_d1 <= compute_U0_regions_2_d1;
    regions_2_we0 <= compute_U0_regions_2_we0;
    regions_2_we1 <= compute_U0_regions_2_we1;
    regions_3_address0 <= compute_U0_regions_3_address0;
    regions_3_address1 <= compute_U0_regions_3_address1;
    regions_3_ce0 <= compute_U0_regions_3_ce0;
    regions_3_ce1 <= compute_U0_regions_3_ce1;
    regions_3_d0 <= compute_U0_regions_3_d0;
    regions_3_d1 <= compute_U0_regions_3_d1;
    regions_3_we0 <= compute_U0_regions_3_we0;
    regions_3_we1 <= compute_U0_regions_3_we1;
    regions_4_address0 <= compute_U0_regions_4_address0;
    regions_4_address1 <= compute_U0_regions_4_address1;
    regions_4_ce0 <= compute_U0_regions_4_ce0;
    regions_4_ce1 <= compute_U0_regions_4_ce1;
    regions_4_d0 <= compute_U0_regions_4_d0;
    regions_4_d1 <= compute_U0_regions_4_d1;
    regions_4_we0 <= compute_U0_regions_4_we0;
    regions_4_we1 <= compute_U0_regions_4_we1;
    regions_5_address0 <= compute_U0_regions_5_address0;
    regions_5_address1 <= compute_U0_regions_5_address1;
    regions_5_ce0 <= compute_U0_regions_5_ce0;
    regions_5_ce1 <= compute_U0_regions_5_ce1;
    regions_5_d0 <= compute_U0_regions_5_d0;
    regions_5_d1 <= compute_U0_regions_5_d1;
    regions_5_we0 <= compute_U0_regions_5_we0;
    regions_5_we1 <= compute_U0_regions_5_we1;
    regions_address0 <= compute_U0_regions_address0;
    regions_address1 <= compute_U0_regions_address1;
    regions_ce0 <= compute_U0_regions_ce0;
    regions_ce1 <= compute_U0_regions_ce1;
    regions_d0 <= compute_U0_regions_d0;
    regions_d1 <= compute_U0_regions_d1;
    regions_we0 <= compute_U0_regions_we0;
    regions_we1 <= compute_U0_regions_we1;
    startCopy_ap_ack <= read_data_U0_startCopy_ap_ack;
end behav;
