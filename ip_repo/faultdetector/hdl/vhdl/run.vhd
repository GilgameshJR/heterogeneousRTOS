-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    failedTask : OUT STD_LOGIC_VECTOR (15 downto 0);
    failedTask_ap_vld : OUT STD_LOGIC;
    failedTask_ap_ack : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of run is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "run_run,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=18.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.693700,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=64,HLS_SYN_DSP=0,HLS_SYN_FF=17984,HLS_SYN_LUT=36548,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv288_lc_1 : STD_LOGIC_VECTOR (287 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_int : STD_LOGIC;
    signal ap_rst_sw : STD_LOGIC;
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal accel_mode : STD_LOGIC_VECTOR (7 downto 0);
    signal copying : STD_LOGIC_VECTOR (7 downto 0);
    signal inputData : STD_LOGIC_VECTOR (63 downto 0);
    signal startCopy : STD_LOGIC_VECTOR (7 downto 0);
    signal startCopy_ap_vld : STD_LOGIC;
    signal startCopy_ap_ack : STD_LOGIC;
    signal errorInTask_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal trainedRegion_i : STD_LOGIC_VECTOR (767 downto 0);
    signal trainedRegion_o : STD_LOGIC_VECTOR (767 downto 0);
    signal IOCheckIdx : STD_LOGIC_VECTOR (7 downto 0);
    signal IORegionIdx : STD_LOGIC_VECTOR (7 downto 0);
    signal n_regions_in_i : STD_LOGIC_VECTOR (7 downto 0);
    signal n_regions_in_o : STD_LOGIC_VECTOR (7 downto 0);
    signal regions_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_ce0 : STD_LOGIC;
    signal regions_we0 : STD_LOGIC;
    signal regions_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_ce1 : STD_LOGIC;
    signal regions_we1 : STD_LOGIC;
    signal regions_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_ce0 : STD_LOGIC;
    signal regions_2_we0 : STD_LOGIC;
    signal regions_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_ce1 : STD_LOGIC;
    signal regions_2_we1 : STD_LOGIC;
    signal regions_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_ce0 : STD_LOGIC;
    signal regions_4_we0 : STD_LOGIC;
    signal regions_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_ce1 : STD_LOGIC;
    signal regions_4_we1 : STD_LOGIC;
    signal regions_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_ce0 : STD_LOGIC;
    signal regions_1_we0 : STD_LOGIC;
    signal regions_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_ce1 : STD_LOGIC;
    signal regions_1_we1 : STD_LOGIC;
    signal regions_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_ce0 : STD_LOGIC;
    signal regions_3_we0 : STD_LOGIC;
    signal regions_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_ce1 : STD_LOGIC;
    signal regions_3_we1 : STD_LOGIC;
    signal regions_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_ce0 : STD_LOGIC;
    signal regions_5_we0 : STD_LOGIC;
    signal regions_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_ce1 : STD_LOGIC;
    signal regions_5_we1 : STD_LOGIC;
    signal regions_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_regions_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_regions_V_ce0 : STD_LOGIC;
    signal n_regions_V_we0 : STD_LOGIC;
    signal n_regions_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_regions_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inputData_read_reg_1993 : STD_LOGIC_VECTOR (63 downto 0);
    signal accel_mode_read_read_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln718_fu_1213_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln718_reg_2002 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln760_fu_1244_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln760_reg_2012 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln587_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_reg_2087 : STD_LOGIC_VECTOR (63 downto 0);
    signal regions_addr_2_reg_2092 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_3_reg_2097 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_4_reg_2102 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_5_reg_2107 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_6_reg_2112 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_7_reg_2117 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_10_reg_2122 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_11_reg_2127 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_12_reg_2132 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_13_reg_2137 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_14_reg_2142 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_15_reg_2147 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_2_reg_2152 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_3_reg_2157 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_4_reg_2162 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_5_reg_2167 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_6_reg_2172 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_7_reg_2177 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_10_reg_2182 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_11_reg_2187 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_12_reg_2192 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_13_reg_2197 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_14_reg_2202 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_15_reg_2207 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_2_reg_2212 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_3_reg_2217 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_4_reg_2222 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_5_reg_2227 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_6_reg_2232 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_7_reg_2237 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_10_reg_2242 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_11_reg_2247 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_12_reg_2252 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_13_reg_2257 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_14_reg_2262 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_15_reg_2267 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln757_2_fu_1466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_2_reg_2272 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_3_fu_1480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_3_reg_2278 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_4_fu_1494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_4_reg_2284 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_5_fu_1508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_5_reg_2290 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_6_fu_1522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_6_reg_2296 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_7_fu_1536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_7_reg_2302 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_10_fu_1582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_10_reg_2308 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_11_fu_1596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_11_reg_2314 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_12_fu_1610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_12_reg_2320 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_13_fu_1624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_13_reg_2326 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_14_fu_1638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_14_reg_2332 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_15_fu_1652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_15_reg_2338 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_18_fu_1698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_18_reg_2344 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_19_fu_1712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_19_reg_2350 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_20_fu_1726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_20_reg_2356 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_21_fu_1740_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_21_reg_2362 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_22_fu_1754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_22_reg_2368 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_23_fu_1768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_23_reg_2374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_1159_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_2440 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1168_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_2445 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1177_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_2450 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1186_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_2455 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1195_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_2460 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1204_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_2465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_24_reg_2530 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_2535 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_2540 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_2545 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_2550 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_2555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_26_reg_2620 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_2625 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_2630 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_2635 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_2640 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_2645 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_afterInit_fu_1117_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_afterInit_fu_1117_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_afterInit_fu_1117_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_afterInit_fu_1117_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_afterInit_fu_1117_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_afterInit_fu_1117_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_afterInit_fu_1117_outcomeInRam_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_outcomeInRam_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_outcomeInRam_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal grp_afterInit_fu_1117_outcomeInRam_we0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_afterInit_fu_1117_errorInTask_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_afterInit_fu_1117_errorInTask_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_errorInTask_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_afterInit_fu_1117_errorInTask_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_failedTask : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_afterInit_fu_1117_n_regions_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_afterInit_fu_1117_n_regions_V_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_n_regions_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_afterInit_fu_1117_n_regions_V_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_n_regions_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_afterInit_fu_1117_n_regions_V_ce1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_n_regions_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_afterInit_fu_1117_n_regions_V_we1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_ce1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_we1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_1_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_1_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_1_ce1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_1_we1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_2_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_2_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_2_ce1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_2_we1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_3_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_3_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_3_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_3_ce1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_3_we1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_4_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_4_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_4_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_4_ce1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_4_we1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_5_ce0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_5_we0 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_5_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_afterInit_fu_1117_regions_5_ce1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_regions_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_afterInit_fu_1117_regions_5_we1 : STD_LOGIC;
    signal grp_afterInit_fu_1117_startCopy_ap_ack : STD_LOGIC;
    signal grp_afterInit_fu_1117_ap_start : STD_LOGIC;
    signal grp_afterInit_fu_1117_ap_done : STD_LOGIC;
    signal grp_afterInit_fu_1117_failedTask_ap_vld : STD_LOGIC;
    signal grp_afterInit_fu_1117_failedTask_ap_ack : STD_LOGIC;
    signal grp_afterInit_fu_1117_ap_ready : STD_LOGIC;
    signal grp_afterInit_fu_1117_ap_idle : STD_LOGIC;
    signal grp_afterInit_fu_1117_ap_continue : STD_LOGIC;
    signal flush : STD_LOGIC;
    signal s_axi_control_flush_done : STD_LOGIC;
    signal m_axi_gmem_flush_done : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal grp_afterInit_fu_1117_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_afterInit_fu_1117_ap_ready : STD_LOGIC;
    signal ap_sync_grp_afterInit_fu_1117_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_afterInit_fu_1117_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_afterInit_fu_1117_ap_done : STD_LOGIC := '0';
    signal zext_ln760_2_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln760_3_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_1_fu_1217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_2_fu_1318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_3_fu_1334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_4_fu_1350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_5_fu_1366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_6_fu_1382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_7_fu_1398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_8_fu_1414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln757_9_fu_1430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln760_4_fu_1777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln760_5_fu_1792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln760_6_fu_1807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln760_7_fu_1822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln760_8_fu_1837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln760_9_fu_1852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal n_regions_in_o_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_forward_failedTask_U_apdone_blk : STD_LOGIC;
    signal bitcast_ln757_fu_1296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_1_fu_1450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal bitcast_ln757_8_fu_1550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_9_fu_1566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_16_fu_1666_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln757_17_fu_1682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_1222_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1149_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln760_fu_1230_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln760_1_fu_1234_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln760_fu_1238_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln760_fu_1260_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_1280_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln757_fu_1292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln757_fu_1288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln757_1_fu_1302_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln757_fu_1306_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln757_fu_1312_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln757_fu_1328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln757_1_fu_1344_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln757_2_fu_1360_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln757_3_fu_1376_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln757_4_fu_1392_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln757_5_fu_1408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln757_6_fu_1424_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_1440_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1456_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1470_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1484_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1498_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1512_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_1526_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1540_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1556_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1572_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1586_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1600_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1614_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_1628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1642_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1656_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1672_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_1688_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1702_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1716_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1730_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1744_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_1758_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln760_1_fu_1772_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln760_2_fu_1787_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln760_3_fu_1802_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln760_4_fu_1817_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln760_5_fu_1832_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln760_6_fu_1847_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln760_23_fu_1936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_22_fu_1932_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_21_fu_1929_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_20_fu_1926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_19_fu_1923_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_18_fu_1920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_17_fu_1917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_16_fu_1914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_15_fu_1910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_14_fu_1906_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_13_fu_1903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_12_fu_1900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_11_fu_1897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_10_fu_1894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_9_fu_1891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_8_fu_1888_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_7_fu_1884_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_6_fu_1880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_5_fu_1877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_4_fu_1874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_3_fu_1871_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_2_fu_1868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_1_fu_1865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln760_fu_1862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal failedTask_ap_ack_int_regslice : STD_LOGIC;
    signal regslice_forward_failedTask_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_afterInit IS
    port (
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputAOV : IN STD_LOGIC_VECTOR (63 downto 0);
        startCopy : IN STD_LOGIC_VECTOR (7 downto 0);
        outcomeInRam_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        outcomeInRam_ce0 : OUT STD_LOGIC;
        outcomeInRam_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        outcomeInRam_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        outcomeInRam_we0 : OUT STD_LOGIC_VECTOR (35 downto 0);
        errorInTask_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        errorInTask_ce0 : OUT STD_LOGIC;
        errorInTask_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        errorInTask_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        errorInTask_we0 : OUT STD_LOGIC;
        failedTask : OUT STD_LOGIC_VECTOR (15 downto 0);
        n_regions_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        n_regions_V_ce0 : OUT STD_LOGIC;
        n_regions_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_regions_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        n_regions_V_we0 : OUT STD_LOGIC;
        n_regions_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        n_regions_V_ce1 : OUT STD_LOGIC;
        n_regions_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_regions_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        n_regions_V_we1 : OUT STD_LOGIC;
        regions_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_ce0 : OUT STD_LOGIC;
        regions_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_we0 : OUT STD_LOGIC;
        regions_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_ce1 : OUT STD_LOGIC;
        regions_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_we1 : OUT STD_LOGIC;
        regions_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_1_ce0 : OUT STD_LOGIC;
        regions_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_1_we0 : OUT STD_LOGIC;
        regions_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_1_ce1 : OUT STD_LOGIC;
        regions_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_1_we1 : OUT STD_LOGIC;
        regions_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_2_ce0 : OUT STD_LOGIC;
        regions_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_2_we0 : OUT STD_LOGIC;
        regions_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_2_ce1 : OUT STD_LOGIC;
        regions_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_2_we1 : OUT STD_LOGIC;
        regions_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_3_ce0 : OUT STD_LOGIC;
        regions_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_3_we0 : OUT STD_LOGIC;
        regions_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_3_ce1 : OUT STD_LOGIC;
        regions_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_3_we1 : OUT STD_LOGIC;
        regions_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_4_ce0 : OUT STD_LOGIC;
        regions_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_4_we0 : OUT STD_LOGIC;
        regions_4_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_4_ce1 : OUT STD_LOGIC;
        regions_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_4_we1 : OUT STD_LOGIC;
        regions_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_5_ce0 : OUT STD_LOGIC;
        regions_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_5_we0 : OUT STD_LOGIC;
        regions_5_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_5_ce1 : OUT STD_LOGIC;
        regions_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_5_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        inputAOV_ap_vld : IN STD_LOGIC;
        startCopy_ap_vld : IN STD_LOGIC;
        startCopy_ap_ack : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        failedTask_ap_vld : OUT STD_LOGIC;
        failedTask_ap_ack : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component run_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_regions_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_n_regions_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component run_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        sw_reset : OUT STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        accel_mode : OUT STD_LOGIC_VECTOR (7 downto 0);
        copying : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputData : OUT STD_LOGIC_VECTOR (63 downto 0);
        startCopy : OUT STD_LOGIC_VECTOR (7 downto 0);
        startCopy_ap_vld : OUT STD_LOGIC;
        startCopy_ap_ack : IN STD_LOGIC;
        IOCheckIdx : OUT STD_LOGIC_VECTOR (7 downto 0);
        errorInTask_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        errorInTask_ce0 : IN STD_LOGIC;
        errorInTask_we0 : IN STD_LOGIC;
        errorInTask_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        errorInTask_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        trainedRegion_i : OUT STD_LOGIC_VECTOR (767 downto 0);
        trainedRegion_o : IN STD_LOGIC_VECTOR (767 downto 0);
        IORegionIdx : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_regions_in_o : IN STD_LOGIC_VECTOR (7 downto 0);
        n_regions_in_i : OUT STD_LOGIC_VECTOR (7 downto 0);
        outcomeInRam_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        outcomeInRam_ce0 : IN STD_LOGIC;
        outcomeInRam_we0 : IN STD_LOGIC_VECTOR (35 downto 0);
        outcomeInRam_d0 : IN STD_LOGIC_VECTOR (287 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        flush : OUT STD_LOGIC;
        flush_done : IN STD_LOGIC );
    end component;


    component run_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        flush : IN STD_LOGIC;
        flush_done : OUT STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component run_regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regions_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_address0,
        ce0 => regions_ce0,
        we0 => regions_we0,
        d0 => regions_d0,
        q0 => regions_q0,
        address1 => regions_address1,
        ce1 => regions_ce1,
        we1 => regions_we1,
        d1 => regions_d1,
        q1 => regions_q1);

    regions_2_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_2_address0,
        ce0 => regions_2_ce0,
        we0 => regions_2_we0,
        d0 => regions_2_d0,
        q0 => regions_2_q0,
        address1 => regions_2_address1,
        ce1 => regions_2_ce1,
        we1 => regions_2_we1,
        d1 => regions_2_d1,
        q1 => regions_2_q1);

    regions_4_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_4_address0,
        ce0 => regions_4_ce0,
        we0 => regions_4_we0,
        d0 => regions_4_d0,
        q0 => regions_4_q0,
        address1 => regions_4_address1,
        ce1 => regions_4_ce1,
        we1 => regions_4_we1,
        d1 => regions_4_d1,
        q1 => regions_4_q1);

    regions_1_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_1_address0,
        ce0 => regions_1_ce0,
        we0 => regions_1_we0,
        d0 => regions_1_d0,
        q0 => regions_1_q0,
        address1 => regions_1_address1,
        ce1 => regions_1_ce1,
        we1 => regions_1_we1,
        d1 => regions_1_d1,
        q1 => regions_1_q1);

    regions_3_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_3_address0,
        ce0 => regions_3_ce0,
        we0 => regions_3_we0,
        d0 => regions_3_d0,
        q0 => regions_3_q0,
        address1 => regions_3_address1,
        ce1 => regions_3_ce1,
        we1 => regions_3_we1,
        d1 => regions_3_d1,
        q1 => regions_3_q1);

    regions_5_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_5_address0,
        ce0 => regions_5_ce0,
        we0 => regions_5_we0,
        d0 => regions_5_d0,
        q0 => regions_5_q0,
        address1 => regions_5_address1,
        ce1 => regions_5_ce1,
        we1 => regions_5_we1,
        d1 => regions_5_d1,
        q1 => regions_5_q1);

    n_regions_V_U : component run_n_regions_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => n_regions_V_address0,
        ce0 => n_regions_V_ce0,
        we0 => n_regions_V_we0,
        d0 => n_regions_V_d0,
        q0 => n_regions_V_q0);

    grp_afterInit_fu_1117 : component run_afterInit
    port map (
        m_axi_gmem_AWVALID => grp_afterInit_fu_1117_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_afterInit_fu_1117_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_afterInit_fu_1117_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_afterInit_fu_1117_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_afterInit_fu_1117_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_afterInit_fu_1117_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_afterInit_fu_1117_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_afterInit_fu_1117_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_afterInit_fu_1117_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_afterInit_fu_1117_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_afterInit_fu_1117_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_afterInit_fu_1117_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_afterInit_fu_1117_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_afterInit_fu_1117_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_afterInit_fu_1117_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_afterInit_fu_1117_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_afterInit_fu_1117_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_afterInit_fu_1117_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_afterInit_fu_1117_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_afterInit_fu_1117_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_afterInit_fu_1117_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_afterInit_fu_1117_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_afterInit_fu_1117_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_afterInit_fu_1117_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_afterInit_fu_1117_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_afterInit_fu_1117_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_afterInit_fu_1117_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_afterInit_fu_1117_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_afterInit_fu_1117_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_afterInit_fu_1117_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_afterInit_fu_1117_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_afterInit_fu_1117_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        inputAOV => inputData_read_reg_1993,
        startCopy => startCopy,
        outcomeInRam_address0 => grp_afterInit_fu_1117_outcomeInRam_address0,
        outcomeInRam_ce0 => grp_afterInit_fu_1117_outcomeInRam_ce0,
        outcomeInRam_d0 => grp_afterInit_fu_1117_outcomeInRam_d0,
        outcomeInRam_q0 => ap_const_lv288_lc_1,
        outcomeInRam_we0 => grp_afterInit_fu_1117_outcomeInRam_we0,
        errorInTask_address0 => grp_afterInit_fu_1117_errorInTask_address0,
        errorInTask_ce0 => grp_afterInit_fu_1117_errorInTask_ce0,
        errorInTask_d0 => grp_afterInit_fu_1117_errorInTask_d0,
        errorInTask_q0 => errorInTask_q0,
        errorInTask_we0 => grp_afterInit_fu_1117_errorInTask_we0,
        failedTask => grp_afterInit_fu_1117_failedTask,
        n_regions_V_address0 => grp_afterInit_fu_1117_n_regions_V_address0,
        n_regions_V_ce0 => grp_afterInit_fu_1117_n_regions_V_ce0,
        n_regions_V_d0 => grp_afterInit_fu_1117_n_regions_V_d0,
        n_regions_V_q0 => n_regions_V_q0,
        n_regions_V_we0 => grp_afterInit_fu_1117_n_regions_V_we0,
        n_regions_V_address1 => grp_afterInit_fu_1117_n_regions_V_address1,
        n_regions_V_ce1 => grp_afterInit_fu_1117_n_regions_V_ce1,
        n_regions_V_d1 => grp_afterInit_fu_1117_n_regions_V_d1,
        n_regions_V_q1 => ap_const_lv8_0,
        n_regions_V_we1 => grp_afterInit_fu_1117_n_regions_V_we1,
        regions_address0 => grp_afterInit_fu_1117_regions_address0,
        regions_ce0 => grp_afterInit_fu_1117_regions_ce0,
        regions_d0 => grp_afterInit_fu_1117_regions_d0,
        regions_q0 => regions_q0,
        regions_we0 => grp_afterInit_fu_1117_regions_we0,
        regions_address1 => grp_afterInit_fu_1117_regions_address1,
        regions_ce1 => grp_afterInit_fu_1117_regions_ce1,
        regions_d1 => grp_afterInit_fu_1117_regions_d1,
        regions_q1 => regions_q1,
        regions_we1 => grp_afterInit_fu_1117_regions_we1,
        regions_1_address0 => grp_afterInit_fu_1117_regions_1_address0,
        regions_1_ce0 => grp_afterInit_fu_1117_regions_1_ce0,
        regions_1_d0 => grp_afterInit_fu_1117_regions_1_d0,
        regions_1_q0 => regions_1_q0,
        regions_1_we0 => grp_afterInit_fu_1117_regions_1_we0,
        regions_1_address1 => grp_afterInit_fu_1117_regions_1_address1,
        regions_1_ce1 => grp_afterInit_fu_1117_regions_1_ce1,
        regions_1_d1 => grp_afterInit_fu_1117_regions_1_d1,
        regions_1_q1 => regions_1_q1,
        regions_1_we1 => grp_afterInit_fu_1117_regions_1_we1,
        regions_2_address0 => grp_afterInit_fu_1117_regions_2_address0,
        regions_2_ce0 => grp_afterInit_fu_1117_regions_2_ce0,
        regions_2_d0 => grp_afterInit_fu_1117_regions_2_d0,
        regions_2_q0 => regions_2_q0,
        regions_2_we0 => grp_afterInit_fu_1117_regions_2_we0,
        regions_2_address1 => grp_afterInit_fu_1117_regions_2_address1,
        regions_2_ce1 => grp_afterInit_fu_1117_regions_2_ce1,
        regions_2_d1 => grp_afterInit_fu_1117_regions_2_d1,
        regions_2_q1 => regions_2_q1,
        regions_2_we1 => grp_afterInit_fu_1117_regions_2_we1,
        regions_3_address0 => grp_afterInit_fu_1117_regions_3_address0,
        regions_3_ce0 => grp_afterInit_fu_1117_regions_3_ce0,
        regions_3_d0 => grp_afterInit_fu_1117_regions_3_d0,
        regions_3_q0 => regions_3_q0,
        regions_3_we0 => grp_afterInit_fu_1117_regions_3_we0,
        regions_3_address1 => grp_afterInit_fu_1117_regions_3_address1,
        regions_3_ce1 => grp_afterInit_fu_1117_regions_3_ce1,
        regions_3_d1 => grp_afterInit_fu_1117_regions_3_d1,
        regions_3_q1 => regions_3_q1,
        regions_3_we1 => grp_afterInit_fu_1117_regions_3_we1,
        regions_4_address0 => grp_afterInit_fu_1117_regions_4_address0,
        regions_4_ce0 => grp_afterInit_fu_1117_regions_4_ce0,
        regions_4_d0 => grp_afterInit_fu_1117_regions_4_d0,
        regions_4_q0 => regions_4_q0,
        regions_4_we0 => grp_afterInit_fu_1117_regions_4_we0,
        regions_4_address1 => grp_afterInit_fu_1117_regions_4_address1,
        regions_4_ce1 => grp_afterInit_fu_1117_regions_4_ce1,
        regions_4_d1 => grp_afterInit_fu_1117_regions_4_d1,
        regions_4_q1 => regions_4_q1,
        regions_4_we1 => grp_afterInit_fu_1117_regions_4_we1,
        regions_5_address0 => grp_afterInit_fu_1117_regions_5_address0,
        regions_5_ce0 => grp_afterInit_fu_1117_regions_5_ce0,
        regions_5_d0 => grp_afterInit_fu_1117_regions_5_d0,
        regions_5_q0 => regions_5_q0,
        regions_5_we0 => grp_afterInit_fu_1117_regions_5_we0,
        regions_5_address1 => grp_afterInit_fu_1117_regions_5_address1,
        regions_5_ce1 => grp_afterInit_fu_1117_regions_5_ce1,
        regions_5_d1 => grp_afterInit_fu_1117_regions_5_d1,
        regions_5_q1 => regions_5_q1,
        regions_5_we1 => grp_afterInit_fu_1117_regions_5_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inputAOV_ap_vld => ap_const_logic_1,
        startCopy_ap_vld => startCopy_ap_vld,
        startCopy_ap_ack => grp_afterInit_fu_1117_startCopy_ap_ack,
        ap_start => grp_afterInit_fu_1117_ap_start,
        ap_done => grp_afterInit_fu_1117_ap_done,
        failedTask_ap_vld => grp_afterInit_fu_1117_failedTask_ap_vld,
        failedTask_ap_ack => grp_afterInit_fu_1117_failedTask_ap_ack,
        ap_ready => grp_afterInit_fu_1117_ap_ready,
        ap_idle => grp_afterInit_fu_1117_ap_idle,
        ap_continue => grp_afterInit_fu_1117_ap_continue);

    control_s_axi_U : component run_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        sw_reset => ap_rst_sw,
        ACLK_EN => ap_const_logic_1,
        accel_mode => accel_mode,
        copying => copying,
        inputData => inputData,
        startCopy => startCopy,
        startCopy_ap_vld => startCopy_ap_vld,
        startCopy_ap_ack => startCopy_ap_ack,
        IOCheckIdx => IOCheckIdx,
        errorInTask_address0 => grp_afterInit_fu_1117_errorInTask_address0,
        errorInTask_ce0 => grp_afterInit_fu_1117_errorInTask_ce0,
        errorInTask_we0 => grp_afterInit_fu_1117_errorInTask_we0,
        errorInTask_d0 => grp_afterInit_fu_1117_errorInTask_d0,
        errorInTask_q0 => errorInTask_q0,
        trainedRegion_i => trainedRegion_i,
        trainedRegion_o => trainedRegion_o,
        IORegionIdx => IORegionIdx,
        n_regions_in_o => n_regions_in_o,
        n_regions_in_i => n_regions_in_i,
        outcomeInRam_address0 => grp_afterInit_fu_1117_outcomeInRam_address0,
        outcomeInRam_ce0 => grp_afterInit_fu_1117_outcomeInRam_ce0,
        outcomeInRam_we0 => grp_afterInit_fu_1117_outcomeInRam_we0,
        outcomeInRam_d0 => grp_afterInit_fu_1117_outcomeInRam_d0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        flush => flush,
        flush_done => s_axi_control_flush_done);

    gmem_m_axi_U : component run_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 512,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        flush => flush,
        flush_done => m_axi_gmem_flush_done,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_afterInit_fu_1117_m_axi_gmem_ARADDR,
        I_ARLEN => grp_afterInit_fu_1117_m_axi_gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);

    mux_21_32_1_1_U121 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_q1,
        din1 => regions_1_q1,
        din2 => trunc_ln718_reg_2002,
        dout => grp_fu_1159_p4);

    mux_21_32_1_1_U122 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_q0,
        din1 => regions_1_q0,
        din2 => trunc_ln718_reg_2002,
        dout => grp_fu_1168_p4);

    mux_21_32_1_1_U123 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_2_q1,
        din1 => regions_3_q1,
        din2 => trunc_ln718_reg_2002,
        dout => grp_fu_1177_p4);

    mux_21_32_1_1_U124 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_2_q0,
        din1 => regions_3_q0,
        din2 => trunc_ln718_reg_2002,
        dout => grp_fu_1186_p4);

    mux_21_32_1_1_U125 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_4_q1,
        din1 => regions_5_q1,
        din2 => trunc_ln718_reg_2002,
        dout => grp_fu_1195_p4);

    mux_21_32_1_1_U126 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_4_q0,
        din1 => regions_5_q0,
        din2 => trunc_ln718_reg_2002,
        dout => grp_fu_1204_p4);

    regslice_forward_failedTask_U : component run_regslice_forward
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_afterInit_fu_1117_failedTask,
        vld_in => grp_afterInit_fu_1117_failedTask_ap_vld,
        ack_in => failedTask_ap_ack_int_regslice,
        data_out => failedTask,
        vld_out => regslice_forward_failedTask_U_vld_out,
        ack_out => failedTask_ap_ack,
        apdone_blk => regslice_forward_failedTask_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_afterInit_fu_1117_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_afterInit_fu_1117_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_afterInit_fu_1117_ap_done <= ap_const_logic_0;
                elsif ((grp_afterInit_fu_1117_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_afterInit_fu_1117_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_afterInit_fu_1117_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_afterInit_fu_1117_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_afterInit_fu_1117_ap_ready <= ap_const_logic_0;
                elsif ((grp_afterInit_fu_1117_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_afterInit_fu_1117_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_afterInit_fu_1117_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_afterInit_fu_1117_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_afterInit_fu_1117_ap_ready = ap_const_logic_0) and (ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_lv8_3 = accel_mode) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_afterInit_fu_1117_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_afterInit_fu_1117_ap_ready = ap_const_logic_1)) then 
                    grp_afterInit_fu_1117_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    n_regions_in_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_regions_in_o_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    n_regions_in_o_preg <= n_regions_V_q0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_2 <= ap_rst_int;
        end if;
    end process;

    s_axi_control_flush_done_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            s_axi_control_flush_done <= (m_axi_gmem_flush_done);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bitcast_ln757_10_reg_2308 <= bitcast_ln757_10_fu_1582_p1;
                bitcast_ln757_11_reg_2314 <= bitcast_ln757_11_fu_1596_p1;
                bitcast_ln757_12_reg_2320 <= bitcast_ln757_12_fu_1610_p1;
                bitcast_ln757_13_reg_2326 <= bitcast_ln757_13_fu_1624_p1;
                bitcast_ln757_14_reg_2332 <= bitcast_ln757_14_fu_1638_p1;
                bitcast_ln757_15_reg_2338 <= bitcast_ln757_15_fu_1652_p1;
                bitcast_ln757_18_reg_2344 <= bitcast_ln757_18_fu_1698_p1;
                bitcast_ln757_19_reg_2350 <= bitcast_ln757_19_fu_1712_p1;
                bitcast_ln757_20_reg_2356 <= bitcast_ln757_20_fu_1726_p1;
                bitcast_ln757_21_reg_2362 <= bitcast_ln757_21_fu_1740_p1;
                bitcast_ln757_22_reg_2368 <= bitcast_ln757_22_fu_1754_p1;
                bitcast_ln757_23_reg_2374 <= bitcast_ln757_23_fu_1768_p1;
                bitcast_ln757_2_reg_2272 <= bitcast_ln757_2_fu_1466_p1;
                bitcast_ln757_3_reg_2278 <= bitcast_ln757_3_fu_1480_p1;
                bitcast_ln757_4_reg_2284 <= bitcast_ln757_4_fu_1494_p1;
                bitcast_ln757_5_reg_2290 <= bitcast_ln757_5_fu_1508_p1;
                bitcast_ln757_6_reg_2296 <= bitcast_ln757_6_fu_1522_p1;
                bitcast_ln757_7_reg_2302 <= bitcast_ln757_7_fu_1536_p1;
                    regions_1_addr_10_reg_2122(11 downto 3) <= zext_ln757_4_fu_1350_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_11_reg_2127(11 downto 3) <= zext_ln757_5_fu_1366_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_12_reg_2132(11 downto 3) <= zext_ln757_6_fu_1382_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_13_reg_2137(11 downto 3) <= zext_ln757_7_fu_1398_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_14_reg_2142(11 downto 3) <= zext_ln757_8_fu_1414_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_15_reg_2147(11 downto 3) <= zext_ln757_9_fu_1430_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_2_reg_2152(11 downto 3) <= zext_ln757_4_fu_1350_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_3_reg_2157(11 downto 3) <= zext_ln757_5_fu_1366_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_4_reg_2162(11 downto 3) <= zext_ln757_6_fu_1382_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_5_reg_2167(11 downto 3) <= zext_ln757_7_fu_1398_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_6_reg_2172(11 downto 3) <= zext_ln757_8_fu_1414_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_7_reg_2177(11 downto 3) <= zext_ln757_9_fu_1430_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_10_reg_2182(11 downto 3) <= zext_ln757_4_fu_1350_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_11_reg_2187(11 downto 3) <= zext_ln757_5_fu_1366_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_12_reg_2192(11 downto 3) <= zext_ln757_6_fu_1382_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_13_reg_2197(11 downto 3) <= zext_ln757_7_fu_1398_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_14_reg_2202(11 downto 3) <= zext_ln757_8_fu_1414_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_15_reg_2207(11 downto 3) <= zext_ln757_9_fu_1430_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_2_reg_2212(11 downto 3) <= zext_ln757_4_fu_1350_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_3_reg_2217(11 downto 3) <= zext_ln757_5_fu_1366_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_4_reg_2222(11 downto 3) <= zext_ln757_6_fu_1382_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_5_reg_2227(11 downto 3) <= zext_ln757_7_fu_1398_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_6_reg_2232(11 downto 3) <= zext_ln757_8_fu_1414_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_7_reg_2237(11 downto 3) <= zext_ln757_9_fu_1430_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_10_reg_2242(11 downto 3) <= zext_ln757_4_fu_1350_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_11_reg_2247(11 downto 3) <= zext_ln757_5_fu_1366_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_12_reg_2252(11 downto 3) <= zext_ln757_6_fu_1382_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_13_reg_2257(11 downto 3) <= zext_ln757_7_fu_1398_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_14_reg_2262(11 downto 3) <= zext_ln757_8_fu_1414_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_15_reg_2267(11 downto 3) <= zext_ln757_9_fu_1430_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_2_reg_2092(11 downto 3) <= zext_ln757_4_fu_1350_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_3_reg_2097(11 downto 3) <= zext_ln757_5_fu_1366_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_4_reg_2102(11 downto 3) <= zext_ln757_6_fu_1382_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_5_reg_2107(11 downto 3) <= zext_ln757_7_fu_1398_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_6_reg_2112(11 downto 3) <= zext_ln757_8_fu_1414_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_7_reg_2117(11 downto 3) <= zext_ln757_9_fu_1430_p1(12 - 1 downto 0)(11 downto 3);
                    zext_ln587_reg_2087(7 downto 0) <= zext_ln587_fu_1276_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                inputData_read_reg_1993 <= inputData;
                trunc_ln718_reg_2002 <= trunc_ln718_fu_1213_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    shl_ln760_reg_2012(11 downto 3) <= shl_ln760_fu_1244_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_22_reg_2440 <= grp_fu_1159_p4;
                tmp_23_reg_2445 <= grp_fu_1168_p4;
                tmp_30_reg_2450 <= grp_fu_1177_p4;
                tmp_31_reg_2455 <= grp_fu_1186_p4;
                tmp_38_reg_2460 <= grp_fu_1195_p4;
                tmp_39_reg_2465 <= grp_fu_1204_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_24_reg_2530 <= grp_fu_1159_p4;
                tmp_25_reg_2535 <= grp_fu_1168_p4;
                tmp_32_reg_2540 <= grp_fu_1177_p4;
                tmp_33_reg_2545 <= grp_fu_1186_p4;
                tmp_40_reg_2550 <= grp_fu_1195_p4;
                tmp_41_reg_2555 <= grp_fu_1204_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_26_reg_2620 <= grp_fu_1159_p4;
                tmp_27_reg_2625 <= grp_fu_1168_p4;
                tmp_34_reg_2630 <= grp_fu_1177_p4;
                tmp_35_reg_2635 <= grp_fu_1186_p4;
                tmp_42_reg_2640 <= grp_fu_1195_p4;
                tmp_43_reg_2645 <= grp_fu_1204_p4;
            end if;
        end if;
    end process;
    shl_ln760_reg_2012(2 downto 0) <= "000";
    zext_ln587_reg_2087(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    regions_addr_2_reg_2092(2 downto 0) <= "010";
    regions_addr_3_reg_2097(2 downto 0) <= "011";
    regions_addr_4_reg_2102(2 downto 0) <= "100";
    regions_addr_5_reg_2107(2 downto 0) <= "101";
    regions_addr_6_reg_2112(2 downto 0) <= "110";
    regions_addr_7_reg_2117(2 downto 0) <= "111";
    regions_1_addr_10_reg_2122(2 downto 0) <= "010";
    regions_1_addr_11_reg_2127(2 downto 0) <= "011";
    regions_1_addr_12_reg_2132(2 downto 0) <= "100";
    regions_1_addr_13_reg_2137(2 downto 0) <= "101";
    regions_1_addr_14_reg_2142(2 downto 0) <= "110";
    regions_1_addr_15_reg_2147(2 downto 0) <= "111";
    regions_2_addr_2_reg_2152(2 downto 0) <= "010";
    regions_2_addr_3_reg_2157(2 downto 0) <= "011";
    regions_2_addr_4_reg_2162(2 downto 0) <= "100";
    regions_2_addr_5_reg_2167(2 downto 0) <= "101";
    regions_2_addr_6_reg_2172(2 downto 0) <= "110";
    regions_2_addr_7_reg_2177(2 downto 0) <= "111";
    regions_3_addr_10_reg_2182(2 downto 0) <= "010";
    regions_3_addr_11_reg_2187(2 downto 0) <= "011";
    regions_3_addr_12_reg_2192(2 downto 0) <= "100";
    regions_3_addr_13_reg_2197(2 downto 0) <= "101";
    regions_3_addr_14_reg_2202(2 downto 0) <= "110";
    regions_3_addr_15_reg_2207(2 downto 0) <= "111";
    regions_4_addr_2_reg_2212(2 downto 0) <= "010";
    regions_4_addr_3_reg_2217(2 downto 0) <= "011";
    regions_4_addr_4_reg_2222(2 downto 0) <= "100";
    regions_4_addr_5_reg_2227(2 downto 0) <= "101";
    regions_4_addr_6_reg_2232(2 downto 0) <= "110";
    regions_4_addr_7_reg_2237(2 downto 0) <= "111";
    regions_5_addr_10_reg_2242(2 downto 0) <= "010";
    regions_5_addr_11_reg_2247(2 downto 0) <= "011";
    regions_5_addr_12_reg_2252(2 downto 0) <= "100";
    regions_5_addr_13_reg_2257(2 downto 0) <= "101";
    regions_5_addr_14_reg_2262(2 downto 0) <= "110";
    regions_5_addr_15_reg_2267(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state6, regslice_forward_failedTask_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2)) and not((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2)) and not((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2)) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((regslice_forward_failedTask_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    accel_mode_read_read_fu_282_p2 <= accel_mode;
    add_ln757_fu_1306_p2 <= std_logic_vector(unsigned(zext_ln757_fu_1288_p1) + unsigned(zext_ln757_1_fu_1302_p1));
    add_ln760_fu_1238_p2 <= std_logic_vector(unsigned(zext_ln760_fu_1230_p1) + unsigned(zext_ln760_1_fu_1234_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(regslice_forward_failedTask_U_apdone_blk)
    begin
        if ((regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state2_on_subcall_done_assign_proc : process(accel_mode, ap_sync_grp_afterInit_fu_1117_ap_ready, ap_sync_grp_afterInit_fu_1117_ap_done)
    begin
                ap_block_state2_on_subcall_done <= (((ap_sync_grp_afterInit_fu_1117_ap_ready and ap_sync_grp_afterInit_fu_1117_ap_done) = ap_const_logic_0) and (ap_const_lv8_3 = accel_mode));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_forward_failedTask_U_apdone_blk)
    begin
        if (((regslice_forward_failedTask_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_forward_failedTask_U_apdone_blk)
    begin
        if (((regslice_forward_failedTask_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_int_assign_proc : process(ap_rst_n, ap_rst_sw)
    begin
        ap_rst_int <= (not(ap_rst_n) or ap_rst_sw);
    end process;

    ap_sync_grp_afterInit_fu_1117_ap_done <= (grp_afterInit_fu_1117_ap_done or ap_sync_reg_grp_afterInit_fu_1117_ap_done);
    ap_sync_grp_afterInit_fu_1117_ap_ready <= (grp_afterInit_fu_1117_ap_ready or ap_sync_reg_grp_afterInit_fu_1117_ap_ready);
    bitcast_ln757_10_fu_1582_p1 <= tmp_9_fu_1572_p4;
    bitcast_ln757_11_fu_1596_p1 <= tmp_10_fu_1586_p4;
    bitcast_ln757_12_fu_1610_p1 <= tmp_11_fu_1600_p4;
    bitcast_ln757_13_fu_1624_p1 <= tmp_12_fu_1614_p4;
    bitcast_ln757_14_fu_1638_p1 <= tmp_13_fu_1628_p4;
    bitcast_ln757_15_fu_1652_p1 <= tmp_14_fu_1642_p4;
    bitcast_ln757_16_fu_1666_p1 <= tmp_15_fu_1656_p4;
    bitcast_ln757_17_fu_1682_p1 <= tmp_16_fu_1672_p4;
    bitcast_ln757_18_fu_1698_p1 <= tmp_17_fu_1688_p4;
    bitcast_ln757_19_fu_1712_p1 <= tmp_18_fu_1702_p4;
    bitcast_ln757_1_fu_1450_p1 <= tmp_fu_1440_p4;
    bitcast_ln757_20_fu_1726_p1 <= tmp_19_fu_1716_p4;
    bitcast_ln757_21_fu_1740_p1 <= tmp_20_fu_1730_p4;
    bitcast_ln757_22_fu_1754_p1 <= tmp_21_fu_1744_p4;
    bitcast_ln757_23_fu_1768_p1 <= tmp_46_fu_1758_p4;
    bitcast_ln757_2_fu_1466_p1 <= tmp_1_fu_1456_p4;
    bitcast_ln757_3_fu_1480_p1 <= tmp_2_fu_1470_p4;
    bitcast_ln757_4_fu_1494_p1 <= tmp_3_fu_1484_p4;
    bitcast_ln757_5_fu_1508_p1 <= tmp_4_fu_1498_p4;
    bitcast_ln757_6_fu_1522_p1 <= tmp_5_fu_1512_p4;
    bitcast_ln757_7_fu_1536_p1 <= tmp_6_fu_1526_p4;
    bitcast_ln757_8_fu_1550_p1 <= tmp_7_fu_1540_p4;
    bitcast_ln757_9_fu_1566_p1 <= tmp_8_fu_1556_p4;
    bitcast_ln757_fu_1296_p1 <= trunc_ln757_fu_1292_p1;
    bitcast_ln760_10_fu_1894_p1 <= tmp_32_reg_2540;
    bitcast_ln760_11_fu_1897_p1 <= tmp_33_reg_2545;
    bitcast_ln760_12_fu_1900_p1 <= tmp_34_reg_2630;
    bitcast_ln760_13_fu_1903_p1 <= tmp_35_reg_2635;
    bitcast_ln760_14_fu_1906_p1 <= grp_fu_1177_p4;
    bitcast_ln760_15_fu_1910_p1 <= grp_fu_1186_p4;
    bitcast_ln760_16_fu_1914_p1 <= tmp_38_reg_2460;
    bitcast_ln760_17_fu_1917_p1 <= tmp_39_reg_2465;
    bitcast_ln760_18_fu_1920_p1 <= tmp_40_reg_2550;
    bitcast_ln760_19_fu_1923_p1 <= tmp_41_reg_2555;
    bitcast_ln760_1_fu_1865_p1 <= tmp_23_reg_2445;
    bitcast_ln760_20_fu_1926_p1 <= tmp_42_reg_2640;
    bitcast_ln760_21_fu_1929_p1 <= tmp_43_reg_2645;
    bitcast_ln760_22_fu_1932_p1 <= grp_fu_1195_p4;
    bitcast_ln760_23_fu_1936_p1 <= grp_fu_1204_p4;
    bitcast_ln760_2_fu_1868_p1 <= tmp_24_reg_2530;
    bitcast_ln760_3_fu_1871_p1 <= tmp_25_reg_2535;
    bitcast_ln760_4_fu_1874_p1 <= tmp_26_reg_2620;
    bitcast_ln760_5_fu_1877_p1 <= tmp_27_reg_2625;
    bitcast_ln760_6_fu_1880_p1 <= grp_fu_1159_p4;
    bitcast_ln760_7_fu_1884_p1 <= grp_fu_1168_p4;
    bitcast_ln760_8_fu_1888_p1 <= tmp_30_reg_2450;
    bitcast_ln760_9_fu_1891_p1 <= tmp_31_reg_2455;
    bitcast_ln760_fu_1862_p1 <= tmp_22_reg_2440;
    failedTask_ap_vld <= regslice_forward_failedTask_U_vld_out;

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state1, accel_mode, grp_afterInit_fu_1117_m_axi_gmem_ARVALID, ap_CS_fsm_state2)
    begin
        if ((((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            gmem_ARVALID <= grp_afterInit_fu_1117_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state1, accel_mode, grp_afterInit_fu_1117_m_axi_gmem_RREADY, ap_CS_fsm_state2)
    begin
        if ((((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            gmem_RREADY <= grp_afterInit_fu_1117_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    grp_afterInit_fu_1117_ap_continue_assign_proc : process(accel_mode, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_afterInit_fu_1117_ap_continue <= ap_const_logic_1;
        else 
            grp_afterInit_fu_1117_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_afterInit_fu_1117_ap_start <= grp_afterInit_fu_1117_ap_start_reg;
    grp_afterInit_fu_1117_failedTask_ap_ack <= (failedTask_ap_ack_int_regslice and ap_CS_fsm_state2);
    grp_fu_1149_p4 <= IORegionIdx(7 downto 1);

    n_regions_V_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, zext_ln587_reg_2087, grp_afterInit_fu_1117_n_regions_V_address0, ap_CS_fsm_state2, zext_ln587_1_fu_1217_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            n_regions_V_address0 <= zext_ln587_reg_2087(6 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_regions_V_address0 <= zext_ln587_1_fu_1217_p1(6 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            n_regions_V_address0 <= grp_afterInit_fu_1117_n_regions_V_address0;
        else 
            n_regions_V_address0 <= "XXXXXX";
        end if; 
    end process;


    n_regions_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, grp_afterInit_fu_1117_n_regions_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            n_regions_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            n_regions_V_ce0 <= grp_afterInit_fu_1117_n_regions_V_ce0;
        else 
            n_regions_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    n_regions_V_d0_assign_proc : process(accel_mode, n_regions_in_i, grp_afterInit_fu_1117_n_regions_V_d0, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            n_regions_V_d0 <= n_regions_in_i;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            n_regions_V_d0 <= grp_afterInit_fu_1117_n_regions_V_d0;
        else 
            n_regions_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    n_regions_V_we0_assign_proc : process(accel_mode, grp_afterInit_fu_1117_n_regions_V_we0, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            n_regions_V_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            n_regions_V_we0 <= grp_afterInit_fu_1117_n_regions_V_we0;
        else 
            n_regions_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    n_regions_in_o_assign_proc : process(n_regions_V_q0, ap_CS_fsm_state3, n_regions_in_o_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            n_regions_in_o <= n_regions_V_q0;
        else 
            n_regions_in_o <= n_regions_in_o_preg;
        end if; 
    end process;

    or_ln757_1_fu_1344_p2 <= (shl_ln757_fu_1312_p2 or ap_const_lv12_2);
    or_ln757_2_fu_1360_p2 <= (shl_ln757_fu_1312_p2 or ap_const_lv12_3);
    or_ln757_3_fu_1376_p2 <= (shl_ln757_fu_1312_p2 or ap_const_lv12_4);
    or_ln757_4_fu_1392_p2 <= (shl_ln757_fu_1312_p2 or ap_const_lv12_5);
    or_ln757_5_fu_1408_p2 <= (shl_ln757_fu_1312_p2 or ap_const_lv12_6);
    or_ln757_6_fu_1424_p2 <= (shl_ln757_fu_1312_p2 or ap_const_lv12_7);
    or_ln757_fu_1328_p2 <= (shl_ln757_fu_1312_p2 or ap_const_lv12_1);
    or_ln760_1_fu_1772_p2 <= (shl_ln760_reg_2012 or ap_const_lv12_2);
    or_ln760_2_fu_1787_p2 <= (shl_ln760_reg_2012 or ap_const_lv12_3);
    or_ln760_3_fu_1802_p2 <= (shl_ln760_reg_2012 or ap_const_lv12_4);
    or_ln760_4_fu_1817_p2 <= (shl_ln760_reg_2012 or ap_const_lv12_5);
    or_ln760_5_fu_1832_p2 <= (shl_ln760_reg_2012 or ap_const_lv12_6);
    or_ln760_6_fu_1847_p2 <= (shl_ln760_reg_2012 or ap_const_lv12_7);
    or_ln760_fu_1260_p2 <= (shl_ln760_fu_1244_p2 or ap_const_lv12_1);

    regions_1_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_1_addr_11_reg_2127, regions_1_addr_13_reg_2137, regions_1_addr_15_reg_2147, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_1_address0, ap_CS_fsm_state2, zext_ln760_3_fu_1266_p1, zext_ln757_3_fu_1334_p1, zext_ln760_5_fu_1792_p1, zext_ln760_7_fu_1822_p1, zext_ln760_9_fu_1852_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_address0 <= regions_1_addr_13_reg_2137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_address0 <= regions_1_addr_11_reg_2127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_1_address0 <= regions_1_addr_15_reg_2147;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_1_address0 <= zext_ln760_9_fu_1852_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_1_address0 <= zext_ln760_7_fu_1822_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_1_address0 <= zext_ln760_5_fu_1792_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address0 <= zext_ln757_3_fu_1334_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address0 <= zext_ln760_3_fu_1266_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_address0 <= grp_afterInit_fu_1117_regions_1_address0;
        else 
            regions_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_1_addr_10_reg_2122, regions_1_addr_12_reg_2132, regions_1_addr_14_reg_2142, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_1_address1, ap_CS_fsm_state2, zext_ln760_2_fu_1250_p1, zext_ln757_2_fu_1318_p1, zext_ln760_4_fu_1777_p1, zext_ln760_6_fu_1807_p1, zext_ln760_8_fu_1837_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_address1 <= regions_1_addr_12_reg_2132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_address1 <= regions_1_addr_10_reg_2122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_1_address1 <= regions_1_addr_14_reg_2142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_1_address1 <= zext_ln760_8_fu_1837_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_1_address1 <= zext_ln760_6_fu_1807_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_1_address1 <= zext_ln760_4_fu_1777_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address1 <= zext_ln757_2_fu_1318_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address1 <= zext_ln760_2_fu_1250_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_address1 <= grp_afterInit_fu_1117_regions_1_address1;
        else 
            regions_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_1_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_ce0 <= grp_afterInit_fu_1117_regions_1_ce0;
        else 
            regions_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_1_ce1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_1_ce1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_ce1 <= grp_afterInit_fu_1117_regions_1_ce1;
        else 
            regions_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_1_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_3_reg_2278, bitcast_ln757_5_reg_2290, bitcast_ln757_7_reg_2302, grp_afterInit_fu_1117_regions_1_d0, ap_CS_fsm_state2, ap_CS_fsm_state9, bitcast_ln757_1_fu_1450_p1, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_d0 <= bitcast_ln757_5_reg_2290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_d0 <= bitcast_ln757_3_reg_2278;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_1_d0 <= bitcast_ln757_7_reg_2302;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_d0 <= bitcast_ln757_1_fu_1450_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_d0 <= grp_afterInit_fu_1117_regions_1_d0;
        else 
            regions_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_2_reg_2272, bitcast_ln757_4_reg_2284, bitcast_ln757_6_reg_2296, grp_afterInit_fu_1117_regions_1_d1, ap_CS_fsm_state2, ap_CS_fsm_state9, bitcast_ln757_fu_1296_p1, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_d1 <= bitcast_ln757_4_reg_2284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_d1 <= bitcast_ln757_2_reg_2272;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_1_d1 <= bitcast_ln757_6_reg_2296;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_d1 <= bitcast_ln757_fu_1296_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_d1 <= grp_afterInit_fu_1117_regions_1_d1;
        else 
            regions_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_1_we0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((trunc_ln718_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_1_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_we0 <= grp_afterInit_fu_1117_regions_1_we0;
        else 
            regions_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_1_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_1_we1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((trunc_ln718_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_1_we1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_1_we1 <= grp_afterInit_fu_1117_regions_1_we1;
        else 
            regions_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_2_addr_3_reg_2157, regions_2_addr_5_reg_2167, regions_2_addr_7_reg_2177, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_2_address0, ap_CS_fsm_state2, zext_ln760_3_fu_1266_p1, zext_ln757_3_fu_1334_p1, zext_ln760_5_fu_1792_p1, zext_ln760_7_fu_1822_p1, zext_ln760_9_fu_1852_p1, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_address0 <= regions_2_addr_7_reg_2177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_address0 <= regions_2_addr_5_reg_2167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_2_address0 <= regions_2_addr_3_reg_2157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_2_address0 <= zext_ln760_9_fu_1852_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_2_address0 <= zext_ln760_7_fu_1822_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_2_address0 <= zext_ln760_5_fu_1792_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address0 <= zext_ln757_3_fu_1334_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address0 <= zext_ln760_3_fu_1266_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_address0 <= grp_afterInit_fu_1117_regions_2_address0;
        else 
            regions_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_2_addr_2_reg_2152, regions_2_addr_4_reg_2162, regions_2_addr_6_reg_2172, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_2_address1, ap_CS_fsm_state2, zext_ln760_2_fu_1250_p1, zext_ln757_2_fu_1318_p1, zext_ln760_4_fu_1777_p1, zext_ln760_6_fu_1807_p1, zext_ln760_8_fu_1837_p1, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_address1 <= regions_2_addr_6_reg_2172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_address1 <= regions_2_addr_4_reg_2162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_2_address1 <= regions_2_addr_2_reg_2152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_2_address1 <= zext_ln760_8_fu_1837_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_2_address1 <= zext_ln760_6_fu_1807_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_2_address1 <= zext_ln760_4_fu_1777_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address1 <= zext_ln757_2_fu_1318_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address1 <= zext_ln760_2_fu_1250_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_address1 <= grp_afterInit_fu_1117_regions_2_address1;
        else 
            regions_2_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_2_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_2_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_ce0 <= grp_afterInit_fu_1117_regions_2_ce0;
        else 
            regions_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_2_ce1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_2_ce1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_ce1 <= grp_afterInit_fu_1117_regions_2_ce1;
        else 
            regions_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_11_reg_2314, bitcast_ln757_13_reg_2326, bitcast_ln757_15_reg_2338, grp_afterInit_fu_1117_regions_2_d0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, bitcast_ln757_9_fu_1566_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_d0 <= bitcast_ln757_15_reg_2338;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_d0 <= bitcast_ln757_13_reg_2326;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_2_d0 <= bitcast_ln757_11_reg_2314;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_d0 <= bitcast_ln757_9_fu_1566_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_d0 <= grp_afterInit_fu_1117_regions_2_d0;
        else 
            regions_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_10_reg_2308, bitcast_ln757_12_reg_2320, bitcast_ln757_14_reg_2332, grp_afterInit_fu_1117_regions_2_d1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, bitcast_ln757_8_fu_1550_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_d1 <= bitcast_ln757_14_reg_2332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_d1 <= bitcast_ln757_12_reg_2320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_2_d1 <= bitcast_ln757_10_reg_2308;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_d1 <= bitcast_ln757_8_fu_1550_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_d1 <= grp_afterInit_fu_1117_regions_2_d1;
        else 
            regions_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_2_we0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((trunc_ln718_reg_2002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_2_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_we0 <= grp_afterInit_fu_1117_regions_2_we0;
        else 
            regions_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_2_we1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((trunc_ln718_reg_2002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_2_we1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_2_we1 <= grp_afterInit_fu_1117_regions_2_we1;
        else 
            regions_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_3_addr_11_reg_2187, regions_3_addr_13_reg_2197, regions_3_addr_15_reg_2207, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_3_address0, ap_CS_fsm_state2, zext_ln760_3_fu_1266_p1, zext_ln757_3_fu_1334_p1, zext_ln760_5_fu_1792_p1, zext_ln760_7_fu_1822_p1, zext_ln760_9_fu_1852_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_address0 <= regions_3_addr_13_reg_2197;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_address0 <= regions_3_addr_11_reg_2187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_3_address0 <= regions_3_addr_15_reg_2207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_3_address0 <= zext_ln760_9_fu_1852_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_3_address0 <= zext_ln760_7_fu_1822_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_3_address0 <= zext_ln760_5_fu_1792_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address0 <= zext_ln757_3_fu_1334_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address0 <= zext_ln760_3_fu_1266_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_address0 <= grp_afterInit_fu_1117_regions_3_address0;
        else 
            regions_3_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_3_addr_10_reg_2182, regions_3_addr_12_reg_2192, regions_3_addr_14_reg_2202, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_3_address1, ap_CS_fsm_state2, zext_ln760_2_fu_1250_p1, zext_ln757_2_fu_1318_p1, zext_ln760_4_fu_1777_p1, zext_ln760_6_fu_1807_p1, zext_ln760_8_fu_1837_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_address1 <= regions_3_addr_12_reg_2192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_address1 <= regions_3_addr_10_reg_2182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_3_address1 <= regions_3_addr_14_reg_2202;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_3_address1 <= zext_ln760_8_fu_1837_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_3_address1 <= zext_ln760_6_fu_1807_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_3_address1 <= zext_ln760_4_fu_1777_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address1 <= zext_ln757_2_fu_1318_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address1 <= zext_ln760_2_fu_1250_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_address1 <= grp_afterInit_fu_1117_regions_3_address1;
        else 
            regions_3_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_3_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_3_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_ce0 <= grp_afterInit_fu_1117_regions_3_ce0;
        else 
            regions_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_3_ce1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_3_ce1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_ce1 <= grp_afterInit_fu_1117_regions_3_ce1;
        else 
            regions_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_11_reg_2314, bitcast_ln757_13_reg_2326, bitcast_ln757_15_reg_2338, grp_afterInit_fu_1117_regions_3_d0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, bitcast_ln757_9_fu_1566_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_d0 <= bitcast_ln757_13_reg_2326;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_d0 <= bitcast_ln757_11_reg_2314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_3_d0 <= bitcast_ln757_15_reg_2338;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_d0 <= bitcast_ln757_9_fu_1566_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_d0 <= grp_afterInit_fu_1117_regions_3_d0;
        else 
            regions_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_10_reg_2308, bitcast_ln757_12_reg_2320, bitcast_ln757_14_reg_2332, grp_afterInit_fu_1117_regions_3_d1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, bitcast_ln757_8_fu_1550_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_d1 <= bitcast_ln757_12_reg_2320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_d1 <= bitcast_ln757_10_reg_2308;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_3_d1 <= bitcast_ln757_14_reg_2332;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_d1 <= bitcast_ln757_8_fu_1550_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_d1 <= grp_afterInit_fu_1117_regions_3_d1;
        else 
            regions_3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_3_we0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((trunc_ln718_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_3_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_we0 <= grp_afterInit_fu_1117_regions_3_we0;
        else 
            regions_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_3_we1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((trunc_ln718_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_3_we1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_3_we1 <= grp_afterInit_fu_1117_regions_3_we1;
        else 
            regions_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_4_addr_3_reg_2217, regions_4_addr_5_reg_2227, regions_4_addr_7_reg_2237, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_4_address0, ap_CS_fsm_state2, zext_ln760_3_fu_1266_p1, zext_ln757_3_fu_1334_p1, zext_ln760_5_fu_1792_p1, zext_ln760_7_fu_1822_p1, zext_ln760_9_fu_1852_p1, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_address0 <= regions_4_addr_7_reg_2237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_address0 <= regions_4_addr_5_reg_2227;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_4_address0 <= regions_4_addr_3_reg_2217;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_4_address0 <= zext_ln760_9_fu_1852_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_4_address0 <= zext_ln760_7_fu_1822_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_4_address0 <= zext_ln760_5_fu_1792_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address0 <= zext_ln757_3_fu_1334_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address0 <= zext_ln760_3_fu_1266_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_address0 <= grp_afterInit_fu_1117_regions_4_address0;
        else 
            regions_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_4_addr_2_reg_2212, regions_4_addr_4_reg_2222, regions_4_addr_6_reg_2232, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_4_address1, ap_CS_fsm_state2, zext_ln760_2_fu_1250_p1, zext_ln757_2_fu_1318_p1, zext_ln760_4_fu_1777_p1, zext_ln760_6_fu_1807_p1, zext_ln760_8_fu_1837_p1, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_address1 <= regions_4_addr_6_reg_2232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_address1 <= regions_4_addr_4_reg_2222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_4_address1 <= regions_4_addr_2_reg_2212;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_4_address1 <= zext_ln760_8_fu_1837_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_4_address1 <= zext_ln760_6_fu_1807_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_4_address1 <= zext_ln760_4_fu_1777_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address1 <= zext_ln757_2_fu_1318_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address1 <= zext_ln760_2_fu_1250_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_address1 <= grp_afterInit_fu_1117_regions_4_address1;
        else 
            regions_4_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_4_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_4_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_ce0 <= grp_afterInit_fu_1117_regions_4_ce0;
        else 
            regions_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_4_ce1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_4_ce1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_ce1 <= grp_afterInit_fu_1117_regions_4_ce1;
        else 
            regions_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_19_reg_2350, bitcast_ln757_21_reg_2362, bitcast_ln757_23_reg_2374, grp_afterInit_fu_1117_regions_4_d0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, bitcast_ln757_17_fu_1682_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_d0 <= bitcast_ln757_23_reg_2374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_d0 <= bitcast_ln757_21_reg_2362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_4_d0 <= bitcast_ln757_19_reg_2350;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_d0 <= bitcast_ln757_17_fu_1682_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_d0 <= grp_afterInit_fu_1117_regions_4_d0;
        else 
            regions_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_18_reg_2344, bitcast_ln757_20_reg_2356, bitcast_ln757_22_reg_2368, grp_afterInit_fu_1117_regions_4_d1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, bitcast_ln757_16_fu_1666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_d1 <= bitcast_ln757_22_reg_2368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_d1 <= bitcast_ln757_20_reg_2356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_4_d1 <= bitcast_ln757_18_reg_2344;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_d1 <= bitcast_ln757_16_fu_1666_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_d1 <= grp_afterInit_fu_1117_regions_4_d1;
        else 
            regions_4_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_4_we0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((trunc_ln718_reg_2002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_4_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_we0 <= grp_afterInit_fu_1117_regions_4_we0;
        else 
            regions_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_4_we1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((trunc_ln718_reg_2002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_4_we1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_4_we1 <= grp_afterInit_fu_1117_regions_4_we1;
        else 
            regions_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_5_addr_11_reg_2247, regions_5_addr_13_reg_2257, regions_5_addr_15_reg_2267, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_5_address0, ap_CS_fsm_state2, zext_ln760_3_fu_1266_p1, zext_ln757_3_fu_1334_p1, zext_ln760_5_fu_1792_p1, zext_ln760_7_fu_1822_p1, zext_ln760_9_fu_1852_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_address0 <= regions_5_addr_13_reg_2257;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_address0 <= regions_5_addr_11_reg_2247;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_5_address0 <= regions_5_addr_15_reg_2267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_5_address0 <= zext_ln760_9_fu_1852_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_5_address0 <= zext_ln760_7_fu_1822_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_5_address0 <= zext_ln760_5_fu_1792_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address0 <= zext_ln757_3_fu_1334_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address0 <= zext_ln760_3_fu_1266_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_address0 <= grp_afterInit_fu_1117_regions_5_address0;
        else 
            regions_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_5_addr_10_reg_2242, regions_5_addr_12_reg_2252, regions_5_addr_14_reg_2262, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_5_address1, ap_CS_fsm_state2, zext_ln760_2_fu_1250_p1, zext_ln757_2_fu_1318_p1, zext_ln760_4_fu_1777_p1, zext_ln760_6_fu_1807_p1, zext_ln760_8_fu_1837_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_address1 <= regions_5_addr_12_reg_2252;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_address1 <= regions_5_addr_10_reg_2242;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_5_address1 <= regions_5_addr_14_reg_2262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_5_address1 <= zext_ln760_8_fu_1837_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_5_address1 <= zext_ln760_6_fu_1807_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_5_address1 <= zext_ln760_4_fu_1777_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address1 <= zext_ln757_2_fu_1318_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address1 <= zext_ln760_2_fu_1250_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_address1 <= grp_afterInit_fu_1117_regions_5_address1;
        else 
            regions_5_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_5_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_5_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_ce0 <= grp_afterInit_fu_1117_regions_5_ce0;
        else 
            regions_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_5_ce1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_5_ce1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_ce1 <= grp_afterInit_fu_1117_regions_5_ce1;
        else 
            regions_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_19_reg_2350, bitcast_ln757_21_reg_2362, bitcast_ln757_23_reg_2374, grp_afterInit_fu_1117_regions_5_d0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, bitcast_ln757_17_fu_1682_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_d0 <= bitcast_ln757_21_reg_2362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_d0 <= bitcast_ln757_19_reg_2350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_5_d0 <= bitcast_ln757_23_reg_2374;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_d0 <= bitcast_ln757_17_fu_1682_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_d0 <= grp_afterInit_fu_1117_regions_5_d0;
        else 
            regions_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_18_reg_2344, bitcast_ln757_20_reg_2356, bitcast_ln757_22_reg_2368, grp_afterInit_fu_1117_regions_5_d1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, bitcast_ln757_16_fu_1666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_d1 <= bitcast_ln757_20_reg_2356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_d1 <= bitcast_ln757_18_reg_2344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_5_d1 <= bitcast_ln757_22_reg_2368;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_d1 <= bitcast_ln757_16_fu_1666_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_d1 <= grp_afterInit_fu_1117_regions_5_d1;
        else 
            regions_5_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_5_we0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((trunc_ln718_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_5_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_we0 <= grp_afterInit_fu_1117_regions_5_we0;
        else 
            regions_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_5_we1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((trunc_ln718_reg_2002 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_5_we1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_5_we1 <= grp_afterInit_fu_1117_regions_5_we1;
        else 
            regions_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_addr_3_reg_2097, regions_addr_5_reg_2107, regions_addr_7_reg_2117, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_address0, ap_CS_fsm_state2, zext_ln760_3_fu_1266_p1, zext_ln757_3_fu_1334_p1, zext_ln760_5_fu_1792_p1, zext_ln760_7_fu_1822_p1, zext_ln760_9_fu_1852_p1, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_address0 <= regions_addr_7_reg_2117;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_address0 <= regions_addr_5_reg_2107;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_address0 <= regions_addr_3_reg_2097;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_address0 <= zext_ln760_9_fu_1852_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_address0 <= zext_ln760_7_fu_1822_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_address0 <= zext_ln760_5_fu_1792_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address0 <= zext_ln757_3_fu_1334_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address0 <= zext_ln760_3_fu_1266_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_address0 <= grp_afterInit_fu_1117_regions_address0;
        else 
            regions_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, regions_addr_2_reg_2092, regions_addr_4_reg_2102, regions_addr_6_reg_2112, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_address1, ap_CS_fsm_state2, zext_ln760_2_fu_1250_p1, zext_ln757_2_fu_1318_p1, zext_ln760_4_fu_1777_p1, zext_ln760_6_fu_1807_p1, zext_ln760_8_fu_1837_p1, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_address1 <= regions_addr_6_reg_2112;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_address1 <= regions_addr_4_reg_2102;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_address1 <= regions_addr_2_reg_2092;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_address1 <= zext_ln760_8_fu_1837_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_address1 <= zext_ln760_6_fu_1807_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regions_address1 <= zext_ln760_4_fu_1777_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address1 <= zext_ln757_2_fu_1318_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address1 <= zext_ln760_2_fu_1250_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_address1 <= grp_afterInit_fu_1117_regions_address1;
        else 
            regions_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_ce0 <= grp_afterInit_fu_1117_regions_ce0;
        else 
            regions_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_afterInit_fu_1117_regions_ce1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_lv8_2 = accel_mode_read_read_fu_282_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_ce1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_ce1 <= grp_afterInit_fu_1117_regions_ce1;
        else 
            regions_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_3_reg_2278, bitcast_ln757_5_reg_2290, bitcast_ln757_7_reg_2302, grp_afterInit_fu_1117_regions_d0, ap_CS_fsm_state2, ap_CS_fsm_state9, bitcast_ln757_1_fu_1450_p1, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_d0 <= bitcast_ln757_7_reg_2302;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_d0 <= bitcast_ln757_5_reg_2290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_d0 <= bitcast_ln757_3_reg_2278;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_d0 <= bitcast_ln757_1_fu_1450_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_d0 <= grp_afterInit_fu_1117_regions_d0;
        else 
            regions_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, bitcast_ln757_2_reg_2272, bitcast_ln757_4_reg_2284, bitcast_ln757_6_reg_2296, grp_afterInit_fu_1117_regions_d1, ap_CS_fsm_state2, ap_CS_fsm_state9, bitcast_ln757_fu_1296_p1, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_d1 <= bitcast_ln757_6_reg_2296;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_d1 <= bitcast_ln757_4_reg_2284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_d1 <= bitcast_ln757_2_reg_2272;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_d1 <= bitcast_ln757_fu_1296_p1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_d1 <= grp_afterInit_fu_1117_regions_d1;
        else 
            regions_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_we0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((trunc_ln718_reg_2002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_we0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_we0 <= grp_afterInit_fu_1117_regions_we0;
        else 
            regions_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_282_p2, trunc_ln718_fu_1213_p1, trunc_ln718_reg_2002, grp_afterInit_fu_1117_regions_we1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((trunc_ln718_reg_2002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_lv8_1 = accel_mode_read_read_fu_282_p2) and (ap_start = ap_const_logic_1) and (trunc_ln718_fu_1213_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_we1 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regions_we1 <= grp_afterInit_fu_1117_regions_we1;
        else 
            regions_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln757_fu_1312_p2 <= std_logic_vector(shift_left(unsigned(add_ln757_fu_1306_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    shl_ln760_fu_1244_p2 <= std_logic_vector(shift_left(unsigned(add_ln760_fu_1238_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));

    startCopy_ap_ack_assign_proc : process(accel_mode, grp_afterInit_fu_1117_startCopy_ap_ack, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            startCopy_ap_ack <= grp_afterInit_fu_1117_startCopy_ap_ack;
        else 
            startCopy_ap_ack <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1586_p4 <= trainedRegion_i(383 downto 352);
    tmp_11_fu_1600_p4 <= trainedRegion_i(415 downto 384);
    tmp_12_fu_1614_p4 <= trainedRegion_i(447 downto 416);
    tmp_13_fu_1628_p4 <= trainedRegion_i(479 downto 448);
    tmp_14_fu_1642_p4 <= trainedRegion_i(511 downto 480);
    tmp_15_fu_1656_p4 <= trainedRegion_i(543 downto 512);
    tmp_16_fu_1672_p4 <= trainedRegion_i(575 downto 544);
    tmp_17_fu_1688_p4 <= trainedRegion_i(607 downto 576);
    tmp_18_fu_1702_p4 <= trainedRegion_i(639 downto 608);
    tmp_19_fu_1716_p4 <= trainedRegion_i(671 downto 640);
    tmp_1_fu_1456_p4 <= trainedRegion_i(95 downto 64);
    tmp_20_fu_1730_p4 <= trainedRegion_i(703 downto 672);
    tmp_21_fu_1744_p4 <= trainedRegion_i(735 downto 704);
    tmp_2_fu_1470_p4 <= trainedRegion_i(127 downto 96);
    tmp_3_fu_1484_p4 <= trainedRegion_i(159 downto 128);
    tmp_46_fu_1758_p4 <= trainedRegion_i(767 downto 736);
    tmp_47_fu_1222_p3 <= (IOCheckIdx & ap_const_lv3_0);
    tmp_4_fu_1498_p4 <= trainedRegion_i(191 downto 160);
    tmp_5_fu_1512_p4 <= trainedRegion_i(223 downto 192);
    tmp_6_fu_1526_p4 <= trainedRegion_i(255 downto 224);
    tmp_7_fu_1540_p4 <= trainedRegion_i(287 downto 256);
    tmp_8_fu_1556_p4 <= trainedRegion_i(319 downto 288);
    tmp_9_fu_1572_p4 <= trainedRegion_i(351 downto 320);
    tmp_fu_1440_p4 <= trainedRegion_i(63 downto 32);
    tmp_s_fu_1280_p3 <= (IOCheckIdx & ap_const_lv3_0);
    trainedRegion_o <= (((((((((((((((((((((((bitcast_ln760_23_fu_1936_p1 & bitcast_ln760_22_fu_1932_p1) & bitcast_ln760_21_fu_1929_p1) & bitcast_ln760_20_fu_1926_p1) & bitcast_ln760_19_fu_1923_p1) & bitcast_ln760_18_fu_1920_p1) & bitcast_ln760_17_fu_1917_p1) & bitcast_ln760_16_fu_1914_p1) & bitcast_ln760_15_fu_1910_p1) & bitcast_ln760_14_fu_1906_p1) & bitcast_ln760_13_fu_1903_p1) & bitcast_ln760_12_fu_1900_p1) & bitcast_ln760_11_fu_1897_p1) & bitcast_ln760_10_fu_1894_p1) & bitcast_ln760_9_fu_1891_p1) & bitcast_ln760_8_fu_1888_p1) & bitcast_ln760_7_fu_1884_p1) & bitcast_ln760_6_fu_1880_p1) & bitcast_ln760_5_fu_1877_p1) & bitcast_ln760_4_fu_1874_p1) & bitcast_ln760_3_fu_1871_p1) & bitcast_ln760_2_fu_1868_p1) & bitcast_ln760_1_fu_1865_p1) & bitcast_ln760_fu_1862_p1);
    trunc_ln718_fu_1213_p1 <= IORegionIdx(1 - 1 downto 0);
    trunc_ln757_fu_1292_p1 <= trainedRegion_i(32 - 1 downto 0);
    zext_ln587_1_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IOCheckIdx),64));
    zext_ln587_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IOCheckIdx),64));
    zext_ln757_1_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1149_p4),12));
    zext_ln757_2_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln757_fu_1312_p2),64));
    zext_ln757_3_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln757_fu_1328_p2),64));
    zext_ln757_4_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln757_1_fu_1344_p2),64));
    zext_ln757_5_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln757_2_fu_1360_p2),64));
    zext_ln757_6_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln757_3_fu_1376_p2),64));
    zext_ln757_7_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln757_4_fu_1392_p2),64));
    zext_ln757_8_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln757_5_fu_1408_p2),64));
    zext_ln757_9_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln757_6_fu_1424_p2),64));
    zext_ln757_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1280_p3),12));
    zext_ln760_1_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1149_p4),12));
    zext_ln760_2_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln760_fu_1244_p2),64));
    zext_ln760_3_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln760_fu_1260_p2),64));
    zext_ln760_4_fu_1777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln760_1_fu_1772_p2),64));
    zext_ln760_5_fu_1792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln760_2_fu_1787_p2),64));
    zext_ln760_6_fu_1807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln760_3_fu_1802_p2),64));
    zext_ln760_7_fu_1822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln760_4_fu_1817_p2),64));
    zext_ln760_8_fu_1837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln760_5_fu_1832_p2),64));
    zext_ln760_9_fu_1852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln760_6_fu_1847_p2),64));
    zext_ln760_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1222_p3),12));
end behav;
