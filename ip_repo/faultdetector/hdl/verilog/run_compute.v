// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_compute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        sourceStream_dout,
        sourceStream_num_data_valid,
        sourceStream_fifo_cap,
        sourceStream_empty_n,
        sourceStream_read,
        destStream_din,
        destStream_num_data_valid,
        destStream_fifo_cap,
        destStream_full_n,
        destStream_write,
        n_regions_V_address0,
        n_regions_V_ce0,
        n_regions_V_we0,
        n_regions_V_d0,
        n_regions_V_q0,
        regions_address0,
        regions_ce0,
        regions_we0,
        regions_d0,
        regions_q0,
        regions_address1,
        regions_ce1,
        regions_we1,
        regions_d1,
        regions_q1,
        regions_1_address0,
        regions_1_ce0,
        regions_1_we0,
        regions_1_d0,
        regions_1_q0,
        regions_1_address1,
        regions_1_ce1,
        regions_1_we1,
        regions_1_d1,
        regions_1_q1,
        regions_2_address0,
        regions_2_ce0,
        regions_2_we0,
        regions_2_d0,
        regions_2_q0,
        regions_2_address1,
        regions_2_ce1,
        regions_2_we1,
        regions_2_d1,
        regions_2_q1,
        regions_3_address0,
        regions_3_ce0,
        regions_3_we0,
        regions_3_d0,
        regions_3_q0,
        regions_3_address1,
        regions_3_ce1,
        regions_3_we1,
        regions_3_d1,
        regions_3_q1,
        regions_4_address0,
        regions_4_ce0,
        regions_4_we0,
        regions_4_d0,
        regions_4_q0,
        regions_4_address1,
        regions_4_ce1,
        regions_4_we1,
        regions_4_d1,
        regions_4_q1,
        regions_5_address0,
        regions_5_ce0,
        regions_5_we0,
        regions_5_d0,
        regions_5_q0,
        regions_5_address1,
        regions_5_ce1,
        regions_5_we1,
        regions_5_d1,
        regions_5_q1
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [319:0] sourceStream_dout;
input  [1:0] sourceStream_num_data_valid;
input  [1:0] sourceStream_fifo_cap;
input   sourceStream_empty_n;
output   sourceStream_read;
output  [296:0] destStream_din;
input  [1:0] destStream_num_data_valid;
input  [1:0] destStream_fifo_cap;
input   destStream_full_n;
output   destStream_write;
output  [5:0] n_regions_V_address0;
output   n_regions_V_ce0;
output   n_regions_V_we0;
output  [7:0] n_regions_V_d0;
input  [7:0] n_regions_V_q0;
output  [11:0] regions_address0;
output   regions_ce0;
output   regions_we0;
output  [31:0] regions_d0;
input  [31:0] regions_q0;
output  [11:0] regions_address1;
output   regions_ce1;
output   regions_we1;
output  [31:0] regions_d1;
input  [31:0] regions_q1;
output  [11:0] regions_1_address0;
output   regions_1_ce0;
output   regions_1_we0;
output  [31:0] regions_1_d0;
input  [31:0] regions_1_q0;
output  [11:0] regions_1_address1;
output   regions_1_ce1;
output   regions_1_we1;
output  [31:0] regions_1_d1;
input  [31:0] regions_1_q1;
output  [11:0] regions_2_address0;
output   regions_2_ce0;
output   regions_2_we0;
output  [31:0] regions_2_d0;
input  [31:0] regions_2_q0;
output  [11:0] regions_2_address1;
output   regions_2_ce1;
output   regions_2_we1;
output  [31:0] regions_2_d1;
input  [31:0] regions_2_q1;
output  [11:0] regions_3_address0;
output   regions_3_ce0;
output   regions_3_we0;
output  [31:0] regions_3_d0;
input  [31:0] regions_3_q0;
output  [11:0] regions_3_address1;
output   regions_3_ce1;
output   regions_3_we1;
output  [31:0] regions_3_d1;
input  [31:0] regions_3_q1;
output  [11:0] regions_4_address0;
output   regions_4_ce0;
output   regions_4_we0;
output  [31:0] regions_4_d0;
input  [31:0] regions_4_q0;
output  [11:0] regions_4_address1;
output   regions_4_ce1;
output   regions_4_we1;
output  [31:0] regions_4_d1;
input  [31:0] regions_4_q1;
output  [11:0] regions_5_address0;
output   regions_5_ce0;
output   regions_5_we0;
output  [31:0] regions_5_d0;
input  [31:0] regions_5_q0;
output  [11:0] regions_5_address1;
output   regions_5_ce1;
output   regions_5_we1;
output  [31:0] regions_5_d1;
input  [31:0] regions_5_q1;

reg ap_idle;
reg sourceStream_read;
reg destStream_write;
reg[5:0] n_regions_V_address0;
reg n_regions_V_ce0;
reg n_regions_V_we0;
reg[11:0] regions_address0;
reg regions_ce0;
reg regions_we0;
reg regions_ce1;
reg regions_we1;
reg[11:0] regions_1_address0;
reg regions_1_ce0;
reg regions_1_we0;
reg regions_1_ce1;
reg regions_1_we1;
reg[11:0] regions_2_address0;
reg regions_2_ce0;
reg regions_2_we0;
reg regions_2_ce1;
reg regions_2_we1;
reg[11:0] regions_3_address0;
reg regions_3_ce0;
reg regions_3_we0;
reg regions_3_ce1;
reg regions_3_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    sourceStream_blk_n;
wire    ap_CS_fsm_state2;
reg    destStream_blk_n;
wire    ap_CS_fsm_state18;
reg   [7:0] in_command_reg_1091;
reg   [319:0] sourceStream_read_reg_1072;
wire   [7:0] in_checkId_V_fu_457_p1;
reg   [7:0] in_checkId_V_reg_1078;
reg   [7:0] trunc_ln145_s_reg_1086;
wire   [31:0] in_AOV_fu_561_p1;
reg   [31:0] in_AOV_reg_1095;
wire   [31:0] in_AOV_1_fu_565_p1;
reg   [31:0] in_AOV_1_reg_1103;
wire   [31:0] in_AOV_2_fu_569_p1;
reg   [31:0] in_AOV_2_reg_1111;
wire   [31:0] in_AOV_3_fu_573_p1;
reg   [31:0] in_AOV_3_reg_1119;
wire   [31:0] in_AOV_4_fu_577_p1;
reg   [31:0] in_AOV_4_reg_1127;
wire   [31:0] in_AOV_5_fu_581_p1;
reg   [31:0] in_AOV_5_reg_1135;
wire   [31:0] in_AOV_6_fu_585_p1;
reg   [31:0] in_AOV_6_reg_1143;
wire   [31:0] in_AOV_7_fu_589_p1;
reg   [31:0] in_AOV_7_reg_1151;
wire   [3:0] empty_fu_604_p2;
wire    ap_CS_fsm_state3;
reg   [5:0] n_regions_V_addr_reg_1167;
wire   [0:0] exitcond1_fu_598_p2;
wire   [5:0] trunc_ln511_fu_629_p1;
reg   [5:0] trunc_ln511_reg_1172;
wire    ap_CS_fsm_state4;
reg   [7:0] n_regions_V_load_reg_1177;
wire   [0:0] icmp_ln70_fu_633_p2;
reg   [0:0] icmp_ln70_reg_1182;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln70_fu_639_p2;
reg   [3:0] add_ln70_reg_1186;
wire   [31:0] p_x_assign_fu_645_p10;
wire   [0:0] icmp_ln73_fu_680_p2;
reg   [0:0] icmp_ln73_reg_1198;
wire   [0:0] icmp_ln73_2_fu_686_p2;
reg   [0:0] icmp_ln73_2_reg_1203;
wire    ap_CS_fsm_state7;
wire   [0:0] or_ln73_2_fu_708_p2;
wire   [11:0] zext_ln502_fu_725_p1;
reg   [11:0] zext_ln502_reg_1216;
wire    ap_CS_fsm_state8;
reg   [7:0] n_regions_V_1_reg_1221;
wire   [0:0] icmp_ln1073_fu_729_p2;
reg   [0:0] icmp_ln1073_reg_1226;
wire   [0:0] trunc_ln1073_fu_735_p1;
reg   [0:0] trunc_ln1073_reg_1230;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln1073_1_fu_739_p2;
reg   [0:0] icmp_ln1073_1_reg_1236;
wire   [7:0] add_ln49_fu_744_p2;
reg   [7:0] add_ln49_reg_1240;
wire   [11:0] shl_ln59_fu_769_p2;
reg   [11:0] shl_ln59_reg_1245;
wire    ap_CS_fsm_state10;
reg   [11:0] regions_2_addr_reg_1260;
reg   [11:0] regions_3_addr_reg_1265;
wire   [31:0] tmp_101_fu_792_p10;
reg   [31:0] tmp_101_reg_1270;
wire   [63:0] add_ln55_fu_806_p2;
reg   [63:0] add_ln55_reg_1276;
wire   [31:0] tmp_100_fu_812_p4;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln59_fu_840_p2;
reg   [0:0] icmp_ln59_reg_1286;
wire   [0:0] icmp_ln59_1_fu_846_p2;
reg   [0:0] icmp_ln59_1_reg_1291;
wire   [0:0] and_ln59_1_fu_897_p2;
reg   [0:0] and_ln59_1_reg_1296;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_102_fu_903_p4;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln59_4_fu_931_p2;
reg   [0:0] icmp_ln59_4_reg_1305;
wire   [0:0] icmp_ln59_5_fu_937_p2;
reg   [0:0] icmp_ln59_5_reg_1310;
reg   [23:0] tmp_138_reg_1321;
wire    ap_CS_fsm_state14;
wire   [0:0] and_ln59_2_fu_947_p2;
wire   [0:0] icmp_ln60_fu_953_p2;
wire   [31:0] out_AOV_q1;
reg   [31:0] out_AOV_load_reg_1326;
wire    ap_CS_fsm_state15;
wire   [31:0] out_AOV_q0;
reg   [31:0] out_AOV_load_1_reg_1331;
reg   [31:0] out_AOV_load_2_reg_1336;
wire    ap_CS_fsm_state16;
reg   [31:0] out_AOV_load_3_reg_1341;
reg   [31:0] out_AOV_load_4_reg_1346;
wire    ap_CS_fsm_state17;
reg   [31:0] out_AOV_load_5_reg_1351;
reg   [2:0] out_AOV_address0;
reg    out_AOV_ce0;
reg    out_AOV_we0;
reg   [2:0] out_AOV_address1;
reg    out_AOV_ce1;
wire    grp_insert_point_fu_414_ap_start;
wire    grp_insert_point_fu_414_ap_done;
wire    grp_insert_point_fu_414_ap_idle;
wire    grp_insert_point_fu_414_ap_ready;
wire   [11:0] grp_insert_point_fu_414_regions_min_0_address0;
wire    grp_insert_point_fu_414_regions_min_0_ce0;
wire    grp_insert_point_fu_414_regions_min_0_we0;
wire   [31:0] grp_insert_point_fu_414_regions_min_0_d0;
wire   [11:0] grp_insert_point_fu_414_regions_min_0_address1;
wire    grp_insert_point_fu_414_regions_min_0_ce1;
wire    grp_insert_point_fu_414_regions_min_0_we1;
wire   [31:0] grp_insert_point_fu_414_regions_min_0_d1;
wire   [11:0] grp_insert_point_fu_414_regions_min_1_address0;
wire    grp_insert_point_fu_414_regions_min_1_ce0;
wire    grp_insert_point_fu_414_regions_min_1_we0;
wire   [31:0] grp_insert_point_fu_414_regions_min_1_d0;
wire   [11:0] grp_insert_point_fu_414_regions_min_1_address1;
wire    grp_insert_point_fu_414_regions_min_1_ce1;
wire    grp_insert_point_fu_414_regions_min_1_we1;
wire   [31:0] grp_insert_point_fu_414_regions_min_1_d1;
wire   [11:0] grp_insert_point_fu_414_regions_max_0_address0;
wire    grp_insert_point_fu_414_regions_max_0_ce0;
wire    grp_insert_point_fu_414_regions_max_0_we0;
wire   [31:0] grp_insert_point_fu_414_regions_max_0_d0;
wire   [11:0] grp_insert_point_fu_414_regions_max_0_address1;
wire    grp_insert_point_fu_414_regions_max_0_ce1;
wire    grp_insert_point_fu_414_regions_max_0_we1;
wire   [31:0] grp_insert_point_fu_414_regions_max_0_d1;
wire   [11:0] grp_insert_point_fu_414_regions_max_1_address0;
wire    grp_insert_point_fu_414_regions_max_1_ce0;
wire    grp_insert_point_fu_414_regions_max_1_we0;
wire   [31:0] grp_insert_point_fu_414_regions_max_1_d0;
wire   [11:0] grp_insert_point_fu_414_regions_max_1_address1;
wire    grp_insert_point_fu_414_regions_max_1_ce1;
wire    grp_insert_point_fu_414_regions_max_1_we1;
wire   [31:0] grp_insert_point_fu_414_regions_max_1_d1;
wire   [11:0] grp_insert_point_fu_414_regions_center_0_address0;
wire    grp_insert_point_fu_414_regions_center_0_ce0;
wire    grp_insert_point_fu_414_regions_center_0_we0;
wire   [31:0] grp_insert_point_fu_414_regions_center_0_d0;
wire   [11:0] grp_insert_point_fu_414_regions_center_0_address1;
wire    grp_insert_point_fu_414_regions_center_0_ce1;
wire    grp_insert_point_fu_414_regions_center_0_we1;
wire   [31:0] grp_insert_point_fu_414_regions_center_0_d1;
wire   [11:0] grp_insert_point_fu_414_regions_center_1_address0;
wire    grp_insert_point_fu_414_regions_center_1_ce0;
wire    grp_insert_point_fu_414_regions_center_1_we0;
wire   [31:0] grp_insert_point_fu_414_regions_center_1_d0;
wire   [11:0] grp_insert_point_fu_414_regions_center_1_address1;
wire    grp_insert_point_fu_414_regions_center_1_ce1;
wire    grp_insert_point_fu_414_regions_center_1_we1;
wire   [31:0] grp_insert_point_fu_414_regions_center_1_d1;
wire   [7:0] grp_insert_point_fu_414_ap_return;
wire   [31:0] grp_insert_point_fu_414_grp_fu_442_p_din0;
wire   [31:0] grp_insert_point_fu_414_grp_fu_442_p_din1;
wire   [4:0] grp_insert_point_fu_414_grp_fu_442_p_opcode;
wire    grp_insert_point_fu_414_grp_fu_442_p_ce;
wire   [31:0] grp_insert_point_fu_414_grp_fu_447_p_din0;
wire   [31:0] grp_insert_point_fu_414_grp_fu_447_p_din1;
wire   [4:0] grp_insert_point_fu_414_grp_fu_447_p_opcode;
wire    grp_insert_point_fu_414_grp_fu_447_p_ce;
wire   [31:0] grp_insert_point_fu_414_grp_fu_452_p_din0;
wire   [31:0] grp_insert_point_fu_414_grp_fu_452_p_din1;
wire   [4:0] grp_insert_point_fu_414_grp_fu_452_p_opcode;
wire    grp_insert_point_fu_414_grp_fu_452_p_ce;
reg   [3:0] loop_index_reg_342;
reg   [3:0] i_reg_353;
reg   [0:0] vld_reg_364;
reg   [7:0] i_3_reg_378;
reg   [63:0] j_reg_389;
reg   [0:0] hasReg_reg_401;
reg    grp_insert_point_fu_414_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] loop_index_cast_fu_593_p1;
wire   [63:0] zext_ln587_fu_625_p1;
wire   [63:0] zext_ln587_2_fu_714_p1;
wire   [63:0] zext_ln59_1_fu_784_p1;
reg    ap_block_state18;
wire   [31:0] tmp_s_fu_610_p10;
reg    ap_block_state5_on_subcall_done;
reg   [31:0] grp_fu_442_p0;
reg   [31:0] grp_fu_442_p1;
reg   [31:0] grp_fu_447_p0;
reg   [31:0] grp_fu_447_p1;
reg   [31:0] grp_fu_452_p0;
reg   [31:0] grp_fu_452_p1;
wire   [31:0] trunc_ln145_3_fu_481_p4;
wire   [31:0] trunc_ln145_4_fu_491_p4;
wire   [31:0] trunc_ln145_5_fu_501_p4;
wire   [31:0] trunc_ln145_6_fu_511_p4;
wire   [31:0] trunc_ln145_7_fu_521_p4;
wire   [31:0] trunc_ln145_8_fu_531_p4;
wire   [31:0] trunc_ln145_9_fu_541_p4;
wire   [31:0] trunc_ln145_1_fu_551_p4;
wire   [31:0] bitcast_ln73_fu_662_p1;
wire   [7:0] tmp_118_fu_666_p4;
wire   [22:0] trunc_ln73_fu_676_p1;
wire   [0:0] grp_fu_447_p2;
wire   [0:0] grp_fu_452_p2;
wire   [0:0] or_ln73_fu_692_p2;
wire   [0:0] or_ln73_3_fu_696_p2;
wire   [0:0] and_ln73_fu_702_p2;
wire   [0:0] grp_fu_442_p2;
wire   [10:0] tmp_136_fu_718_p3;
wire   [6:0] tmp_137_fu_750_p4;
wire   [11:0] zext_ln59_fu_760_p1;
wire   [11:0] add_ln59_fu_764_p2;
wire   [11:0] trunc_ln59_fu_775_p1;
wire   [11:0] add_ln59_1_fu_779_p2;
wire   [31:0] bitcast_ln59_fu_822_p1;
wire   [7:0] tmp_121_fu_826_p4;
wire   [22:0] trunc_ln59_1_fu_836_p1;
wire   [31:0] bitcast_ln59_1_fu_852_p1;
wire   [7:0] tmp_122_fu_855_p4;
wire   [22:0] trunc_ln59_2_fu_865_p1;
wire   [0:0] icmp_ln59_3_fu_879_p2;
wire   [0:0] icmp_ln59_2_fu_873_p2;
wire   [0:0] or_ln59_fu_869_p2;
wire   [0:0] or_ln59_1_fu_885_p2;
wire   [0:0] and_ln59_fu_891_p2;
wire   [31:0] bitcast_ln59_2_fu_913_p1;
wire   [7:0] tmp_124_fu_917_p4;
wire   [22:0] trunc_ln59_3_fu_927_p1;
wire   [0:0] or_ln59_2_fu_943_p2;
wire   [0:0] and_ln503_fu_968_p2;
wire   [31:0] bitcast_ln174_7_fu_1002_p1;
wire   [31:0] bitcast_ln174_6_fu_998_p1;
wire   [31:0] bitcast_ln174_5_fu_995_p1;
wire   [31:0] bitcast_ln174_4_fu_992_p1;
wire   [31:0] bitcast_ln174_3_fu_989_p1;
wire   [31:0] bitcast_ln174_2_fu_986_p1;
wire   [31:0] bitcast_ln174_1_fu_983_p1;
wire   [31:0] bitcast_ln174_fu_980_p1;
wire   [0:0] fault_fu_974_p2;
reg    grp_fu_442_ce;
reg   [4:0] grp_fu_442_opcode;
reg    grp_fu_447_ce;
reg   [4:0] grp_fu_447_opcode;
reg    grp_fu_452_ce;
reg   [4:0] grp_fu_452_opcode;
reg   [17:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_condition_1020;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
#0 grp_insert_point_fu_414_ap_start_reg = 1'b0;
end

run_compute_out_AOV_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
out_AOV_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(out_AOV_address0),
    .ce0(out_AOV_ce0),
    .we0(out_AOV_we0),
    .d0(tmp_s_fu_610_p10),
    .q0(out_AOV_q0),
    .address1(out_AOV_address1),
    .ce1(out_AOV_ce1),
    .q1(out_AOV_q1)
);

run_insert_point grp_insert_point_fu_414(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_insert_point_fu_414_ap_start),
    .ap_done(grp_insert_point_fu_414_ap_done),
    .ap_idle(grp_insert_point_fu_414_ap_idle),
    .ap_ready(grp_insert_point_fu_414_ap_ready),
    .regions_min_0_address0(grp_insert_point_fu_414_regions_min_0_address0),
    .regions_min_0_ce0(grp_insert_point_fu_414_regions_min_0_ce0),
    .regions_min_0_we0(grp_insert_point_fu_414_regions_min_0_we0),
    .regions_min_0_d0(grp_insert_point_fu_414_regions_min_0_d0),
    .regions_min_0_q0(regions_q0),
    .regions_min_0_address1(grp_insert_point_fu_414_regions_min_0_address1),
    .regions_min_0_ce1(grp_insert_point_fu_414_regions_min_0_ce1),
    .regions_min_0_we1(grp_insert_point_fu_414_regions_min_0_we1),
    .regions_min_0_d1(grp_insert_point_fu_414_regions_min_0_d1),
    .regions_min_0_q1(regions_q1),
    .regions_min_0_offset(trunc_ln511_reg_1172),
    .regions_min_1_address0(grp_insert_point_fu_414_regions_min_1_address0),
    .regions_min_1_ce0(grp_insert_point_fu_414_regions_min_1_ce0),
    .regions_min_1_we0(grp_insert_point_fu_414_regions_min_1_we0),
    .regions_min_1_d0(grp_insert_point_fu_414_regions_min_1_d0),
    .regions_min_1_q0(regions_1_q0),
    .regions_min_1_address1(grp_insert_point_fu_414_regions_min_1_address1),
    .regions_min_1_ce1(grp_insert_point_fu_414_regions_min_1_ce1),
    .regions_min_1_we1(grp_insert_point_fu_414_regions_min_1_we1),
    .regions_min_1_d1(grp_insert_point_fu_414_regions_min_1_d1),
    .regions_min_1_q1(regions_1_q1),
    .regions_max_0_address0(grp_insert_point_fu_414_regions_max_0_address0),
    .regions_max_0_ce0(grp_insert_point_fu_414_regions_max_0_ce0),
    .regions_max_0_we0(grp_insert_point_fu_414_regions_max_0_we0),
    .regions_max_0_d0(grp_insert_point_fu_414_regions_max_0_d0),
    .regions_max_0_q0(regions_2_q0),
    .regions_max_0_address1(grp_insert_point_fu_414_regions_max_0_address1),
    .regions_max_0_ce1(grp_insert_point_fu_414_regions_max_0_ce1),
    .regions_max_0_we1(grp_insert_point_fu_414_regions_max_0_we1),
    .regions_max_0_d1(grp_insert_point_fu_414_regions_max_0_d1),
    .regions_max_0_q1(regions_2_q1),
    .regions_max_1_address0(grp_insert_point_fu_414_regions_max_1_address0),
    .regions_max_1_ce0(grp_insert_point_fu_414_regions_max_1_ce0),
    .regions_max_1_we0(grp_insert_point_fu_414_regions_max_1_we0),
    .regions_max_1_d0(grp_insert_point_fu_414_regions_max_1_d0),
    .regions_max_1_q0(regions_3_q0),
    .regions_max_1_address1(grp_insert_point_fu_414_regions_max_1_address1),
    .regions_max_1_ce1(grp_insert_point_fu_414_regions_max_1_ce1),
    .regions_max_1_we1(grp_insert_point_fu_414_regions_max_1_we1),
    .regions_max_1_d1(grp_insert_point_fu_414_regions_max_1_d1),
    .regions_max_1_q1(regions_3_q1),
    .regions_center_0_address0(grp_insert_point_fu_414_regions_center_0_address0),
    .regions_center_0_ce0(grp_insert_point_fu_414_regions_center_0_ce0),
    .regions_center_0_we0(grp_insert_point_fu_414_regions_center_0_we0),
    .regions_center_0_d0(grp_insert_point_fu_414_regions_center_0_d0),
    .regions_center_0_q0(regions_4_q0),
    .regions_center_0_address1(grp_insert_point_fu_414_regions_center_0_address1),
    .regions_center_0_ce1(grp_insert_point_fu_414_regions_center_0_ce1),
    .regions_center_0_we1(grp_insert_point_fu_414_regions_center_0_we1),
    .regions_center_0_d1(grp_insert_point_fu_414_regions_center_0_d1),
    .regions_center_0_q1(regions_4_q1),
    .regions_center_1_address0(grp_insert_point_fu_414_regions_center_1_address0),
    .regions_center_1_ce0(grp_insert_point_fu_414_regions_center_1_ce0),
    .regions_center_1_we0(grp_insert_point_fu_414_regions_center_1_we0),
    .regions_center_1_d0(grp_insert_point_fu_414_regions_center_1_d0),
    .regions_center_1_q0(regions_5_q0),
    .regions_center_1_address1(grp_insert_point_fu_414_regions_center_1_address1),
    .regions_center_1_ce1(grp_insert_point_fu_414_regions_center_1_ce1),
    .regions_center_1_we1(grp_insert_point_fu_414_regions_center_1_we1),
    .regions_center_1_d1(grp_insert_point_fu_414_regions_center_1_d1),
    .regions_center_1_q1(regions_5_q1),
    .n_regions_V_read(n_regions_V_load_reg_1177),
    .d_read(in_AOV_reg_1095),
    .d_read_23(in_AOV_1_reg_1103),
    .d_read_24(in_AOV_2_reg_1111),
    .d_read_25(in_AOV_3_reg_1119),
    .d_read_26(in_AOV_4_reg_1127),
    .d_read_27(in_AOV_5_reg_1135),
    .d_read_28(in_AOV_6_reg_1143),
    .d_read_29(in_AOV_7_reg_1151),
    .ap_return(grp_insert_point_fu_414_ap_return),
    .grp_fu_442_p_din0(grp_insert_point_fu_414_grp_fu_442_p_din0),
    .grp_fu_442_p_din1(grp_insert_point_fu_414_grp_fu_442_p_din1),
    .grp_fu_442_p_opcode(grp_insert_point_fu_414_grp_fu_442_p_opcode),
    .grp_fu_442_p_dout0(grp_fu_442_p2),
    .grp_fu_442_p_ce(grp_insert_point_fu_414_grp_fu_442_p_ce),
    .grp_fu_447_p_din0(grp_insert_point_fu_414_grp_fu_447_p_din0),
    .grp_fu_447_p_din1(grp_insert_point_fu_414_grp_fu_447_p_din1),
    .grp_fu_447_p_opcode(grp_insert_point_fu_414_grp_fu_447_p_opcode),
    .grp_fu_447_p_dout0(grp_fu_447_p2),
    .grp_fu_447_p_ce(grp_insert_point_fu_414_grp_fu_447_p_ce),
    .grp_fu_452_p_din0(grp_insert_point_fu_414_grp_fu_452_p_din0),
    .grp_fu_452_p_din1(grp_insert_point_fu_414_grp_fu_452_p_din1),
    .grp_fu_452_p_opcode(grp_insert_point_fu_414_grp_fu_452_p_opcode),
    .grp_fu_452_p_dout0(grp_fu_452_p2),
    .grp_fu_452_p_ce(grp_insert_point_fu_414_grp_fu_452_p_ce)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_442_p0),
    .din1(grp_fu_442_p1),
    .ce(grp_fu_442_ce),
    .opcode(grp_fu_442_opcode),
    .dout(grp_fu_442_p2)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_447_p0),
    .din1(grp_fu_447_p1),
    .ce(grp_fu_447_ce),
    .opcode(grp_fu_447_opcode),
    .dout(grp_fu_447_p2)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_452_p0),
    .din1(grp_fu_452_p1),
    .ce(grp_fu_452_ce),
    .opcode(grp_fu_452_opcode),
    .dout(grp_fu_452_p2)
);

run_mux_84_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_84_32_1_1_U74(
    .din0(in_AOV_reg_1095),
    .din1(in_AOV_1_reg_1103),
    .din2(in_AOV_2_reg_1111),
    .din3(in_AOV_3_reg_1119),
    .din4(in_AOV_4_reg_1127),
    .din5(in_AOV_5_reg_1135),
    .din6(in_AOV_6_reg_1143),
    .din7(in_AOV_7_reg_1151),
    .din8(loop_index_reg_342),
    .dout(tmp_s_fu_610_p10)
);

run_mux_84_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_84_32_1_1_U75(
    .din0(in_AOV_reg_1095),
    .din1(in_AOV_1_reg_1103),
    .din2(in_AOV_2_reg_1111),
    .din3(in_AOV_3_reg_1119),
    .din4(in_AOV_4_reg_1127),
    .din5(in_AOV_5_reg_1135),
    .din6(in_AOV_6_reg_1143),
    .din7(in_AOV_7_reg_1151),
    .din8(i_reg_353),
    .dout(p_x_assign_fu_645_p10)
);

run_mux_864_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_864_32_1_1_U76(
    .din0(in_AOV_reg_1095),
    .din1(in_AOV_1_reg_1103),
    .din2(in_AOV_2_reg_1111),
    .din3(in_AOV_3_reg_1119),
    .din4(in_AOV_4_reg_1127),
    .din5(in_AOV_5_reg_1135),
    .din6(in_AOV_6_reg_1143),
    .din7(in_AOV_7_reg_1151),
    .din8(j_reg_389),
    .dout(tmp_101_fu_792_p10)
);

run_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U77(
    .din0(regions_q0),
    .din1(regions_1_q0),
    .din2(trunc_ln1073_reg_1230),
    .dout(tmp_100_fu_812_p4)
);

run_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U78(
    .din0(regions_2_q0),
    .din1(regions_3_q0),
    .din2(trunc_ln1073_reg_1230),
    .dout(tmp_102_fu_903_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_insert_point_fu_414_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_insert_point_fu_414_ap_start_reg <= 1'b1;
        end else if ((grp_insert_point_fu_414_ap_ready == 1'b1)) begin
            grp_insert_point_fu_414_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_953_p2 == 1'd1) & (icmp_ln1073_1_reg_1236 == 1'd1) & (icmp_ln1073_reg_1226 == 1'd0) & (1'd1 == and_ln59_2_fu_947_p2) & (1'd1 == and_ln59_1_reg_1296) & (1'b1 == ap_CS_fsm_state14))) begin
        hasReg_reg_401 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state9) & ((icmp_ln1073_1_fu_739_p2 == 1'd0) | (icmp_ln1073_reg_1226 == 1'd1)))) begin
        hasReg_reg_401 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_fu_729_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        i_3_reg_378 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) & (((icmp_ln1073_1_reg_1236 == 1'd1) & (icmp_ln1073_reg_1226 == 1'd0) & (1'd0 == and_ln59_1_reg_1296)) | ((icmp_ln1073_1_reg_1236 == 1'd1) & (icmp_ln1073_reg_1226 == 1'd0) & (1'd0 == and_ln59_2_fu_947_p2))))) begin
        i_3_reg_378 <= add_ln49_reg_1240;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (in_command_reg_1091 == 8'd2))) begin
        i_reg_353 <= 4'd0;
    end else if (((or_ln73_2_fu_708_p2 == 1'd0) & (icmp_ln70_reg_1182 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_reg_353 <= add_ln70_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if ((icmp_ln1073_reg_1226 == 1'd0)) begin
        if (((icmp_ln1073_1_fu_739_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
            j_reg_389 <= 64'd0;
        end else if ((1'b1 == ap_condition_1020)) begin
            j_reg_389 <= add_ln55_reg_1276;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        loop_index_reg_342 <= empty_fu_604_p2;
    end else if (((sourceStream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_index_reg_342 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln73_2_fu_708_p2 == 1'd1) & (icmp_ln70_reg_1182 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        vld_reg_364 <= 1'd0;
    end else if (((icmp_ln70_fu_633_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        vld_reg_364 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_reg_1226 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln49_reg_1240 <= add_ln49_fu_744_p2;
        icmp_ln1073_1_reg_1236 <= icmp_ln1073_1_fu_739_p2;
        trunc_ln1073_reg_1230 <= trunc_ln1073_fu_735_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln55_reg_1276 <= add_ln55_fu_806_p2;
        regions_2_addr_reg_1260 <= zext_ln59_1_fu_784_p1;
        regions_3_addr_reg_1265 <= zext_ln59_1_fu_784_p1;
        tmp_101_reg_1270 <= tmp_101_fu_792_p10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln70_reg_1186 <= add_ln70_fu_639_p2;
        icmp_ln70_reg_1182 <= icmp_ln70_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        and_ln59_1_reg_1296 <= and_ln59_1_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln1073_reg_1226 <= icmp_ln1073_fu_729_p2;
        n_regions_V_1_reg_1221 <= n_regions_V_q0;
        zext_ln502_reg_1216[10 : 3] <= zext_ln502_fu_725_p1[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        icmp_ln59_1_reg_1291 <= icmp_ln59_1_fu_846_p2;
        icmp_ln59_reg_1286 <= icmp_ln59_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln59_4_reg_1305 <= icmp_ln59_4_fu_931_p2;
        icmp_ln59_5_reg_1310 <= icmp_ln59_5_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln73_2_reg_1203 <= icmp_ln73_2_fu_686_p2;
        icmp_ln73_reg_1198 <= icmp_ln73_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_AOV_1_reg_1103 <= in_AOV_1_fu_565_p1;
        in_AOV_2_reg_1111 <= in_AOV_2_fu_569_p1;
        in_AOV_3_reg_1119 <= in_AOV_3_fu_573_p1;
        in_AOV_4_reg_1127 <= in_AOV_4_fu_577_p1;
        in_AOV_5_reg_1135 <= in_AOV_5_fu_581_p1;
        in_AOV_6_reg_1143 <= in_AOV_6_fu_585_p1;
        in_AOV_7_reg_1151 <= in_AOV_7_fu_589_p1;
        in_AOV_reg_1095 <= in_AOV_fu_561_p1;
        in_checkId_V_reg_1078 <= in_checkId_V_fu_457_p1;
        in_command_reg_1091 <= {{sourceStream_dout[47:40]}};
        sourceStream_read_reg_1072 <= sourceStream_dout;
        trunc_ln145_s_reg_1086 <= {{sourceStream_dout[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (in_command_reg_1091 == 8'd3))) begin
        n_regions_V_addr_reg_1167 <= zext_ln587_fu_625_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_regions_V_load_reg_1177 <= n_regions_V_q0;
        trunc_ln511_reg_1172 <= trunc_ln511_fu_629_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_AOV_load_1_reg_1331 <= out_AOV_q0;
        out_AOV_load_reg_1326 <= out_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_AOV_load_2_reg_1336 <= out_AOV_q0;
        out_AOV_load_3_reg_1341 <= out_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_AOV_load_4_reg_1346 <= out_AOV_q0;
        out_AOV_load_5_reg_1351 <= out_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_1_fu_739_p2 == 1'd1) & (icmp_ln1073_reg_1226 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        shl_ln59_reg_1245[11 : 3] <= shl_ln59_fu_769_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln1073_reg_1226 == 1'd1) | ((icmp_ln1073_1_reg_1236 == 1'd0) | ((icmp_ln60_fu_953_p2 == 1'd1) & (1'd1 == and_ln59_2_fu_947_p2) & (1'd1 == and_ln59_1_reg_1296)))))) begin
        tmp_138_reg_1321 <= {{sourceStream_read_reg_1072[39:16]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if (((destStream_full_n == 1'b0) & (in_command_reg_1091 == 8'd2))) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((sourceStream_empty_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (in_command_reg_1091 == 8'd2))) begin
        destStream_blk_n = destStream_full_n;
    end else begin
        destStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((destStream_full_n == 1'b0) & (in_command_reg_1091 == 8'd2)) & (1'b1 == ap_CS_fsm_state18) & (in_command_reg_1091 == 8'd2))) begin
        destStream_write = 1'b1;
    end else begin
        destStream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_442_ce = grp_insert_point_fu_414_grp_fu_442_p_ce;
    end else begin
        grp_fu_442_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_442_opcode = grp_insert_point_fu_414_grp_fu_442_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_442_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_442_opcode = 5'd5;
    end else if (((icmp_ln70_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_442_opcode = 5'd8;
    end else begin
        grp_fu_442_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_442_p0 = grp_insert_point_fu_414_grp_fu_442_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_442_p0 = tmp_102_fu_903_p4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_442_p0 = tmp_100_fu_812_p4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_442_p0 = p_x_assign_fu_645_p10;
    end else begin
        grp_fu_442_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_442_p1 = grp_insert_point_fu_414_grp_fu_442_p_din1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_442_p1 = tmp_101_reg_1270;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_442_p1 = 32'd0;
    end else begin
        grp_fu_442_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_447_ce = grp_insert_point_fu_414_grp_fu_447_p_ce;
    end else begin
        grp_fu_447_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_447_opcode = grp_insert_point_fu_414_grp_fu_447_p_opcode;
    end else if (((icmp_ln70_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_447_opcode = 5'd1;
    end else begin
        grp_fu_447_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_447_p0 = grp_insert_point_fu_414_grp_fu_447_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_447_p0 = p_x_assign_fu_645_p10;
    end else begin
        grp_fu_447_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_447_p1 = grp_insert_point_fu_414_grp_fu_447_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_447_p1 = 32'd2139095040;
    end else begin
        grp_fu_447_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_452_ce = grp_insert_point_fu_414_grp_fu_452_p_ce;
    end else begin
        grp_fu_452_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_452_opcode = grp_insert_point_fu_414_grp_fu_452_p_opcode;
    end else if (((icmp_ln70_fu_633_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_452_opcode = 5'd1;
    end else begin
        grp_fu_452_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_452_p0 = grp_insert_point_fu_414_grp_fu_452_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_452_p0 = p_x_assign_fu_645_p10;
    end else begin
        grp_fu_452_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_452_p1 = grp_insert_point_fu_414_grp_fu_452_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_452_p1 = 32'd4286578688;
    end else begin
        grp_fu_452_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_regions_V_address0 = zext_ln587_2_fu_714_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        n_regions_V_address0 = n_regions_V_addr_reg_1167;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        n_regions_V_address0 = zext_ln587_fu_625_p1;
    end else begin
        n_regions_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5)))) begin
        n_regions_V_ce0 = 1'b1;
    end else begin
        n_regions_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        n_regions_V_we0 = 1'b1;
    end else begin
        n_regions_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_AOV_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_AOV_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        out_AOV_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out_AOV_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_AOV_address0 = loop_index_cast_fu_593_p1;
    end else begin
        out_AOV_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_AOV_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_AOV_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        out_AOV_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out_AOV_address1 = 64'd0;
    end else begin
        out_AOV_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3))) begin
        out_AOV_ce0 = 1'b1;
    end else begin
        out_AOV_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        out_AOV_ce1 = 1'b1;
    end else begin
        out_AOV_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_AOV_we0 = 1'b1;
    end else begin
        out_AOV_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_1_address0 = zext_ln59_1_fu_784_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_1_address0 = grp_insert_point_fu_414_regions_min_1_address0;
    end else begin
        regions_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_1_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_1_ce0 = grp_insert_point_fu_414_regions_min_1_ce0;
    end else begin
        regions_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_1_ce1 = grp_insert_point_fu_414_regions_min_1_ce1;
    end else begin
        regions_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_1_we0 = grp_insert_point_fu_414_regions_min_1_we0;
    end else begin
        regions_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_1_we1 = grp_insert_point_fu_414_regions_min_1_we1;
    end else begin
        regions_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        regions_2_address0 = regions_2_addr_reg_1260;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_2_address0 = grp_insert_point_fu_414_regions_max_0_address0;
    end else begin
        regions_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        regions_2_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_2_ce0 = grp_insert_point_fu_414_regions_max_0_ce0;
    end else begin
        regions_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_2_ce1 = grp_insert_point_fu_414_regions_max_0_ce1;
    end else begin
        regions_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_2_we0 = grp_insert_point_fu_414_regions_max_0_we0;
    end else begin
        regions_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_2_we1 = grp_insert_point_fu_414_regions_max_0_we1;
    end else begin
        regions_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        regions_3_address0 = regions_3_addr_reg_1265;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_3_address0 = grp_insert_point_fu_414_regions_max_1_address0;
    end else begin
        regions_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        regions_3_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_3_ce0 = grp_insert_point_fu_414_regions_max_1_ce0;
    end else begin
        regions_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_3_ce1 = grp_insert_point_fu_414_regions_max_1_ce1;
    end else begin
        regions_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_3_we0 = grp_insert_point_fu_414_regions_max_1_we0;
    end else begin
        regions_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_3_we1 = grp_insert_point_fu_414_regions_max_1_we1;
    end else begin
        regions_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_address0 = zext_ln59_1_fu_784_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_address0 = grp_insert_point_fu_414_regions_min_0_address0;
    end else begin
        regions_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_ce0 = grp_insert_point_fu_414_regions_min_0_ce0;
    end else begin
        regions_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_ce1 = grp_insert_point_fu_414_regions_min_0_ce1;
    end else begin
        regions_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_we0 = grp_insert_point_fu_414_regions_min_0_we0;
    end else begin
        regions_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_command_reg_1091 == 8'd3))) begin
        regions_we1 = grp_insert_point_fu_414_regions_min_0_we1;
    end else begin
        regions_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sourceStream_blk_n = sourceStream_empty_n;
    end else begin
        sourceStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((sourceStream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sourceStream_read = 1'b1;
    end else begin
        sourceStream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((sourceStream_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (in_command_reg_1091 == 8'd2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~(in_command_reg_1091 == 8'd3) & ~(in_command_reg_1091 == 8'd2) & (exitcond1_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((exitcond1_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (in_command_reg_1091 == 8'd3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~(in_command_reg_1091 == 8'd2) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((or_ln73_2_fu_708_p2 == 1'd0) & (icmp_ln70_reg_1182 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & ((icmp_ln1073_1_fu_739_p2 == 1'd0) | (icmp_ln1073_reg_1226 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'd0 == and_ln59_1_fu_897_p2) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (((icmp_ln1073_1_reg_1236 == 1'd1) & (icmp_ln1073_reg_1226 == 1'd0) & (1'd0 == and_ln59_1_reg_1296)) | ((icmp_ln1073_1_reg_1236 == 1'd1) & (icmp_ln1073_reg_1226 == 1'd0) & (1'd0 == and_ln59_2_fu_947_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln1073_reg_1226 == 1'd1) | ((icmp_ln1073_1_reg_1236 == 1'd0) | ((icmp_ln60_fu_953_p2 == 1'd1) & (1'd1 == and_ln59_2_fu_947_p2) & (1'd1 == and_ln59_1_reg_1296)))))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if ((~((destStream_full_n == 1'b0) & (in_command_reg_1091 == 8'd2)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_744_p2 = (i_3_reg_378 + 8'd1);

assign add_ln55_fu_806_p2 = (j_reg_389 + 64'd1);

assign add_ln59_1_fu_779_p2 = (shl_ln59_reg_1245 + trunc_ln59_fu_775_p1);

assign add_ln59_fu_764_p2 = (zext_ln502_reg_1216 + zext_ln59_fu_760_p1);

assign add_ln70_fu_639_p2 = (i_reg_353 + 4'd1);

assign and_ln503_fu_968_p2 = (vld_reg_364 & hasReg_reg_401);

assign and_ln59_1_fu_897_p2 = (grp_fu_442_p2 & and_ln59_fu_891_p2);

assign and_ln59_2_fu_947_p2 = (or_ln59_2_fu_943_p2 & grp_fu_442_p2);

assign and_ln59_fu_891_p2 = (or_ln59_fu_869_p2 & or_ln59_1_fu_885_p2);

assign and_ln73_fu_702_p2 = (or_ln73_fu_692_p2 & or_ln73_3_fu_696_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state18 = ((destStream_full_n == 1'b0) & (in_command_reg_1091 == 8'd2));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_insert_point_fu_414_ap_done == 1'b0) & (in_command_reg_1091 == 8'd3));
end

always @ (*) begin
    ap_condition_1020 = ((icmp_ln60_fu_953_p2 == 1'd0) & (icmp_ln1073_1_reg_1236 == 1'd1) & (1'd1 == and_ln59_2_fu_947_p2) & (1'd1 == and_ln59_1_reg_1296) & (1'b1 == ap_CS_fsm_state14));
end

assign ap_done = ap_done_reg;

assign ap_ready = 1'b0;

assign bitcast_ln174_1_fu_983_p1 = out_AOV_load_1_reg_1331;

assign bitcast_ln174_2_fu_986_p1 = out_AOV_load_2_reg_1336;

assign bitcast_ln174_3_fu_989_p1 = out_AOV_load_3_reg_1341;

assign bitcast_ln174_4_fu_992_p1 = out_AOV_load_4_reg_1346;

assign bitcast_ln174_5_fu_995_p1 = out_AOV_load_5_reg_1351;

assign bitcast_ln174_6_fu_998_p1 = out_AOV_q0;

assign bitcast_ln174_7_fu_1002_p1 = out_AOV_q1;

assign bitcast_ln174_fu_980_p1 = out_AOV_load_reg_1326;

assign bitcast_ln59_1_fu_852_p1 = tmp_101_reg_1270;

assign bitcast_ln59_2_fu_913_p1 = tmp_102_fu_903_p4;

assign bitcast_ln59_fu_822_p1 = tmp_100_fu_812_p4;

assign bitcast_ln73_fu_662_p1 = p_x_assign_fu_645_p10;

assign destStream_din = {{{{{{{{{{{{bitcast_ln174_7_fu_1002_p1}, {bitcast_ln174_6_fu_998_p1}}, {bitcast_ln174_5_fu_995_p1}}, {bitcast_ln174_4_fu_992_p1}}, {bitcast_ln174_3_fu_989_p1}}, {bitcast_ln174_2_fu_986_p1}}, {bitcast_ln174_1_fu_983_p1}}, {bitcast_ln174_fu_980_p1}}, {fault_fu_974_p2}}, {trunc_ln145_s_reg_1086}}, {tmp_138_reg_1321}}, {in_checkId_V_reg_1078}};

assign empty_fu_604_p2 = (loop_index_reg_342 + 4'd1);

assign exitcond1_fu_598_p2 = ((loop_index_reg_342 == 4'd8) ? 1'b1 : 1'b0);

assign fault_fu_974_p2 = (1'd1 ^ and_ln503_fu_968_p2);

assign grp_insert_point_fu_414_ap_start = grp_insert_point_fu_414_ap_start_reg;

assign icmp_ln1073_1_fu_739_p2 = ((i_3_reg_378 < n_regions_V_1_reg_1221) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_729_p2 = ((n_regions_V_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_1_fu_846_p2 = ((trunc_ln59_1_fu_836_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_2_fu_873_p2 = ((tmp_122_fu_855_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_3_fu_879_p2 = ((trunc_ln59_2_fu_865_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_4_fu_931_p2 = ((tmp_124_fu_917_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_5_fu_937_p2 = ((trunc_ln59_3_fu_927_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_840_p2 = ((tmp_121_fu_826_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_953_p2 = ((j_reg_389 == 64'd7) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_633_p2 = ((i_reg_353 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln73_2_fu_686_p2 = ((trunc_ln73_fu_676_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_680_p2 = ((tmp_118_fu_666_p4 != 8'd255) ? 1'b1 : 1'b0);

assign in_AOV_1_fu_565_p1 = trunc_ln145_4_fu_491_p4;

assign in_AOV_2_fu_569_p1 = trunc_ln145_5_fu_501_p4;

assign in_AOV_3_fu_573_p1 = trunc_ln145_6_fu_511_p4;

assign in_AOV_4_fu_577_p1 = trunc_ln145_7_fu_521_p4;

assign in_AOV_5_fu_581_p1 = trunc_ln145_8_fu_531_p4;

assign in_AOV_6_fu_585_p1 = trunc_ln145_9_fu_541_p4;

assign in_AOV_7_fu_589_p1 = trunc_ln145_1_fu_551_p4;

assign in_AOV_fu_561_p1 = trunc_ln145_3_fu_481_p4;

assign in_checkId_V_fu_457_p1 = sourceStream_dout[7:0];

assign loop_index_cast_fu_593_p1 = loop_index_reg_342;

assign n_regions_V_d0 = grp_insert_point_fu_414_ap_return;

assign or_ln59_1_fu_885_p2 = (icmp_ln59_3_fu_879_p2 | icmp_ln59_2_fu_873_p2);

assign or_ln59_2_fu_943_p2 = (icmp_ln59_5_reg_1310 | icmp_ln59_4_reg_1305);

assign or_ln59_fu_869_p2 = (icmp_ln59_reg_1286 | icmp_ln59_1_reg_1291);

assign or_ln73_2_fu_708_p2 = (grp_fu_442_p2 | and_ln73_fu_702_p2);

assign or_ln73_3_fu_696_p2 = (grp_fu_452_p2 | grp_fu_447_p2);

assign or_ln73_fu_692_p2 = (icmp_ln73_reg_1198 | icmp_ln73_2_reg_1203);

assign regions_1_address1 = grp_insert_point_fu_414_regions_min_1_address1;

assign regions_1_d0 = grp_insert_point_fu_414_regions_min_1_d0;

assign regions_1_d1 = grp_insert_point_fu_414_regions_min_1_d1;

assign regions_2_address1 = grp_insert_point_fu_414_regions_max_0_address1;

assign regions_2_d0 = grp_insert_point_fu_414_regions_max_0_d0;

assign regions_2_d1 = grp_insert_point_fu_414_regions_max_0_d1;

assign regions_3_address1 = grp_insert_point_fu_414_regions_max_1_address1;

assign regions_3_d0 = grp_insert_point_fu_414_regions_max_1_d0;

assign regions_3_d1 = grp_insert_point_fu_414_regions_max_1_d1;

assign regions_4_address0 = grp_insert_point_fu_414_regions_center_0_address0;

assign regions_4_address1 = grp_insert_point_fu_414_regions_center_0_address1;

assign regions_4_ce0 = grp_insert_point_fu_414_regions_center_0_ce0;

assign regions_4_ce1 = grp_insert_point_fu_414_regions_center_0_ce1;

assign regions_4_d0 = grp_insert_point_fu_414_regions_center_0_d0;

assign regions_4_d1 = grp_insert_point_fu_414_regions_center_0_d1;

assign regions_4_we0 = grp_insert_point_fu_414_regions_center_0_we0;

assign regions_4_we1 = grp_insert_point_fu_414_regions_center_0_we1;

assign regions_5_address0 = grp_insert_point_fu_414_regions_center_1_address0;

assign regions_5_address1 = grp_insert_point_fu_414_regions_center_1_address1;

assign regions_5_ce0 = grp_insert_point_fu_414_regions_center_1_ce0;

assign regions_5_ce1 = grp_insert_point_fu_414_regions_center_1_ce1;

assign regions_5_d0 = grp_insert_point_fu_414_regions_center_1_d0;

assign regions_5_d1 = grp_insert_point_fu_414_regions_center_1_d1;

assign regions_5_we0 = grp_insert_point_fu_414_regions_center_1_we0;

assign regions_5_we1 = grp_insert_point_fu_414_regions_center_1_we1;

assign regions_address1 = grp_insert_point_fu_414_regions_min_0_address1;

assign regions_d0 = grp_insert_point_fu_414_regions_min_0_d0;

assign regions_d1 = grp_insert_point_fu_414_regions_min_0_d1;

assign shl_ln59_fu_769_p2 = add_ln59_fu_764_p2 << 12'd3;

assign tmp_118_fu_666_p4 = {{bitcast_ln73_fu_662_p1[30:23]}};

assign tmp_121_fu_826_p4 = {{bitcast_ln59_fu_822_p1[30:23]}};

assign tmp_122_fu_855_p4 = {{bitcast_ln59_1_fu_852_p1[30:23]}};

assign tmp_124_fu_917_p4 = {{bitcast_ln59_2_fu_913_p1[30:23]}};

assign tmp_136_fu_718_p3 = {{in_checkId_V_reg_1078}, {3'd0}};

assign tmp_137_fu_750_p4 = {{i_3_reg_378[7:1]}};

assign trunc_ln1073_fu_735_p1 = i_3_reg_378[0:0];

assign trunc_ln145_1_fu_551_p4 = {{sourceStream_dout[319:288]}};

assign trunc_ln145_3_fu_481_p4 = {{sourceStream_dout[95:64]}};

assign trunc_ln145_4_fu_491_p4 = {{sourceStream_dout[127:96]}};

assign trunc_ln145_5_fu_501_p4 = {{sourceStream_dout[159:128]}};

assign trunc_ln145_6_fu_511_p4 = {{sourceStream_dout[191:160]}};

assign trunc_ln145_7_fu_521_p4 = {{sourceStream_dout[223:192]}};

assign trunc_ln145_8_fu_531_p4 = {{sourceStream_dout[255:224]}};

assign trunc_ln145_9_fu_541_p4 = {{sourceStream_dout[287:256]}};

assign trunc_ln511_fu_629_p1 = sourceStream_read_reg_1072[5:0];

assign trunc_ln59_1_fu_836_p1 = bitcast_ln59_fu_822_p1[22:0];

assign trunc_ln59_2_fu_865_p1 = bitcast_ln59_1_fu_852_p1[22:0];

assign trunc_ln59_3_fu_927_p1 = bitcast_ln59_2_fu_913_p1[22:0];

assign trunc_ln59_fu_775_p1 = j_reg_389[11:0];

assign trunc_ln73_fu_676_p1 = bitcast_ln73_fu_662_p1[22:0];

assign zext_ln502_fu_725_p1 = tmp_136_fu_718_p3;

assign zext_ln587_2_fu_714_p1 = in_checkId_V_reg_1078;

assign zext_ln587_fu_625_p1 = in_checkId_V_reg_1078;

assign zext_ln59_1_fu_784_p1 = add_ln59_1_fu_779_p2;

assign zext_ln59_fu_760_p1 = tmp_137_fu_750_p4;

always @ (posedge ap_clk) begin
    ap_done_reg <= 1'b0;
    zext_ln502_reg_1216[2:0] <= 3'b000;
    zext_ln502_reg_1216[11] <= 1'b0;
    shl_ln59_reg_1245[2:0] <= 3'b000;
end

endmodule //run_compute
