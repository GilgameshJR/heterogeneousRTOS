// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FaultDetector_FaultDetector,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=18.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.693700,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=64,HLS_SYN_DSP=0,HLS_SYN_FF=16344,HLS_SYN_LUT=29568,HLS_VERSION=2022_1}" *)

module FaultDetector (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        failedTask,
        failedTask_ap_vld,
        failedTask_ap_ack,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 11;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 512;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [15:0] failedTask;
output   failedTask_ap_vld;
input   failedTask_ap_ack;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] accel_mode;
wire   [63:0] inputData;
wire   [7:0] startCopy;
wire    startCopy_ap_vld;
reg    startCopy_ap_ack;
wire   [7:0] errorInTask_q0;
wire   [767:0] trainedRegion_i;
wire   [767:0] trainedRegion_o;
wire   [7:0] IOCheckIdx;
wire   [7:0] IORegionIdx;
wire   [7:0] n_regions_i;
reg   [7:0] n_regions_o;
reg   [11:0] regions_address0;
reg    regions_ce0;
reg    regions_we0;
reg   [31:0] regions_d0;
wire   [31:0] regions_q0;
reg   [11:0] regions_address1;
reg    regions_ce1;
reg    regions_we1;
reg   [31:0] regions_d1;
wire   [31:0] regions_q1;
reg   [11:0] regions_2_address0;
reg    regions_2_ce0;
reg    regions_2_we0;
reg   [31:0] regions_2_d0;
wire   [31:0] regions_2_q0;
reg   [11:0] regions_2_address1;
reg    regions_2_ce1;
reg    regions_2_we1;
reg   [31:0] regions_2_d1;
wire   [31:0] regions_2_q1;
reg   [11:0] regions_4_address0;
reg    regions_4_ce0;
reg    regions_4_we0;
reg   [31:0] regions_4_d0;
wire   [31:0] regions_4_q0;
reg   [11:0] regions_4_address1;
reg    regions_4_ce1;
reg    regions_4_we1;
reg   [31:0] regions_4_d1;
wire   [31:0] regions_4_q1;
reg   [11:0] regions_1_address0;
reg    regions_1_ce0;
reg    regions_1_we0;
reg   [31:0] regions_1_d0;
wire   [31:0] regions_1_q0;
reg   [11:0] regions_1_address1;
reg    regions_1_ce1;
reg    regions_1_we1;
reg   [31:0] regions_1_d1;
wire   [31:0] regions_1_q1;
reg   [11:0] regions_3_address0;
reg    regions_3_ce0;
reg    regions_3_we0;
reg   [31:0] regions_3_d0;
wire   [31:0] regions_3_q0;
reg   [11:0] regions_3_address1;
reg    regions_3_ce1;
reg    regions_3_we1;
reg   [31:0] regions_3_d1;
wire   [31:0] regions_3_q1;
reg   [11:0] regions_5_address0;
reg    regions_5_ce0;
reg    regions_5_we0;
reg   [31:0] regions_5_d0;
wire   [31:0] regions_5_q0;
reg   [11:0] regions_5_address1;
reg    regions_5_ce1;
reg    regions_5_we1;
reg   [31:0] regions_5_d1;
wire   [31:0] regions_5_q1;
reg   [5:0] n_regions_V_address0;
reg    n_regions_V_ce0;
reg    n_regions_V_we0;
reg   [7:0] n_regions_V_d0;
wire   [7:0] n_regions_V_q0;
reg   [63:0] inputData_read_reg_2001;
wire   [7:0] accel_mode_read_read_fu_290_p2;
wire   [0:0] trunc_ln403_fu_1216_p1;
reg   [0:0] trunc_ln403_reg_2010;
wire   [11:0] shl_ln434_fu_1247_p2;
reg   [11:0] shl_ln434_reg_2020;
wire   [63:0] zext_ln587_fu_1279_p1;
reg   [63:0] zext_ln587_reg_2095;
reg   [11:0] regions_addr_2_reg_2100;
reg   [11:0] regions_addr_3_reg_2105;
reg   [11:0] regions_addr_4_reg_2110;
reg   [11:0] regions_addr_5_reg_2115;
reg   [11:0] regions_addr_6_reg_2120;
reg   [11:0] regions_addr_7_reg_2125;
reg   [11:0] regions_1_addr_10_reg_2130;
reg   [11:0] regions_1_addr_11_reg_2135;
reg   [11:0] regions_1_addr_12_reg_2140;
reg   [11:0] regions_1_addr_13_reg_2145;
reg   [11:0] regions_1_addr_14_reg_2150;
reg   [11:0] regions_1_addr_15_reg_2155;
reg   [11:0] regions_2_addr_2_reg_2160;
reg   [11:0] regions_2_addr_3_reg_2165;
reg   [11:0] regions_2_addr_4_reg_2170;
reg   [11:0] regions_2_addr_5_reg_2175;
reg   [11:0] regions_2_addr_6_reg_2180;
reg   [11:0] regions_2_addr_7_reg_2185;
reg   [11:0] regions_3_addr_10_reg_2190;
reg   [11:0] regions_3_addr_11_reg_2195;
reg   [11:0] regions_3_addr_12_reg_2200;
reg   [11:0] regions_3_addr_13_reg_2205;
reg   [11:0] regions_3_addr_14_reg_2210;
reg   [11:0] regions_3_addr_15_reg_2215;
reg   [11:0] regions_4_addr_2_reg_2220;
reg   [11:0] regions_4_addr_3_reg_2225;
reg   [11:0] regions_4_addr_4_reg_2230;
reg   [11:0] regions_4_addr_5_reg_2235;
reg   [11:0] regions_4_addr_6_reg_2240;
reg   [11:0] regions_4_addr_7_reg_2245;
reg   [11:0] regions_5_addr_10_reg_2250;
reg   [11:0] regions_5_addr_11_reg_2255;
reg   [11:0] regions_5_addr_12_reg_2260;
reg   [11:0] regions_5_addr_13_reg_2265;
reg   [11:0] regions_5_addr_14_reg_2270;
reg   [11:0] regions_5_addr_15_reg_2275;
wire   [31:0] bitcast_ln431_2_fu_1469_p1;
reg   [31:0] bitcast_ln431_2_reg_2280;
wire   [31:0] bitcast_ln431_3_fu_1483_p1;
reg   [31:0] bitcast_ln431_3_reg_2286;
wire   [31:0] bitcast_ln431_4_fu_1497_p1;
reg   [31:0] bitcast_ln431_4_reg_2292;
wire   [31:0] bitcast_ln431_5_fu_1511_p1;
reg   [31:0] bitcast_ln431_5_reg_2298;
wire   [31:0] bitcast_ln431_6_fu_1525_p1;
reg   [31:0] bitcast_ln431_6_reg_2304;
wire   [31:0] bitcast_ln431_7_fu_1539_p1;
reg   [31:0] bitcast_ln431_7_reg_2310;
wire   [31:0] bitcast_ln431_10_fu_1585_p1;
reg   [31:0] bitcast_ln431_10_reg_2316;
wire   [31:0] bitcast_ln431_11_fu_1599_p1;
reg   [31:0] bitcast_ln431_11_reg_2322;
wire   [31:0] bitcast_ln431_12_fu_1613_p1;
reg   [31:0] bitcast_ln431_12_reg_2328;
wire   [31:0] bitcast_ln431_13_fu_1627_p1;
reg   [31:0] bitcast_ln431_13_reg_2334;
wire   [31:0] bitcast_ln431_14_fu_1641_p1;
reg   [31:0] bitcast_ln431_14_reg_2340;
wire   [31:0] bitcast_ln431_15_fu_1655_p1;
reg   [31:0] bitcast_ln431_15_reg_2346;
wire   [31:0] bitcast_ln431_18_fu_1701_p1;
reg   [31:0] bitcast_ln431_18_reg_2352;
wire   [31:0] bitcast_ln431_19_fu_1715_p1;
reg   [31:0] bitcast_ln431_19_reg_2358;
wire   [31:0] bitcast_ln431_20_fu_1729_p1;
reg   [31:0] bitcast_ln431_20_reg_2364;
wire   [31:0] bitcast_ln431_21_fu_1743_p1;
reg   [31:0] bitcast_ln431_21_reg_2370;
wire   [31:0] bitcast_ln431_22_fu_1757_p1;
reg   [31:0] bitcast_ln431_22_reg_2376;
wire   [31:0] bitcast_ln431_23_fu_1771_p1;
reg   [31:0] bitcast_ln431_23_reg_2382;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_1162_p4;
reg   [31:0] tmp_76_reg_2448;
wire   [31:0] grp_fu_1171_p4;
reg   [31:0] tmp_77_reg_2453;
wire   [31:0] grp_fu_1180_p4;
reg   [31:0] tmp_84_reg_2458;
wire   [31:0] grp_fu_1189_p4;
reg   [31:0] tmp_85_reg_2463;
wire   [31:0] grp_fu_1198_p4;
reg   [31:0] tmp_92_reg_2468;
wire   [31:0] grp_fu_1207_p4;
reg   [31:0] tmp_93_reg_2473;
wire    ap_CS_fsm_state4;
reg   [31:0] tmp_78_reg_2538;
reg   [31:0] tmp_79_reg_2543;
reg   [31:0] tmp_86_reg_2548;
reg   [31:0] tmp_87_reg_2553;
reg   [31:0] tmp_94_reg_2558;
reg   [31:0] tmp_95_reg_2563;
wire    ap_CS_fsm_state5;
reg   [31:0] tmp_80_reg_2628;
reg   [31:0] tmp_81_reg_2633;
reg   [31:0] tmp_88_reg_2638;
reg   [31:0] tmp_89_reg_2643;
reg   [31:0] tmp_96_reg_2648;
reg   [31:0] tmp_97_reg_2653;
wire    grp_afterInit_fu_1118_m_axi_gmem_AWVALID;
wire   [63:0] grp_afterInit_fu_1118_m_axi_gmem_AWADDR;
wire   [0:0] grp_afterInit_fu_1118_m_axi_gmem_AWID;
wire   [31:0] grp_afterInit_fu_1118_m_axi_gmem_AWLEN;
wire   [2:0] grp_afterInit_fu_1118_m_axi_gmem_AWSIZE;
wire   [1:0] grp_afterInit_fu_1118_m_axi_gmem_AWBURST;
wire   [1:0] grp_afterInit_fu_1118_m_axi_gmem_AWLOCK;
wire   [3:0] grp_afterInit_fu_1118_m_axi_gmem_AWCACHE;
wire   [2:0] grp_afterInit_fu_1118_m_axi_gmem_AWPROT;
wire   [3:0] grp_afterInit_fu_1118_m_axi_gmem_AWQOS;
wire   [3:0] grp_afterInit_fu_1118_m_axi_gmem_AWREGION;
wire   [0:0] grp_afterInit_fu_1118_m_axi_gmem_AWUSER;
wire    grp_afterInit_fu_1118_m_axi_gmem_WVALID;
wire   [511:0] grp_afterInit_fu_1118_m_axi_gmem_WDATA;
wire   [63:0] grp_afterInit_fu_1118_m_axi_gmem_WSTRB;
wire    grp_afterInit_fu_1118_m_axi_gmem_WLAST;
wire   [0:0] grp_afterInit_fu_1118_m_axi_gmem_WID;
wire   [0:0] grp_afterInit_fu_1118_m_axi_gmem_WUSER;
wire    grp_afterInit_fu_1118_m_axi_gmem_ARVALID;
wire   [63:0] grp_afterInit_fu_1118_m_axi_gmem_ARADDR;
wire   [0:0] grp_afterInit_fu_1118_m_axi_gmem_ARID;
wire   [31:0] grp_afterInit_fu_1118_m_axi_gmem_ARLEN;
wire   [2:0] grp_afterInit_fu_1118_m_axi_gmem_ARSIZE;
wire   [1:0] grp_afterInit_fu_1118_m_axi_gmem_ARBURST;
wire   [1:0] grp_afterInit_fu_1118_m_axi_gmem_ARLOCK;
wire   [3:0] grp_afterInit_fu_1118_m_axi_gmem_ARCACHE;
wire   [2:0] grp_afterInit_fu_1118_m_axi_gmem_ARPROT;
wire   [3:0] grp_afterInit_fu_1118_m_axi_gmem_ARQOS;
wire   [3:0] grp_afterInit_fu_1118_m_axi_gmem_ARREGION;
wire   [0:0] grp_afterInit_fu_1118_m_axi_gmem_ARUSER;
wire    grp_afterInit_fu_1118_m_axi_gmem_RREADY;
wire    grp_afterInit_fu_1118_m_axi_gmem_BREADY;
wire   [3:0] grp_afterInit_fu_1118_lastTestDescriptor_address0;
wire    grp_afterInit_fu_1118_lastTestDescriptor_ce0;
wire   [287:0] grp_afterInit_fu_1118_lastTestDescriptor_d0;
wire   [35:0] grp_afterInit_fu_1118_lastTestDescriptor_we0;
wire   [3:0] grp_afterInit_fu_1118_errorInTask_address0;
wire    grp_afterInit_fu_1118_errorInTask_ce0;
wire   [7:0] grp_afterInit_fu_1118_errorInTask_d0;
wire    grp_afterInit_fu_1118_errorInTask_we0;
wire   [15:0] grp_afterInit_fu_1118_failedTask;
wire   [7:0] grp_afterInit_fu_1118_copying;
wire   [5:0] grp_afterInit_fu_1118_n_regions_V_address0;
wire    grp_afterInit_fu_1118_n_regions_V_ce0;
wire   [7:0] grp_afterInit_fu_1118_n_regions_V_d0;
wire    grp_afterInit_fu_1118_n_regions_V_we0;
wire   [5:0] grp_afterInit_fu_1118_n_regions_V_address1;
wire    grp_afterInit_fu_1118_n_regions_V_ce1;
wire   [7:0] grp_afterInit_fu_1118_n_regions_V_d1;
wire    grp_afterInit_fu_1118_n_regions_V_we1;
wire   [11:0] grp_afterInit_fu_1118_regions_address0;
wire    grp_afterInit_fu_1118_regions_ce0;
wire   [31:0] grp_afterInit_fu_1118_regions_d0;
wire    grp_afterInit_fu_1118_regions_we0;
wire   [11:0] grp_afterInit_fu_1118_regions_address1;
wire    grp_afterInit_fu_1118_regions_ce1;
wire   [31:0] grp_afterInit_fu_1118_regions_d1;
wire    grp_afterInit_fu_1118_regions_we1;
wire   [11:0] grp_afterInit_fu_1118_regions_1_address0;
wire    grp_afterInit_fu_1118_regions_1_ce0;
wire   [31:0] grp_afterInit_fu_1118_regions_1_d0;
wire    grp_afterInit_fu_1118_regions_1_we0;
wire   [11:0] grp_afterInit_fu_1118_regions_1_address1;
wire    grp_afterInit_fu_1118_regions_1_ce1;
wire   [31:0] grp_afterInit_fu_1118_regions_1_d1;
wire    grp_afterInit_fu_1118_regions_1_we1;
wire   [11:0] grp_afterInit_fu_1118_regions_2_address0;
wire    grp_afterInit_fu_1118_regions_2_ce0;
wire   [31:0] grp_afterInit_fu_1118_regions_2_d0;
wire    grp_afterInit_fu_1118_regions_2_we0;
wire   [11:0] grp_afterInit_fu_1118_regions_2_address1;
wire    grp_afterInit_fu_1118_regions_2_ce1;
wire   [31:0] grp_afterInit_fu_1118_regions_2_d1;
wire    grp_afterInit_fu_1118_regions_2_we1;
wire   [11:0] grp_afterInit_fu_1118_regions_3_address0;
wire    grp_afterInit_fu_1118_regions_3_ce0;
wire   [31:0] grp_afterInit_fu_1118_regions_3_d0;
wire    grp_afterInit_fu_1118_regions_3_we0;
wire   [11:0] grp_afterInit_fu_1118_regions_3_address1;
wire    grp_afterInit_fu_1118_regions_3_ce1;
wire   [31:0] grp_afterInit_fu_1118_regions_3_d1;
wire    grp_afterInit_fu_1118_regions_3_we1;
wire   [11:0] grp_afterInit_fu_1118_regions_4_address0;
wire    grp_afterInit_fu_1118_regions_4_ce0;
wire   [31:0] grp_afterInit_fu_1118_regions_4_d0;
wire    grp_afterInit_fu_1118_regions_4_we0;
wire   [11:0] grp_afterInit_fu_1118_regions_4_address1;
wire    grp_afterInit_fu_1118_regions_4_ce1;
wire   [31:0] grp_afterInit_fu_1118_regions_4_d1;
wire    grp_afterInit_fu_1118_regions_4_we1;
wire   [11:0] grp_afterInit_fu_1118_regions_5_address0;
wire    grp_afterInit_fu_1118_regions_5_ce0;
wire   [31:0] grp_afterInit_fu_1118_regions_5_d0;
wire    grp_afterInit_fu_1118_regions_5_we0;
wire   [11:0] grp_afterInit_fu_1118_regions_5_address1;
wire    grp_afterInit_fu_1118_regions_5_ce1;
wire   [31:0] grp_afterInit_fu_1118_regions_5_d1;
wire    grp_afterInit_fu_1118_regions_5_we1;
wire    grp_afterInit_fu_1118_startCopy_ap_ack;
wire    grp_afterInit_fu_1118_copying_ap_vld;
wire    grp_afterInit_fu_1118_ap_start;
wire    grp_afterInit_fu_1118_ap_done;
wire    grp_afterInit_fu_1118_failedTask_ap_vld;
wire    grp_afterInit_fu_1118_failedTask_ap_ack;
wire    grp_afterInit_fu_1118_ap_ready;
wire    grp_afterInit_fu_1118_ap_idle;
reg    grp_afterInit_fu_1118_ap_continue;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [511:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    grp_afterInit_fu_1118_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_afterInit_fu_1118_ap_ready;
wire    ap_sync_grp_afterInit_fu_1118_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_afterInit_fu_1118_ap_ready;
reg    ap_sync_reg_grp_afterInit_fu_1118_ap_done;
wire   [63:0] zext_ln434_2_fu_1253_p1;
wire   [63:0] zext_ln434_3_fu_1269_p1;
wire   [63:0] zext_ln587_2_fu_1220_p1;
wire   [63:0] zext_ln431_2_fu_1321_p1;
wire   [63:0] zext_ln431_3_fu_1337_p1;
wire   [63:0] zext_ln431_4_fu_1353_p1;
wire   [63:0] zext_ln431_5_fu_1369_p1;
wire   [63:0] zext_ln431_6_fu_1385_p1;
wire   [63:0] zext_ln431_7_fu_1401_p1;
wire   [63:0] zext_ln431_8_fu_1417_p1;
wire   [63:0] zext_ln431_9_fu_1433_p1;
wire   [63:0] zext_ln434_4_fu_1780_p1;
wire   [63:0] zext_ln434_5_fu_1795_p1;
wire   [63:0] zext_ln434_6_fu_1810_p1;
wire   [63:0] zext_ln434_7_fu_1825_p1;
wire   [63:0] zext_ln434_8_fu_1840_p1;
wire   [63:0] zext_ln434_9_fu_1855_p1;
wire    ap_CS_fsm_state9;
reg   [7:0] n_regions_o_preg;
wire    ap_CS_fsm_state6;
wire    regslice_forward_failedTask_U_apdone_blk;
wire   [31:0] bitcast_ln431_fu_1299_p1;
wire   [31:0] bitcast_ln431_1_fu_1453_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [31:0] bitcast_ln431_8_fu_1553_p1;
wire   [31:0] bitcast_ln431_9_fu_1569_p1;
wire   [31:0] bitcast_ln431_16_fu_1669_p1;
wire   [31:0] bitcast_ln431_17_fu_1685_p1;
wire   [10:0] tmp_150_fu_1225_p3;
wire   [6:0] grp_fu_1152_p4;
wire   [11:0] zext_ln434_fu_1233_p1;
wire   [11:0] zext_ln434_1_fu_1237_p1;
wire   [11:0] add_ln434_fu_1241_p2;
wire   [11:0] or_ln434_fu_1263_p2;
wire   [10:0] tmp_s_fu_1283_p3;
wire   [31:0] trunc_ln431_fu_1295_p1;
wire   [11:0] zext_ln431_fu_1291_p1;
wire   [11:0] zext_ln431_1_fu_1305_p1;
wire   [11:0] add_ln431_fu_1309_p2;
wire   [11:0] shl_ln431_fu_1315_p2;
wire   [11:0] or_ln431_fu_1331_p2;
wire   [11:0] or_ln431_1_fu_1347_p2;
wire   [11:0] or_ln431_2_fu_1363_p2;
wire   [11:0] or_ln431_3_fu_1379_p2;
wire   [11:0] or_ln431_4_fu_1395_p2;
wire   [11:0] or_ln431_5_fu_1411_p2;
wire   [11:0] or_ln431_6_fu_1427_p2;
wire   [31:0] tmp_fu_1443_p4;
wire   [31:0] tmp_32_fu_1459_p4;
wire   [31:0] tmp_129_fu_1473_p4;
wire   [31:0] tmp_130_fu_1487_p4;
wire   [31:0] tmp_131_fu_1501_p4;
wire   [31:0] tmp_132_fu_1515_p4;
wire   [31:0] tmp_133_fu_1529_p4;
wire   [31:0] tmp_134_fu_1543_p4;
wire   [31:0] tmp_135_fu_1559_p4;
wire   [31:0] tmp_136_fu_1575_p4;
wire   [31:0] tmp_137_fu_1589_p4;
wire   [31:0] tmp_138_fu_1603_p4;
wire   [31:0] tmp_139_fu_1617_p4;
wire   [31:0] tmp_140_fu_1631_p4;
wire   [31:0] tmp_141_fu_1645_p4;
wire   [31:0] tmp_142_fu_1659_p4;
wire   [31:0] tmp_143_fu_1675_p4;
wire   [31:0] tmp_144_fu_1691_p4;
wire   [31:0] tmp_145_fu_1705_p4;
wire   [31:0] tmp_146_fu_1719_p4;
wire   [31:0] tmp_147_fu_1733_p4;
wire   [31:0] tmp_148_fu_1747_p4;
wire   [31:0] tmp_149_fu_1761_p4;
wire   [11:0] or_ln434_1_fu_1775_p2;
wire   [11:0] or_ln434_2_fu_1790_p2;
wire   [11:0] or_ln434_3_fu_1805_p2;
wire   [11:0] or_ln434_4_fu_1820_p2;
wire   [11:0] or_ln434_5_fu_1835_p2;
wire   [11:0] or_ln434_6_fu_1850_p2;
wire   [31:0] bitcast_ln434_23_fu_1939_p1;
wire   [31:0] bitcast_ln434_22_fu_1935_p1;
wire   [31:0] bitcast_ln434_21_fu_1932_p1;
wire   [31:0] bitcast_ln434_20_fu_1929_p1;
wire   [31:0] bitcast_ln434_19_fu_1926_p1;
wire   [31:0] bitcast_ln434_18_fu_1923_p1;
wire   [31:0] bitcast_ln434_17_fu_1920_p1;
wire   [31:0] bitcast_ln434_16_fu_1917_p1;
wire   [31:0] bitcast_ln434_15_fu_1913_p1;
wire   [31:0] bitcast_ln434_14_fu_1909_p1;
wire   [31:0] bitcast_ln434_13_fu_1906_p1;
wire   [31:0] bitcast_ln434_12_fu_1903_p1;
wire   [31:0] bitcast_ln434_11_fu_1900_p1;
wire   [31:0] bitcast_ln434_10_fu_1897_p1;
wire   [31:0] bitcast_ln434_9_fu_1894_p1;
wire   [31:0] bitcast_ln434_8_fu_1891_p1;
wire   [31:0] bitcast_ln434_7_fu_1887_p1;
wire   [31:0] bitcast_ln434_6_fu_1883_p1;
wire   [31:0] bitcast_ln434_5_fu_1880_p1;
wire   [31:0] bitcast_ln434_4_fu_1877_p1;
wire   [31:0] bitcast_ln434_3_fu_1874_p1;
wire   [31:0] bitcast_ln434_2_fu_1871_p1;
wire   [31:0] bitcast_ln434_1_fu_1868_p1;
wire   [31:0] bitcast_ln434_fu_1865_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    failedTask_ap_ack_int_regslice;
wire    regslice_forward_failedTask_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 11'd1;
#0 grp_afterInit_fu_1118_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_afterInit_fu_1118_ap_ready = 1'b0;
#0 ap_sync_reg_grp_afterInit_fu_1118_ap_done = 1'b0;
#0 n_regions_o_preg = 8'd0;
end

FaultDetector_regions_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
regions_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(regions_address0),
    .ce0(regions_ce0),
    .we0(regions_we0),
    .d0(regions_d0),
    .q0(regions_q0),
    .address1(regions_address1),
    .ce1(regions_ce1),
    .we1(regions_we1),
    .d1(regions_d1),
    .q1(regions_q1)
);

FaultDetector_regions_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
regions_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(regions_2_address0),
    .ce0(regions_2_ce0),
    .we0(regions_2_we0),
    .d0(regions_2_d0),
    .q0(regions_2_q0),
    .address1(regions_2_address1),
    .ce1(regions_2_ce1),
    .we1(regions_2_we1),
    .d1(regions_2_d1),
    .q1(regions_2_q1)
);

FaultDetector_regions_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
regions_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(regions_4_address0),
    .ce0(regions_4_ce0),
    .we0(regions_4_we0),
    .d0(regions_4_d0),
    .q0(regions_4_q0),
    .address1(regions_4_address1),
    .ce1(regions_4_ce1),
    .we1(regions_4_we1),
    .d1(regions_4_d1),
    .q1(regions_4_q1)
);

FaultDetector_regions_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
regions_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(regions_1_address0),
    .ce0(regions_1_ce0),
    .we0(regions_1_we0),
    .d0(regions_1_d0),
    .q0(regions_1_q0),
    .address1(regions_1_address1),
    .ce1(regions_1_ce1),
    .we1(regions_1_we1),
    .d1(regions_1_d1),
    .q1(regions_1_q1)
);

FaultDetector_regions_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
regions_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(regions_3_address0),
    .ce0(regions_3_ce0),
    .we0(regions_3_we0),
    .d0(regions_3_d0),
    .q0(regions_3_q0),
    .address1(regions_3_address1),
    .ce1(regions_3_ce1),
    .we1(regions_3_we1),
    .d1(regions_3_d1),
    .q1(regions_3_q1)
);

FaultDetector_regions_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
regions_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(regions_5_address0),
    .ce0(regions_5_ce0),
    .we0(regions_5_we0),
    .d0(regions_5_d0),
    .q0(regions_5_q0),
    .address1(regions_5_address1),
    .ce1(regions_5_ce1),
    .we1(regions_5_we1),
    .d1(regions_5_d1),
    .q1(regions_5_q1)
);

FaultDetector_n_regions_V_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
n_regions_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(n_regions_V_address0),
    .ce0(n_regions_V_ce0),
    .we0(n_regions_V_we0),
    .d0(n_regions_V_d0),
    .q0(n_regions_V_q0)
);

FaultDetector_afterInit grp_afterInit_fu_1118(
    .m_axi_gmem_AWVALID(grp_afterInit_fu_1118_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_afterInit_fu_1118_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_afterInit_fu_1118_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_afterInit_fu_1118_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_afterInit_fu_1118_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_afterInit_fu_1118_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_afterInit_fu_1118_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_afterInit_fu_1118_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_afterInit_fu_1118_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_afterInit_fu_1118_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_afterInit_fu_1118_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_afterInit_fu_1118_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_afterInit_fu_1118_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_afterInit_fu_1118_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_afterInit_fu_1118_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_afterInit_fu_1118_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_afterInit_fu_1118_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_afterInit_fu_1118_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_afterInit_fu_1118_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_afterInit_fu_1118_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_afterInit_fu_1118_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_afterInit_fu_1118_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_afterInit_fu_1118_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_afterInit_fu_1118_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_afterInit_fu_1118_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_afterInit_fu_1118_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_afterInit_fu_1118_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_afterInit_fu_1118_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_afterInit_fu_1118_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_afterInit_fu_1118_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(grp_afterInit_fu_1118_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_afterInit_fu_1118_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .inputAOV(inputData_read_reg_2001),
    .startCopy(startCopy),
    .lastTestDescriptor_address0(grp_afterInit_fu_1118_lastTestDescriptor_address0),
    .lastTestDescriptor_ce0(grp_afterInit_fu_1118_lastTestDescriptor_ce0),
    .lastTestDescriptor_d0(grp_afterInit_fu_1118_lastTestDescriptor_d0),
    .lastTestDescriptor_q0(288'd0),
    .lastTestDescriptor_we0(grp_afterInit_fu_1118_lastTestDescriptor_we0),
    .errorInTask_address0(grp_afterInit_fu_1118_errorInTask_address0),
    .errorInTask_ce0(grp_afterInit_fu_1118_errorInTask_ce0),
    .errorInTask_d0(grp_afterInit_fu_1118_errorInTask_d0),
    .errorInTask_q0(errorInTask_q0),
    .errorInTask_we0(grp_afterInit_fu_1118_errorInTask_we0),
    .failedTask(grp_afterInit_fu_1118_failedTask),
    .copying(grp_afterInit_fu_1118_copying),
    .n_regions_V_address0(grp_afterInit_fu_1118_n_regions_V_address0),
    .n_regions_V_ce0(grp_afterInit_fu_1118_n_regions_V_ce0),
    .n_regions_V_d0(grp_afterInit_fu_1118_n_regions_V_d0),
    .n_regions_V_q0(n_regions_V_q0),
    .n_regions_V_we0(grp_afterInit_fu_1118_n_regions_V_we0),
    .n_regions_V_address1(grp_afterInit_fu_1118_n_regions_V_address1),
    .n_regions_V_ce1(grp_afterInit_fu_1118_n_regions_V_ce1),
    .n_regions_V_d1(grp_afterInit_fu_1118_n_regions_V_d1),
    .n_regions_V_q1(8'd0),
    .n_regions_V_we1(grp_afterInit_fu_1118_n_regions_V_we1),
    .regions_address0(grp_afterInit_fu_1118_regions_address0),
    .regions_ce0(grp_afterInit_fu_1118_regions_ce0),
    .regions_d0(grp_afterInit_fu_1118_regions_d0),
    .regions_q0(regions_q0),
    .regions_we0(grp_afterInit_fu_1118_regions_we0),
    .regions_address1(grp_afterInit_fu_1118_regions_address1),
    .regions_ce1(grp_afterInit_fu_1118_regions_ce1),
    .regions_d1(grp_afterInit_fu_1118_regions_d1),
    .regions_q1(regions_q1),
    .regions_we1(grp_afterInit_fu_1118_regions_we1),
    .regions_1_address0(grp_afterInit_fu_1118_regions_1_address0),
    .regions_1_ce0(grp_afterInit_fu_1118_regions_1_ce0),
    .regions_1_d0(grp_afterInit_fu_1118_regions_1_d0),
    .regions_1_q0(regions_1_q0),
    .regions_1_we0(grp_afterInit_fu_1118_regions_1_we0),
    .regions_1_address1(grp_afterInit_fu_1118_regions_1_address1),
    .regions_1_ce1(grp_afterInit_fu_1118_regions_1_ce1),
    .regions_1_d1(grp_afterInit_fu_1118_regions_1_d1),
    .regions_1_q1(regions_1_q1),
    .regions_1_we1(grp_afterInit_fu_1118_regions_1_we1),
    .regions_2_address0(grp_afterInit_fu_1118_regions_2_address0),
    .regions_2_ce0(grp_afterInit_fu_1118_regions_2_ce0),
    .regions_2_d0(grp_afterInit_fu_1118_regions_2_d0),
    .regions_2_q0(regions_2_q0),
    .regions_2_we0(grp_afterInit_fu_1118_regions_2_we0),
    .regions_2_address1(grp_afterInit_fu_1118_regions_2_address1),
    .regions_2_ce1(grp_afterInit_fu_1118_regions_2_ce1),
    .regions_2_d1(grp_afterInit_fu_1118_regions_2_d1),
    .regions_2_q1(regions_2_q1),
    .regions_2_we1(grp_afterInit_fu_1118_regions_2_we1),
    .regions_3_address0(grp_afterInit_fu_1118_regions_3_address0),
    .regions_3_ce0(grp_afterInit_fu_1118_regions_3_ce0),
    .regions_3_d0(grp_afterInit_fu_1118_regions_3_d0),
    .regions_3_q0(regions_3_q0),
    .regions_3_we0(grp_afterInit_fu_1118_regions_3_we0),
    .regions_3_address1(grp_afterInit_fu_1118_regions_3_address1),
    .regions_3_ce1(grp_afterInit_fu_1118_regions_3_ce1),
    .regions_3_d1(grp_afterInit_fu_1118_regions_3_d1),
    .regions_3_q1(regions_3_q1),
    .regions_3_we1(grp_afterInit_fu_1118_regions_3_we1),
    .regions_4_address0(grp_afterInit_fu_1118_regions_4_address0),
    .regions_4_ce0(grp_afterInit_fu_1118_regions_4_ce0),
    .regions_4_d0(grp_afterInit_fu_1118_regions_4_d0),
    .regions_4_q0(regions_4_q0),
    .regions_4_we0(grp_afterInit_fu_1118_regions_4_we0),
    .regions_4_address1(grp_afterInit_fu_1118_regions_4_address1),
    .regions_4_ce1(grp_afterInit_fu_1118_regions_4_ce1),
    .regions_4_d1(grp_afterInit_fu_1118_regions_4_d1),
    .regions_4_q1(regions_4_q1),
    .regions_4_we1(grp_afterInit_fu_1118_regions_4_we1),
    .regions_5_address0(grp_afterInit_fu_1118_regions_5_address0),
    .regions_5_ce0(grp_afterInit_fu_1118_regions_5_ce0),
    .regions_5_d0(grp_afterInit_fu_1118_regions_5_d0),
    .regions_5_q0(regions_5_q0),
    .regions_5_we0(grp_afterInit_fu_1118_regions_5_we0),
    .regions_5_address1(grp_afterInit_fu_1118_regions_5_address1),
    .regions_5_ce1(grp_afterInit_fu_1118_regions_5_ce1),
    .regions_5_d1(grp_afterInit_fu_1118_regions_5_d1),
    .regions_5_q1(regions_5_q1),
    .regions_5_we1(grp_afterInit_fu_1118_regions_5_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .inputAOV_ap_vld(1'b1),
    .startCopy_ap_vld(startCopy_ap_vld),
    .startCopy_ap_ack(grp_afterInit_fu_1118_startCopy_ap_ack),
    .copying_ap_vld(grp_afterInit_fu_1118_copying_ap_vld),
    .ap_start(grp_afterInit_fu_1118_ap_start),
    .ap_done(grp_afterInit_fu_1118_ap_done),
    .failedTask_ap_vld(grp_afterInit_fu_1118_failedTask_ap_vld),
    .failedTask_ap_ack(grp_afterInit_fu_1118_failedTask_ap_ack),
    .ap_ready(grp_afterInit_fu_1118_ap_ready),
    .ap_idle(grp_afterInit_fu_1118_ap_idle),
    .ap_continue(grp_afterInit_fu_1118_ap_continue)
);

FaultDetector_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .accel_mode(accel_mode),
    .copying(grp_afterInit_fu_1118_copying),
    .inputData(inputData),
    .startCopy(startCopy),
    .startCopy_ap_vld(startCopy_ap_vld),
    .startCopy_ap_ack(startCopy_ap_ack),
    .errorInTask_address0(grp_afterInit_fu_1118_errorInTask_address0),
    .errorInTask_ce0(grp_afterInit_fu_1118_errorInTask_ce0),
    .errorInTask_we0(grp_afterInit_fu_1118_errorInTask_we0),
    .errorInTask_d0(grp_afterInit_fu_1118_errorInTask_d0),
    .errorInTask_q0(errorInTask_q0),
    .trainedRegion_i(trainedRegion_i),
    .trainedRegion_o(trainedRegion_o),
    .IOCheckIdx(IOCheckIdx),
    .IORegionIdx(IORegionIdx),
    .n_regions_i(n_regions_i),
    .n_regions_o(n_regions_o),
    .lastTestDescriptor_address0(grp_afterInit_fu_1118_lastTestDescriptor_address0),
    .lastTestDescriptor_ce0(grp_afterInit_fu_1118_lastTestDescriptor_ce0),
    .lastTestDescriptor_we0(grp_afterInit_fu_1118_lastTestDescriptor_we0),
    .lastTestDescriptor_d0(grp_afterInit_fu_1118_lastTestDescriptor_d0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

FaultDetector_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_DW( 512 ),
    .USER_AW( 64 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(grp_afterInit_fu_1118_m_axi_gmem_ARADDR),
    .I_ARLEN(grp_afterInit_fu_1118_m_axi_gmem_ARLEN),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(512'd0),
    .I_WSTRB(64'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

FaultDetector_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U125(
    .din0(regions_q1),
    .din1(regions_1_q1),
    .din2(trunc_ln403_reg_2010),
    .dout(grp_fu_1162_p4)
);

FaultDetector_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U126(
    .din0(regions_q0),
    .din1(regions_1_q0),
    .din2(trunc_ln403_reg_2010),
    .dout(grp_fu_1171_p4)
);

FaultDetector_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U127(
    .din0(regions_2_q1),
    .din1(regions_3_q1),
    .din2(trunc_ln403_reg_2010),
    .dout(grp_fu_1180_p4)
);

FaultDetector_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U128(
    .din0(regions_2_q0),
    .din1(regions_3_q0),
    .din2(trunc_ln403_reg_2010),
    .dout(grp_fu_1189_p4)
);

FaultDetector_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U129(
    .din0(regions_4_q1),
    .din1(regions_5_q1),
    .din2(trunc_ln403_reg_2010),
    .dout(grp_fu_1198_p4)
);

FaultDetector_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U130(
    .din0(regions_4_q0),
    .din1(regions_5_q0),
    .din2(trunc_ln403_reg_2010),
    .dout(grp_fu_1207_p4)
);

FaultDetector_regslice_forward #(
    .DataWidth( 16 ))
regslice_forward_failedTask_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_afterInit_fu_1118_failedTask),
    .vld_in(grp_afterInit_fu_1118_failedTask_ap_vld),
    .ack_in(failedTask_ap_ack_int_regslice),
    .data_out(failedTask),
    .vld_out(regslice_forward_failedTask_U_vld_out),
    .ack_out(failedTask_ap_ack),
    .apdone_blk(regslice_forward_failedTask_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_afterInit_fu_1118_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_afterInit_fu_1118_ap_done <= 1'b0;
        end else if ((grp_afterInit_fu_1118_ap_done == 1'b1)) begin
            ap_sync_reg_grp_afterInit_fu_1118_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_afterInit_fu_1118_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_afterInit_fu_1118_ap_ready <= 1'b0;
        end else if ((grp_afterInit_fu_1118_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_afterInit_fu_1118_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_afterInit_fu_1118_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_afterInit_fu_1118_ap_ready == 1'b0) & (8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2)) | ((8'd3 == accel_mode) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_afterInit_fu_1118_ap_start_reg <= 1'b1;
        end else if ((grp_afterInit_fu_1118_ap_ready == 1'b1)) begin
            grp_afterInit_fu_1118_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        n_regions_o_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            n_regions_o_preg <= n_regions_V_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((8'd1 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        bitcast_ln431_10_reg_2316 <= bitcast_ln431_10_fu_1585_p1;
        bitcast_ln431_11_reg_2322 <= bitcast_ln431_11_fu_1599_p1;
        bitcast_ln431_12_reg_2328 <= bitcast_ln431_12_fu_1613_p1;
        bitcast_ln431_13_reg_2334 <= bitcast_ln431_13_fu_1627_p1;
        bitcast_ln431_14_reg_2340 <= bitcast_ln431_14_fu_1641_p1;
        bitcast_ln431_15_reg_2346 <= bitcast_ln431_15_fu_1655_p1;
        bitcast_ln431_18_reg_2352 <= bitcast_ln431_18_fu_1701_p1;
        bitcast_ln431_19_reg_2358 <= bitcast_ln431_19_fu_1715_p1;
        bitcast_ln431_20_reg_2364 <= bitcast_ln431_20_fu_1729_p1;
        bitcast_ln431_21_reg_2370 <= bitcast_ln431_21_fu_1743_p1;
        bitcast_ln431_22_reg_2376 <= bitcast_ln431_22_fu_1757_p1;
        bitcast_ln431_23_reg_2382 <= bitcast_ln431_23_fu_1771_p1;
        bitcast_ln431_2_reg_2280 <= bitcast_ln431_2_fu_1469_p1;
        bitcast_ln431_3_reg_2286 <= bitcast_ln431_3_fu_1483_p1;
        bitcast_ln431_4_reg_2292 <= bitcast_ln431_4_fu_1497_p1;
        bitcast_ln431_5_reg_2298 <= bitcast_ln431_5_fu_1511_p1;
        bitcast_ln431_6_reg_2304 <= bitcast_ln431_6_fu_1525_p1;
        bitcast_ln431_7_reg_2310 <= bitcast_ln431_7_fu_1539_p1;
        regions_1_addr_10_reg_2130[11 : 3] <= zext_ln431_4_fu_1353_p1[11 : 3];
        regions_1_addr_11_reg_2135[11 : 3] <= zext_ln431_5_fu_1369_p1[11 : 3];
        regions_1_addr_12_reg_2140[11 : 3] <= zext_ln431_6_fu_1385_p1[11 : 3];
        regions_1_addr_13_reg_2145[11 : 3] <= zext_ln431_7_fu_1401_p1[11 : 3];
        regions_1_addr_14_reg_2150[11 : 3] <= zext_ln431_8_fu_1417_p1[11 : 3];
        regions_1_addr_15_reg_2155[11 : 3] <= zext_ln431_9_fu_1433_p1[11 : 3];
        regions_2_addr_2_reg_2160[11 : 3] <= zext_ln431_4_fu_1353_p1[11 : 3];
        regions_2_addr_3_reg_2165[11 : 3] <= zext_ln431_5_fu_1369_p1[11 : 3];
        regions_2_addr_4_reg_2170[11 : 3] <= zext_ln431_6_fu_1385_p1[11 : 3];
        regions_2_addr_5_reg_2175[11 : 3] <= zext_ln431_7_fu_1401_p1[11 : 3];
        regions_2_addr_6_reg_2180[11 : 3] <= zext_ln431_8_fu_1417_p1[11 : 3];
        regions_2_addr_7_reg_2185[11 : 3] <= zext_ln431_9_fu_1433_p1[11 : 3];
        regions_3_addr_10_reg_2190[11 : 3] <= zext_ln431_4_fu_1353_p1[11 : 3];
        regions_3_addr_11_reg_2195[11 : 3] <= zext_ln431_5_fu_1369_p1[11 : 3];
        regions_3_addr_12_reg_2200[11 : 3] <= zext_ln431_6_fu_1385_p1[11 : 3];
        regions_3_addr_13_reg_2205[11 : 3] <= zext_ln431_7_fu_1401_p1[11 : 3];
        regions_3_addr_14_reg_2210[11 : 3] <= zext_ln431_8_fu_1417_p1[11 : 3];
        regions_3_addr_15_reg_2215[11 : 3] <= zext_ln431_9_fu_1433_p1[11 : 3];
        regions_4_addr_2_reg_2220[11 : 3] <= zext_ln431_4_fu_1353_p1[11 : 3];
        regions_4_addr_3_reg_2225[11 : 3] <= zext_ln431_5_fu_1369_p1[11 : 3];
        regions_4_addr_4_reg_2230[11 : 3] <= zext_ln431_6_fu_1385_p1[11 : 3];
        regions_4_addr_5_reg_2235[11 : 3] <= zext_ln431_7_fu_1401_p1[11 : 3];
        regions_4_addr_6_reg_2240[11 : 3] <= zext_ln431_8_fu_1417_p1[11 : 3];
        regions_4_addr_7_reg_2245[11 : 3] <= zext_ln431_9_fu_1433_p1[11 : 3];
        regions_5_addr_10_reg_2250[11 : 3] <= zext_ln431_4_fu_1353_p1[11 : 3];
        regions_5_addr_11_reg_2255[11 : 3] <= zext_ln431_5_fu_1369_p1[11 : 3];
        regions_5_addr_12_reg_2260[11 : 3] <= zext_ln431_6_fu_1385_p1[11 : 3];
        regions_5_addr_13_reg_2265[11 : 3] <= zext_ln431_7_fu_1401_p1[11 : 3];
        regions_5_addr_14_reg_2270[11 : 3] <= zext_ln431_8_fu_1417_p1[11 : 3];
        regions_5_addr_15_reg_2275[11 : 3] <= zext_ln431_9_fu_1433_p1[11 : 3];
        regions_addr_2_reg_2100[11 : 3] <= zext_ln431_4_fu_1353_p1[11 : 3];
        regions_addr_3_reg_2105[11 : 3] <= zext_ln431_5_fu_1369_p1[11 : 3];
        regions_addr_4_reg_2110[11 : 3] <= zext_ln431_6_fu_1385_p1[11 : 3];
        regions_addr_5_reg_2115[11 : 3] <= zext_ln431_7_fu_1401_p1[11 : 3];
        regions_addr_6_reg_2120[11 : 3] <= zext_ln431_8_fu_1417_p1[11 : 3];
        regions_addr_7_reg_2125[11 : 3] <= zext_ln431_9_fu_1433_p1[11 : 3];
        zext_ln587_reg_2095[7 : 0] <= zext_ln587_fu_1279_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        inputData_read_reg_2001 <= inputData;
        trunc_ln403_reg_2010 <= trunc_ln403_fu_1216_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        shl_ln434_reg_2020[11 : 3] <= shl_ln434_fu_1247_p2[11 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_76_reg_2448 <= grp_fu_1162_p4;
        tmp_77_reg_2453 <= grp_fu_1171_p4;
        tmp_84_reg_2458 <= grp_fu_1180_p4;
        tmp_85_reg_2463 <= grp_fu_1189_p4;
        tmp_92_reg_2468 <= grp_fu_1198_p4;
        tmp_93_reg_2473 <= grp_fu_1207_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_78_reg_2538 <= grp_fu_1162_p4;
        tmp_79_reg_2543 <= grp_fu_1171_p4;
        tmp_86_reg_2548 <= grp_fu_1180_p4;
        tmp_87_reg_2553 <= grp_fu_1189_p4;
        tmp_94_reg_2558 <= grp_fu_1198_p4;
        tmp_95_reg_2563 <= grp_fu_1207_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_80_reg_2628 <= grp_fu_1162_p4;
        tmp_81_reg_2633 <= grp_fu_1171_p4;
        tmp_88_reg_2638 <= grp_fu_1180_p4;
        tmp_89_reg_2643 <= grp_fu_1189_p4;
        tmp_96_reg_2648 <= grp_fu_1198_p4;
        tmp_97_reg_2653 <= grp_fu_1207_p4;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((regslice_forward_failedTask_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((regslice_forward_failedTask_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_forward_failedTask_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2)) | ((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state1)))) begin
        gmem_ARVALID = grp_afterInit_fu_1118_m_axi_gmem_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2)) | ((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state1)))) begin
        gmem_RREADY = grp_afterInit_fu_1118_m_axi_gmem_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_afterInit_fu_1118_ap_continue = 1'b1;
    end else begin
        grp_afterInit_fu_1118_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        n_regions_V_address0 = zext_ln587_reg_2095;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        n_regions_V_address0 = zext_ln587_2_fu_1220_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        n_regions_V_address0 = grp_afterInit_fu_1118_n_regions_V_address0;
    end else begin
        n_regions_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        n_regions_V_ce0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        n_regions_V_ce0 = grp_afterInit_fu_1118_n_regions_V_ce0;
    end else begin
        n_regions_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        n_regions_V_d0 = n_regions_i;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        n_regions_V_d0 = grp_afterInit_fu_1118_n_regions_V_d0;
    end else begin
        n_regions_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        n_regions_V_we0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        n_regions_V_we0 = grp_afterInit_fu_1118_n_regions_V_we0;
    end else begin
        n_regions_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_regions_o = n_regions_V_q0;
    end else begin
        n_regions_o = n_regions_o_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_1_address0 = regions_1_addr_13_reg_2145;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_1_address0 = regions_1_addr_11_reg_2135;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_1_address0 = regions_1_addr_15_reg_2155;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_1_address0 = zext_ln434_9_fu_1855_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_1_address0 = zext_ln434_7_fu_1825_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_1_address0 = zext_ln434_5_fu_1795_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_1_address0 = zext_ln431_3_fu_1337_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_1_address0 = zext_ln434_3_fu_1269_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_address0 = grp_afterInit_fu_1118_regions_1_address0;
    end else begin
        regions_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_1_address1 = regions_1_addr_12_reg_2140;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_1_address1 = regions_1_addr_10_reg_2130;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_1_address1 = regions_1_addr_14_reg_2150;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_1_address1 = zext_ln434_8_fu_1840_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_1_address1 = zext_ln434_6_fu_1810_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_1_address1 = zext_ln434_4_fu_1780_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_1_address1 = zext_ln431_2_fu_1321_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_1_address1 = zext_ln434_2_fu_1253_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_address1 = grp_afterInit_fu_1118_regions_1_address1;
    end else begin
        regions_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_1_ce0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_ce0 = grp_afterInit_fu_1118_regions_1_ce0;
    end else begin
        regions_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_1_ce1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_ce1 = grp_afterInit_fu_1118_regions_1_ce1;
    end else begin
        regions_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_1_d0 = bitcast_ln431_5_reg_2298;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_1_d0 = bitcast_ln431_3_reg_2286;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_1_d0 = bitcast_ln431_7_reg_2310;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_1_d0 = bitcast_ln431_1_fu_1453_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_d0 = grp_afterInit_fu_1118_regions_1_d0;
    end else begin
        regions_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_1_d1 = bitcast_ln431_4_reg_2292;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_1_d1 = bitcast_ln431_2_reg_2280;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_1_d1 = bitcast_ln431_6_reg_2304;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_1_d1 = bitcast_ln431_fu_1299_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_d1 = grp_afterInit_fu_1118_regions_1_d1;
    end else begin
        regions_1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((trunc_ln403_reg_2010 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_1_we0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_we0 = grp_afterInit_fu_1118_regions_1_we0;
    end else begin
        regions_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((trunc_ln403_reg_2010 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_1_we1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_1_we1 = grp_afterInit_fu_1118_regions_1_we1;
    end else begin
        regions_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_2_address0 = regions_2_addr_7_reg_2185;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_2_address0 = regions_2_addr_5_reg_2175;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_2_address0 = regions_2_addr_3_reg_2165;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_2_address0 = zext_ln434_9_fu_1855_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_2_address0 = zext_ln434_7_fu_1825_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_2_address0 = zext_ln434_5_fu_1795_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_2_address0 = zext_ln431_3_fu_1337_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_2_address0 = zext_ln434_3_fu_1269_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_address0 = grp_afterInit_fu_1118_regions_2_address0;
    end else begin
        regions_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_2_address1 = regions_2_addr_6_reg_2180;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_2_address1 = regions_2_addr_4_reg_2170;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_2_address1 = regions_2_addr_2_reg_2160;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_2_address1 = zext_ln434_8_fu_1840_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_2_address1 = zext_ln434_6_fu_1810_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_2_address1 = zext_ln434_4_fu_1780_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_2_address1 = zext_ln431_2_fu_1321_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_2_address1 = zext_ln434_2_fu_1253_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_address1 = grp_afterInit_fu_1118_regions_2_address1;
    end else begin
        regions_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_2_ce0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_ce0 = grp_afterInit_fu_1118_regions_2_ce0;
    end else begin
        regions_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_2_ce1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_ce1 = grp_afterInit_fu_1118_regions_2_ce1;
    end else begin
        regions_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_2_d0 = bitcast_ln431_15_reg_2346;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_2_d0 = bitcast_ln431_13_reg_2334;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_2_d0 = bitcast_ln431_11_reg_2322;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_2_d0 = bitcast_ln431_9_fu_1569_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_d0 = grp_afterInit_fu_1118_regions_2_d0;
    end else begin
        regions_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_2_d1 = bitcast_ln431_14_reg_2340;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_2_d1 = bitcast_ln431_12_reg_2328;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_2_d1 = bitcast_ln431_10_reg_2316;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_2_d1 = bitcast_ln431_8_fu_1553_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_d1 = grp_afterInit_fu_1118_regions_2_d1;
    end else begin
        regions_2_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((trunc_ln403_reg_2010 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_2_we0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_we0 = grp_afterInit_fu_1118_regions_2_we0;
    end else begin
        regions_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((trunc_ln403_reg_2010 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_2_we1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_2_we1 = grp_afterInit_fu_1118_regions_2_we1;
    end else begin
        regions_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_3_address0 = regions_3_addr_13_reg_2205;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_3_address0 = regions_3_addr_11_reg_2195;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_3_address0 = regions_3_addr_15_reg_2215;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_3_address0 = zext_ln434_9_fu_1855_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_3_address0 = zext_ln434_7_fu_1825_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_3_address0 = zext_ln434_5_fu_1795_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_3_address0 = zext_ln431_3_fu_1337_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_3_address0 = zext_ln434_3_fu_1269_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_address0 = grp_afterInit_fu_1118_regions_3_address0;
    end else begin
        regions_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_3_address1 = regions_3_addr_12_reg_2200;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_3_address1 = regions_3_addr_10_reg_2190;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_3_address1 = regions_3_addr_14_reg_2210;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_3_address1 = zext_ln434_8_fu_1840_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_3_address1 = zext_ln434_6_fu_1810_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_3_address1 = zext_ln434_4_fu_1780_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_3_address1 = zext_ln431_2_fu_1321_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_3_address1 = zext_ln434_2_fu_1253_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_address1 = grp_afterInit_fu_1118_regions_3_address1;
    end else begin
        regions_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_3_ce0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_ce0 = grp_afterInit_fu_1118_regions_3_ce0;
    end else begin
        regions_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_3_ce1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_ce1 = grp_afterInit_fu_1118_regions_3_ce1;
    end else begin
        regions_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_3_d0 = bitcast_ln431_13_reg_2334;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_3_d0 = bitcast_ln431_11_reg_2322;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_3_d0 = bitcast_ln431_15_reg_2346;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_3_d0 = bitcast_ln431_9_fu_1569_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_d0 = grp_afterInit_fu_1118_regions_3_d0;
    end else begin
        regions_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_3_d1 = bitcast_ln431_12_reg_2328;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_3_d1 = bitcast_ln431_10_reg_2316;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_3_d1 = bitcast_ln431_14_reg_2340;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_3_d1 = bitcast_ln431_8_fu_1553_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_d1 = grp_afterInit_fu_1118_regions_3_d1;
    end else begin
        regions_3_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((trunc_ln403_reg_2010 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_3_we0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_we0 = grp_afterInit_fu_1118_regions_3_we0;
    end else begin
        regions_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((trunc_ln403_reg_2010 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_3_we1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_3_we1 = grp_afterInit_fu_1118_regions_3_we1;
    end else begin
        regions_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_4_address0 = regions_4_addr_7_reg_2245;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_4_address0 = regions_4_addr_5_reg_2235;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_4_address0 = regions_4_addr_3_reg_2225;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_4_address0 = zext_ln434_9_fu_1855_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_4_address0 = zext_ln434_7_fu_1825_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_4_address0 = zext_ln434_5_fu_1795_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_4_address0 = zext_ln431_3_fu_1337_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_4_address0 = zext_ln434_3_fu_1269_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_address0 = grp_afterInit_fu_1118_regions_4_address0;
    end else begin
        regions_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_4_address1 = regions_4_addr_6_reg_2240;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_4_address1 = regions_4_addr_4_reg_2230;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_4_address1 = regions_4_addr_2_reg_2220;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_4_address1 = zext_ln434_8_fu_1840_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_4_address1 = zext_ln434_6_fu_1810_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_4_address1 = zext_ln434_4_fu_1780_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_4_address1 = zext_ln431_2_fu_1321_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_4_address1 = zext_ln434_2_fu_1253_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_address1 = grp_afterInit_fu_1118_regions_4_address1;
    end else begin
        regions_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_4_ce0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_ce0 = grp_afterInit_fu_1118_regions_4_ce0;
    end else begin
        regions_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_4_ce1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_ce1 = grp_afterInit_fu_1118_regions_4_ce1;
    end else begin
        regions_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_4_d0 = bitcast_ln431_23_reg_2382;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_4_d0 = bitcast_ln431_21_reg_2370;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_4_d0 = bitcast_ln431_19_reg_2358;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_4_d0 = bitcast_ln431_17_fu_1685_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_d0 = grp_afterInit_fu_1118_regions_4_d0;
    end else begin
        regions_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_4_d1 = bitcast_ln431_22_reg_2376;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_4_d1 = bitcast_ln431_20_reg_2364;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_4_d1 = bitcast_ln431_18_reg_2352;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_4_d1 = bitcast_ln431_16_fu_1669_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_d1 = grp_afterInit_fu_1118_regions_4_d1;
    end else begin
        regions_4_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((trunc_ln403_reg_2010 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_4_we0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_we0 = grp_afterInit_fu_1118_regions_4_we0;
    end else begin
        regions_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((trunc_ln403_reg_2010 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_4_we1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_4_we1 = grp_afterInit_fu_1118_regions_4_we1;
    end else begin
        regions_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_5_address0 = regions_5_addr_13_reg_2265;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_5_address0 = regions_5_addr_11_reg_2255;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_5_address0 = regions_5_addr_15_reg_2275;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_5_address0 = zext_ln434_9_fu_1855_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_5_address0 = zext_ln434_7_fu_1825_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_5_address0 = zext_ln434_5_fu_1795_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_5_address0 = zext_ln431_3_fu_1337_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_5_address0 = zext_ln434_3_fu_1269_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_address0 = grp_afterInit_fu_1118_regions_5_address0;
    end else begin
        regions_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_5_address1 = regions_5_addr_12_reg_2260;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_5_address1 = regions_5_addr_10_reg_2250;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_5_address1 = regions_5_addr_14_reg_2270;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_5_address1 = zext_ln434_8_fu_1840_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_5_address1 = zext_ln434_6_fu_1810_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_5_address1 = zext_ln434_4_fu_1780_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_5_address1 = zext_ln431_2_fu_1321_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_5_address1 = zext_ln434_2_fu_1253_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_address1 = grp_afterInit_fu_1118_regions_5_address1;
    end else begin
        regions_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_5_ce0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_ce0 = grp_afterInit_fu_1118_regions_5_ce0;
    end else begin
        regions_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_5_ce1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_ce1 = grp_afterInit_fu_1118_regions_5_ce1;
    end else begin
        regions_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_5_d0 = bitcast_ln431_21_reg_2370;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_5_d0 = bitcast_ln431_19_reg_2358;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_5_d0 = bitcast_ln431_23_reg_2382;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_5_d0 = bitcast_ln431_17_fu_1685_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_d0 = grp_afterInit_fu_1118_regions_5_d0;
    end else begin
        regions_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        regions_5_d1 = bitcast_ln431_20_reg_2364;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        regions_5_d1 = bitcast_ln431_18_reg_2352;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_5_d1 = bitcast_ln431_22_reg_2376;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_5_d1 = bitcast_ln431_16_fu_1669_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_d1 = grp_afterInit_fu_1118_regions_5_d1;
    end else begin
        regions_5_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((trunc_ln403_reg_2010 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_5_we0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_we0 = grp_afterInit_fu_1118_regions_5_we0;
    end else begin
        regions_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | ((trunc_ln403_reg_2010 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_5_we1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_5_we1 = grp_afterInit_fu_1118_regions_5_we1;
    end else begin
        regions_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_address0 = regions_addr_7_reg_2125;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_address0 = regions_addr_5_reg_2115;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_address0 = regions_addr_3_reg_2105;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_address0 = zext_ln434_9_fu_1855_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_address0 = zext_ln434_7_fu_1825_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_address0 = zext_ln434_5_fu_1795_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_address0 = zext_ln431_3_fu_1337_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_address0 = zext_ln434_3_fu_1269_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_address0 = grp_afterInit_fu_1118_regions_address0;
    end else begin
        regions_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_address1 = regions_addr_6_reg_2120;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_address1 = regions_addr_4_reg_2110;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_address1 = regions_addr_2_reg_2100;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        regions_address1 = zext_ln434_8_fu_1840_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regions_address1 = zext_ln434_6_fu_1810_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regions_address1 = zext_ln434_4_fu_1780_p1;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_address1 = zext_ln431_2_fu_1321_p1;
    end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_address1 = zext_ln434_2_fu_1253_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_address1 = grp_afterInit_fu_1118_regions_address1;
    end else begin
        regions_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_ce0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_ce0 = grp_afterInit_fu_1118_regions_ce0;
    end else begin
        regions_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_ce1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_ce1 = grp_afterInit_fu_1118_regions_ce1;
    end else begin
        regions_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_d0 = bitcast_ln431_7_reg_2310;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_d0 = bitcast_ln431_5_reg_2298;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_d0 = bitcast_ln431_3_reg_2286;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_d0 = bitcast_ln431_1_fu_1453_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_d0 = grp_afterInit_fu_1118_regions_d0;
    end else begin
        regions_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        regions_d1 = bitcast_ln431_6_reg_2304;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        regions_d1 = bitcast_ln431_4_reg_2292;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        regions_d1 = bitcast_ln431_2_reg_2280;
    end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regions_d1 = bitcast_ln431_fu_1299_p1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_d1 = grp_afterInit_fu_1118_regions_d1;
    end else begin
        regions_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((trunc_ln403_reg_2010 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_we0 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_we0 = grp_afterInit_fu_1118_regions_we0;
    end else begin
        regions_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((trunc_ln403_reg_2010 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regions_we1 = 1'b1;
    end else if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        regions_we1 = grp_afterInit_fu_1118_regions_we1;
    end else begin
        regions_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((8'd3 == accel_mode) & (1'b1 == ap_CS_fsm_state2))) begin
        startCopy_ap_ack = grp_afterInit_fu_1118_startCopy_ap_ack;
    end else begin
        startCopy_ap_ack = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((8'd1 == accel_mode_read_read_fu_290_p2) & (trunc_ln403_fu_1216_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~(8'd1 == accel_mode_read_read_fu_290_p2) & ~(8'd2 == accel_mode_read_read_fu_290_p2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(8'd1 == accel_mode_read_read_fu_290_p2) & ~(8'd2 == accel_mode_read_read_fu_290_p2) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((regslice_forward_failedTask_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accel_mode_read_read_fu_290_p2 = accel_mode;

assign add_ln431_fu_1309_p2 = (zext_ln431_fu_1291_p1 + zext_ln431_1_fu_1305_p1);

assign add_ln434_fu_1241_p2 = (zext_ln434_fu_1233_p1 + zext_ln434_1_fu_1237_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = (((ap_sync_grp_afterInit_fu_1118_ap_ready & ap_sync_grp_afterInit_fu_1118_ap_done) == 1'b0) & (8'd3 == accel_mode));
end

assign ap_sync_grp_afterInit_fu_1118_ap_done = (grp_afterInit_fu_1118_ap_done | ap_sync_reg_grp_afterInit_fu_1118_ap_done);

assign ap_sync_grp_afterInit_fu_1118_ap_ready = (grp_afterInit_fu_1118_ap_ready | ap_sync_reg_grp_afterInit_fu_1118_ap_ready);

assign bitcast_ln431_10_fu_1585_p1 = tmp_136_fu_1575_p4;

assign bitcast_ln431_11_fu_1599_p1 = tmp_137_fu_1589_p4;

assign bitcast_ln431_12_fu_1613_p1 = tmp_138_fu_1603_p4;

assign bitcast_ln431_13_fu_1627_p1 = tmp_139_fu_1617_p4;

assign bitcast_ln431_14_fu_1641_p1 = tmp_140_fu_1631_p4;

assign bitcast_ln431_15_fu_1655_p1 = tmp_141_fu_1645_p4;

assign bitcast_ln431_16_fu_1669_p1 = tmp_142_fu_1659_p4;

assign bitcast_ln431_17_fu_1685_p1 = tmp_143_fu_1675_p4;

assign bitcast_ln431_18_fu_1701_p1 = tmp_144_fu_1691_p4;

assign bitcast_ln431_19_fu_1715_p1 = tmp_145_fu_1705_p4;

assign bitcast_ln431_1_fu_1453_p1 = tmp_fu_1443_p4;

assign bitcast_ln431_20_fu_1729_p1 = tmp_146_fu_1719_p4;

assign bitcast_ln431_21_fu_1743_p1 = tmp_147_fu_1733_p4;

assign bitcast_ln431_22_fu_1757_p1 = tmp_148_fu_1747_p4;

assign bitcast_ln431_23_fu_1771_p1 = tmp_149_fu_1761_p4;

assign bitcast_ln431_2_fu_1469_p1 = tmp_32_fu_1459_p4;

assign bitcast_ln431_3_fu_1483_p1 = tmp_129_fu_1473_p4;

assign bitcast_ln431_4_fu_1497_p1 = tmp_130_fu_1487_p4;

assign bitcast_ln431_5_fu_1511_p1 = tmp_131_fu_1501_p4;

assign bitcast_ln431_6_fu_1525_p1 = tmp_132_fu_1515_p4;

assign bitcast_ln431_7_fu_1539_p1 = tmp_133_fu_1529_p4;

assign bitcast_ln431_8_fu_1553_p1 = tmp_134_fu_1543_p4;

assign bitcast_ln431_9_fu_1569_p1 = tmp_135_fu_1559_p4;

assign bitcast_ln431_fu_1299_p1 = trunc_ln431_fu_1295_p1;

assign bitcast_ln434_10_fu_1897_p1 = tmp_86_reg_2548;

assign bitcast_ln434_11_fu_1900_p1 = tmp_87_reg_2553;

assign bitcast_ln434_12_fu_1903_p1 = tmp_88_reg_2638;

assign bitcast_ln434_13_fu_1906_p1 = tmp_89_reg_2643;

assign bitcast_ln434_14_fu_1909_p1 = grp_fu_1180_p4;

assign bitcast_ln434_15_fu_1913_p1 = grp_fu_1189_p4;

assign bitcast_ln434_16_fu_1917_p1 = tmp_92_reg_2468;

assign bitcast_ln434_17_fu_1920_p1 = tmp_93_reg_2473;

assign bitcast_ln434_18_fu_1923_p1 = tmp_94_reg_2558;

assign bitcast_ln434_19_fu_1926_p1 = tmp_95_reg_2563;

assign bitcast_ln434_1_fu_1868_p1 = tmp_77_reg_2453;

assign bitcast_ln434_20_fu_1929_p1 = tmp_96_reg_2648;

assign bitcast_ln434_21_fu_1932_p1 = tmp_97_reg_2653;

assign bitcast_ln434_22_fu_1935_p1 = grp_fu_1198_p4;

assign bitcast_ln434_23_fu_1939_p1 = grp_fu_1207_p4;

assign bitcast_ln434_2_fu_1871_p1 = tmp_78_reg_2538;

assign bitcast_ln434_3_fu_1874_p1 = tmp_79_reg_2543;

assign bitcast_ln434_4_fu_1877_p1 = tmp_80_reg_2628;

assign bitcast_ln434_5_fu_1880_p1 = tmp_81_reg_2633;

assign bitcast_ln434_6_fu_1883_p1 = grp_fu_1162_p4;

assign bitcast_ln434_7_fu_1887_p1 = grp_fu_1171_p4;

assign bitcast_ln434_8_fu_1891_p1 = tmp_84_reg_2458;

assign bitcast_ln434_9_fu_1894_p1 = tmp_85_reg_2463;

assign bitcast_ln434_fu_1865_p1 = tmp_76_reg_2448;

assign failedTask_ap_vld = regslice_forward_failedTask_U_vld_out;

assign grp_afterInit_fu_1118_ap_start = grp_afterInit_fu_1118_ap_start_reg;

assign grp_afterInit_fu_1118_failedTask_ap_ack = (failedTask_ap_ack_int_regslice & ap_CS_fsm_state2);

assign grp_fu_1152_p4 = {{IORegionIdx[7:1]}};

assign or_ln431_1_fu_1347_p2 = (shl_ln431_fu_1315_p2 | 12'd2);

assign or_ln431_2_fu_1363_p2 = (shl_ln431_fu_1315_p2 | 12'd3);

assign or_ln431_3_fu_1379_p2 = (shl_ln431_fu_1315_p2 | 12'd4);

assign or_ln431_4_fu_1395_p2 = (shl_ln431_fu_1315_p2 | 12'd5);

assign or_ln431_5_fu_1411_p2 = (shl_ln431_fu_1315_p2 | 12'd6);

assign or_ln431_6_fu_1427_p2 = (shl_ln431_fu_1315_p2 | 12'd7);

assign or_ln431_fu_1331_p2 = (shl_ln431_fu_1315_p2 | 12'd1);

assign or_ln434_1_fu_1775_p2 = (shl_ln434_reg_2020 | 12'd2);

assign or_ln434_2_fu_1790_p2 = (shl_ln434_reg_2020 | 12'd3);

assign or_ln434_3_fu_1805_p2 = (shl_ln434_reg_2020 | 12'd4);

assign or_ln434_4_fu_1820_p2 = (shl_ln434_reg_2020 | 12'd5);

assign or_ln434_5_fu_1835_p2 = (shl_ln434_reg_2020 | 12'd6);

assign or_ln434_6_fu_1850_p2 = (shl_ln434_reg_2020 | 12'd7);

assign or_ln434_fu_1263_p2 = (shl_ln434_fu_1247_p2 | 12'd1);

assign shl_ln431_fu_1315_p2 = add_ln431_fu_1309_p2 << 12'd3;

assign shl_ln434_fu_1247_p2 = add_ln434_fu_1241_p2 << 12'd3;

assign tmp_129_fu_1473_p4 = {{trainedRegion_i[127:96]}};

assign tmp_130_fu_1487_p4 = {{trainedRegion_i[159:128]}};

assign tmp_131_fu_1501_p4 = {{trainedRegion_i[191:160]}};

assign tmp_132_fu_1515_p4 = {{trainedRegion_i[223:192]}};

assign tmp_133_fu_1529_p4 = {{trainedRegion_i[255:224]}};

assign tmp_134_fu_1543_p4 = {{trainedRegion_i[287:256]}};

assign tmp_135_fu_1559_p4 = {{trainedRegion_i[319:288]}};

assign tmp_136_fu_1575_p4 = {{trainedRegion_i[351:320]}};

assign tmp_137_fu_1589_p4 = {{trainedRegion_i[383:352]}};

assign tmp_138_fu_1603_p4 = {{trainedRegion_i[415:384]}};

assign tmp_139_fu_1617_p4 = {{trainedRegion_i[447:416]}};

assign tmp_140_fu_1631_p4 = {{trainedRegion_i[479:448]}};

assign tmp_141_fu_1645_p4 = {{trainedRegion_i[511:480]}};

assign tmp_142_fu_1659_p4 = {{trainedRegion_i[543:512]}};

assign tmp_143_fu_1675_p4 = {{trainedRegion_i[575:544]}};

assign tmp_144_fu_1691_p4 = {{trainedRegion_i[607:576]}};

assign tmp_145_fu_1705_p4 = {{trainedRegion_i[639:608]}};

assign tmp_146_fu_1719_p4 = {{trainedRegion_i[671:640]}};

assign tmp_147_fu_1733_p4 = {{trainedRegion_i[703:672]}};

assign tmp_148_fu_1747_p4 = {{trainedRegion_i[735:704]}};

assign tmp_149_fu_1761_p4 = {{trainedRegion_i[767:736]}};

assign tmp_150_fu_1225_p3 = {{IOCheckIdx}, {3'd0}};

assign tmp_32_fu_1459_p4 = {{trainedRegion_i[95:64]}};

assign tmp_fu_1443_p4 = {{trainedRegion_i[63:32]}};

assign tmp_s_fu_1283_p3 = {{IOCheckIdx}, {3'd0}};

assign trainedRegion_o = {{{{{{{{{{{{{{{{{{{{{{{{bitcast_ln434_23_fu_1939_p1}, {bitcast_ln434_22_fu_1935_p1}}, {bitcast_ln434_21_fu_1932_p1}}, {bitcast_ln434_20_fu_1929_p1}}, {bitcast_ln434_19_fu_1926_p1}}, {bitcast_ln434_18_fu_1923_p1}}, {bitcast_ln434_17_fu_1920_p1}}, {bitcast_ln434_16_fu_1917_p1}}, {bitcast_ln434_15_fu_1913_p1}}, {bitcast_ln434_14_fu_1909_p1}}, {bitcast_ln434_13_fu_1906_p1}}, {bitcast_ln434_12_fu_1903_p1}}, {bitcast_ln434_11_fu_1900_p1}}, {bitcast_ln434_10_fu_1897_p1}}, {bitcast_ln434_9_fu_1894_p1}}, {bitcast_ln434_8_fu_1891_p1}}, {bitcast_ln434_7_fu_1887_p1}}, {bitcast_ln434_6_fu_1883_p1}}, {bitcast_ln434_5_fu_1880_p1}}, {bitcast_ln434_4_fu_1877_p1}}, {bitcast_ln434_3_fu_1874_p1}}, {bitcast_ln434_2_fu_1871_p1}}, {bitcast_ln434_1_fu_1868_p1}}, {bitcast_ln434_fu_1865_p1}};

assign trunc_ln403_fu_1216_p1 = IORegionIdx[0:0];

assign trunc_ln431_fu_1295_p1 = trainedRegion_i[31:0];

assign zext_ln431_1_fu_1305_p1 = grp_fu_1152_p4;

assign zext_ln431_2_fu_1321_p1 = shl_ln431_fu_1315_p2;

assign zext_ln431_3_fu_1337_p1 = or_ln431_fu_1331_p2;

assign zext_ln431_4_fu_1353_p1 = or_ln431_1_fu_1347_p2;

assign zext_ln431_5_fu_1369_p1 = or_ln431_2_fu_1363_p2;

assign zext_ln431_6_fu_1385_p1 = or_ln431_3_fu_1379_p2;

assign zext_ln431_7_fu_1401_p1 = or_ln431_4_fu_1395_p2;

assign zext_ln431_8_fu_1417_p1 = or_ln431_5_fu_1411_p2;

assign zext_ln431_9_fu_1433_p1 = or_ln431_6_fu_1427_p2;

assign zext_ln431_fu_1291_p1 = tmp_s_fu_1283_p3;

assign zext_ln434_1_fu_1237_p1 = grp_fu_1152_p4;

assign zext_ln434_2_fu_1253_p1 = shl_ln434_fu_1247_p2;

assign zext_ln434_3_fu_1269_p1 = or_ln434_fu_1263_p2;

assign zext_ln434_4_fu_1780_p1 = or_ln434_1_fu_1775_p2;

assign zext_ln434_5_fu_1795_p1 = or_ln434_2_fu_1790_p2;

assign zext_ln434_6_fu_1810_p1 = or_ln434_3_fu_1805_p2;

assign zext_ln434_7_fu_1825_p1 = or_ln434_4_fu_1820_p2;

assign zext_ln434_8_fu_1840_p1 = or_ln434_5_fu_1835_p2;

assign zext_ln434_9_fu_1855_p1 = or_ln434_6_fu_1850_p2;

assign zext_ln434_fu_1233_p1 = tmp_150_fu_1225_p3;

assign zext_ln587_2_fu_1220_p1 = IOCheckIdx;

assign zext_ln587_fu_1279_p1 = IOCheckIdx;

always @ (posedge ap_clk) begin
    shl_ln434_reg_2020[2:0] <= 3'b000;
    zext_ln587_reg_2095[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    regions_addr_2_reg_2100[2:0] <= 3'b010;
    regions_addr_3_reg_2105[2:0] <= 3'b011;
    regions_addr_4_reg_2110[2:0] <= 3'b100;
    regions_addr_5_reg_2115[2:0] <= 3'b101;
    regions_addr_6_reg_2120[2:0] <= 3'b110;
    regions_addr_7_reg_2125[2:0] <= 3'b111;
    regions_1_addr_10_reg_2130[2:0] <= 3'b010;
    regions_1_addr_11_reg_2135[2:0] <= 3'b011;
    regions_1_addr_12_reg_2140[2:0] <= 3'b100;
    regions_1_addr_13_reg_2145[2:0] <= 3'b101;
    regions_1_addr_14_reg_2150[2:0] <= 3'b110;
    regions_1_addr_15_reg_2155[2:0] <= 3'b111;
    regions_2_addr_2_reg_2160[2:0] <= 3'b010;
    regions_2_addr_3_reg_2165[2:0] <= 3'b011;
    regions_2_addr_4_reg_2170[2:0] <= 3'b100;
    regions_2_addr_5_reg_2175[2:0] <= 3'b101;
    regions_2_addr_6_reg_2180[2:0] <= 3'b110;
    regions_2_addr_7_reg_2185[2:0] <= 3'b111;
    regions_3_addr_10_reg_2190[2:0] <= 3'b010;
    regions_3_addr_11_reg_2195[2:0] <= 3'b011;
    regions_3_addr_12_reg_2200[2:0] <= 3'b100;
    regions_3_addr_13_reg_2205[2:0] <= 3'b101;
    regions_3_addr_14_reg_2210[2:0] <= 3'b110;
    regions_3_addr_15_reg_2215[2:0] <= 3'b111;
    regions_4_addr_2_reg_2220[2:0] <= 3'b010;
    regions_4_addr_3_reg_2225[2:0] <= 3'b011;
    regions_4_addr_4_reg_2230[2:0] <= 3'b100;
    regions_4_addr_5_reg_2235[2:0] <= 3'b101;
    regions_4_addr_6_reg_2240[2:0] <= 3'b110;
    regions_4_addr_7_reg_2245[2:0] <= 3'b111;
    regions_5_addr_10_reg_2250[2:0] <= 3'b010;
    regions_5_addr_11_reg_2255[2:0] <= 3'b011;
    regions_5_addr_12_reg_2260[2:0] <= 3'b100;
    regions_5_addr_13_reg_2265[2:0] <= 3'b101;
    regions_5_addr_14_reg_2270[2:0] <= 3'b110;
    regions_5_addr_15_reg_2275[2:0] <= 3'b111;
end


reg find_df_deadlock = 0;
// synthesis translate_off
`include "FaultDetector_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //FaultDetector

