// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_read_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        sourceStream_din,
        sourceStream_num_data_valid,
        sourceStream_fifo_cap,
        sourceStream_full_n,
        sourceStream_write,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        inputAOV,
        startCopy,
        startCopy_ap_vld,
        startCopy_ap_ack
);

parameter    ap_ST_fsm_state1 = 152'd1;
parameter    ap_ST_fsm_state2 = 152'd2;
parameter    ap_ST_fsm_state3 = 152'd4;
parameter    ap_ST_fsm_state4 = 152'd8;
parameter    ap_ST_fsm_state5 = 152'd16;
parameter    ap_ST_fsm_state6 = 152'd32;
parameter    ap_ST_fsm_state7 = 152'd64;
parameter    ap_ST_fsm_state8 = 152'd128;
parameter    ap_ST_fsm_state9 = 152'd256;
parameter    ap_ST_fsm_state10 = 152'd512;
parameter    ap_ST_fsm_state11 = 152'd1024;
parameter    ap_ST_fsm_state12 = 152'd2048;
parameter    ap_ST_fsm_state13 = 152'd4096;
parameter    ap_ST_fsm_state14 = 152'd8192;
parameter    ap_ST_fsm_state15 = 152'd16384;
parameter    ap_ST_fsm_state16 = 152'd32768;
parameter    ap_ST_fsm_state17 = 152'd65536;
parameter    ap_ST_fsm_state18 = 152'd131072;
parameter    ap_ST_fsm_state19 = 152'd262144;
parameter    ap_ST_fsm_state20 = 152'd524288;
parameter    ap_ST_fsm_state21 = 152'd1048576;
parameter    ap_ST_fsm_state22 = 152'd2097152;
parameter    ap_ST_fsm_state23 = 152'd4194304;
parameter    ap_ST_fsm_state24 = 152'd8388608;
parameter    ap_ST_fsm_state25 = 152'd16777216;
parameter    ap_ST_fsm_state26 = 152'd33554432;
parameter    ap_ST_fsm_state27 = 152'd67108864;
parameter    ap_ST_fsm_state28 = 152'd134217728;
parameter    ap_ST_fsm_state29 = 152'd268435456;
parameter    ap_ST_fsm_state30 = 152'd536870912;
parameter    ap_ST_fsm_state31 = 152'd1073741824;
parameter    ap_ST_fsm_state32 = 152'd2147483648;
parameter    ap_ST_fsm_state33 = 152'd4294967296;
parameter    ap_ST_fsm_state34 = 152'd8589934592;
parameter    ap_ST_fsm_state35 = 152'd17179869184;
parameter    ap_ST_fsm_state36 = 152'd34359738368;
parameter    ap_ST_fsm_state37 = 152'd68719476736;
parameter    ap_ST_fsm_state38 = 152'd137438953472;
parameter    ap_ST_fsm_state39 = 152'd274877906944;
parameter    ap_ST_fsm_state40 = 152'd549755813888;
parameter    ap_ST_fsm_state41 = 152'd1099511627776;
parameter    ap_ST_fsm_state42 = 152'd2199023255552;
parameter    ap_ST_fsm_state43 = 152'd4398046511104;
parameter    ap_ST_fsm_state44 = 152'd8796093022208;
parameter    ap_ST_fsm_state45 = 152'd17592186044416;
parameter    ap_ST_fsm_state46 = 152'd35184372088832;
parameter    ap_ST_fsm_state47 = 152'd70368744177664;
parameter    ap_ST_fsm_state48 = 152'd140737488355328;
parameter    ap_ST_fsm_state49 = 152'd281474976710656;
parameter    ap_ST_fsm_state50 = 152'd562949953421312;
parameter    ap_ST_fsm_state51 = 152'd1125899906842624;
parameter    ap_ST_fsm_state52 = 152'd2251799813685248;
parameter    ap_ST_fsm_state53 = 152'd4503599627370496;
parameter    ap_ST_fsm_state54 = 152'd9007199254740992;
parameter    ap_ST_fsm_state55 = 152'd18014398509481984;
parameter    ap_ST_fsm_state56 = 152'd36028797018963968;
parameter    ap_ST_fsm_state57 = 152'd72057594037927936;
parameter    ap_ST_fsm_state58 = 152'd144115188075855872;
parameter    ap_ST_fsm_state59 = 152'd288230376151711744;
parameter    ap_ST_fsm_state60 = 152'd576460752303423488;
parameter    ap_ST_fsm_state61 = 152'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 152'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 152'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 152'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 152'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 152'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 152'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 152'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 152'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 152'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 152'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 152'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 152'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 152'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 152'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 152'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 152'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 152'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 152'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 152'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 152'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 152'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 152'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 152'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 152'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 152'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 152'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 152'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 152'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 152'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 152'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 152'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 152'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 152'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 152'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 152'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 152'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 152'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 152'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 152'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 152'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 152'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 152'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 152'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 152'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 152'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 152'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 152'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 152'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 152'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 152'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 152'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 152'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 152'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 152'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 152'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 152'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 152'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 152'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 152'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 152'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 152'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 152'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 152'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 152'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 152'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 152'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 152'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 152'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 152'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 152'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 152'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 152'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 152'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 152'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 152'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 152'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 152'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 152'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 152'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 152'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 152'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 152'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 152'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 152'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 152'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 152'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 152'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 152'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 152'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 152'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 152'd2854495385411919762116571938898990272765493248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [319:0] sourceStream_din;
input  [1:0] sourceStream_num_data_valid;
input  [1:0] sourceStream_fifo_cap;
input   sourceStream_full_n;
output   sourceStream_write;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] inputAOV;
input  [7:0] startCopy;
input   startCopy_ap_vld;
output   startCopy_ap_ack;

reg ap_idle;
reg sourceStream_write;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg startCopy_ap_ack;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [151:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    sourceStream_blk_n;
wire    ap_CS_fsm_state152;
reg   [0:0] icmp_ln539_reg_642;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state147;
reg    startCopy_blk_n;
wire    ap_CS_fsm_state2;
wire   [5:0] empty_61_fu_274_p1;
reg   [5:0] empty_61_reg_569;
reg   [63:0] gmem_addr_reg_614;
reg   [63:0] gmem_addr_1_reg_620;
wire   [511:0] zext_ln364_fu_338_p1;
reg   [511:0] zext_ln364_reg_626;
reg   [63:0] gmem_addr_2_reg_631;
wire   [511:0] zext_ln537_fu_376_p1;
reg   [511:0] zext_ln537_reg_637;
wire   [0:0] icmp_ln539_fu_380_p2;
reg   [511:0] gmem_addr_read_reg_646;
reg   [511:0] gmem_addr_1_read_reg_651;
reg   [511:0] gmem_addr_2_read_reg_656;
wire   [63:0] zext_ln559_fu_386_p1;
reg   [63:0] zext_ln559_reg_661;
wire    ap_CS_fsm_state76;
wire   [3:0] add_ln559_fu_396_p2;
reg   [3:0] add_ln559_reg_669;
reg   [57:0] trunc_ln3_reg_674;
wire   [0:0] icmp_ln559_fu_390_p2;
wire   [5:0] add_ln561_2_fu_443_p2;
reg   [5:0] add_ln561_2_reg_679;
wire   [7:0] trunc_ln555_fu_456_p1;
reg   [7:0] trunc_ln555_reg_684;
wire   [15:0] trunc_ln364_fu_460_p1;
reg   [15:0] trunc_ln364_reg_689;
wire   [23:0] trunc_ln174_fu_464_p1;
reg   [23:0] trunc_ln174_reg_694;
reg   [511:0] gmem_addr_3_read_reg_705;
wire   [31:0] destStr_AOV_q1;
reg   [31:0] destStr_AOV_load_reg_710;
wire    ap_CS_fsm_state149;
wire   [31:0] destStr_AOV_q0;
reg   [31:0] destStr_AOV_load_1_reg_715;
reg   [31:0] destStr_AOV_load_2_reg_720;
wire    ap_CS_fsm_state150;
reg   [31:0] destStr_AOV_load_3_reg_725;
reg   [31:0] destStr_AOV_load_4_reg_730;
wire    ap_CS_fsm_state151;
reg   [31:0] destStr_AOV_load_5_reg_735;
reg   [2:0] destStr_AOV_address0;
reg    destStr_AOV_ce0;
reg    destStr_AOV_we0;
wire   [31:0] destStr_AOV_d0;
reg   [2:0] destStr_AOV_address1;
reg    destStr_AOV_ce1;
reg   [3:0] i_reg_257;
wire    ap_CS_fsm_state148;
wire  signed [63:0] sext_ln364_fu_294_p1;
wire  signed [63:0] sext_ln555_fu_314_p1;
wire  signed [63:0] sext_ln364_1_fu_352_p1;
wire  signed [63:0] sext_ln561_fu_467_p1;
wire   [7:0] destStr_gap0_1_fu_102;
reg    ap_block_state1;
reg    ap_block_state152;
wire   [57:0] trunc_ln_fu_284_p4;
wire   [63:0] empty_fu_268_p2;
wire   [57:0] trunc_ln2_fu_304_p4;
wire   [5:0] add_ln555_fu_324_p2;
wire   [8:0] shl_ln_fu_330_p3;
wire   [63:0] empty_62_fu_278_p2;
wire   [57:0] trunc_ln364_6_fu_342_p4;
wire   [5:0] add_ln364_fu_362_p2;
wire   [8:0] shl_ln1_fu_368_p3;
wire   [2:0] trunc_ln561_fu_402_p1;
wire   [4:0] shl_ln2_fu_406_p3;
wire   [5:0] zext_ln561_fu_414_p1;
wire   [5:0] add_ln561_fu_418_p2;
wire   [63:0] zext_ln561_1_fu_424_p1;
wire   [63:0] add_ln561_1_fu_428_p2;
wire   [511:0] lshr_ln555_fu_448_p2;
wire   [511:0] lshr_ln364_fu_452_p2;
wire   [8:0] shl_ln561_1_fu_477_p3;
wire   [511:0] zext_ln561_2_fu_484_p1;
wire   [511:0] lshr_ln561_fu_488_p2;
wire   [31:0] trunc_ln561_1_fu_493_p1;
wire   [31:0] bitcast_ln174_7_fu_527_p1;
wire   [31:0] bitcast_ln174_6_fu_523_p1;
wire   [31:0] bitcast_ln174_5_fu_520_p1;
wire   [31:0] bitcast_ln174_4_fu_517_p1;
wire   [31:0] bitcast_ln174_3_fu_514_p1;
wire   [31:0] bitcast_ln174_2_fu_511_p1;
wire   [31:0] bitcast_ln174_1_fu_508_p1;
wire   [31:0] bitcast_ln174_fu_505_p1;
reg   [151:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
reg    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
reg    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ST_fsm_state151_blk;
reg    ap_ST_fsm_state152_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 152'd1;
end

run_read_data_destStr_AOV_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
destStr_AOV_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(destStr_AOV_address0),
    .ce0(destStr_AOV_ce0),
    .we0(destStr_AOV_we0),
    .d0(destStr_AOV_d0),
    .q0(destStr_AOV_q0),
    .address1(destStr_AOV_address1),
    .ce1(destStr_AOV_ce1),
    .q1(destStr_AOV_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        i_reg_257 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        i_reg_257 <= add_ln559_reg_669;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        add_ln559_reg_669 <= add_ln559_fu_396_p2;
        zext_ln559_reg_661[3 : 0] <= zext_ln559_fu_386_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln559_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        add_ln561_2_reg_679 <= add_ln561_2_fu_443_p2;
        trunc_ln3_reg_674 <= {{add_ln561_1_fu_428_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        destStr_AOV_load_1_reg_715 <= destStr_AOV_q0;
        destStr_AOV_load_reg_710 <= destStr_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        destStr_AOV_load_2_reg_720 <= destStr_AOV_q0;
        destStr_AOV_load_3_reg_725 <= destStr_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        destStr_AOV_load_4_reg_730 <= destStr_AOV_q0;
        destStr_AOV_load_5_reg_735 <= destStr_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_61_reg_569 <= empty_61_fu_274_p1;
        gmem_addr_1_reg_620 <= sext_ln555_fu_314_p1;
        gmem_addr_2_reg_631 <= sext_ln364_1_fu_352_p1;
        gmem_addr_reg_614 <= sext_ln364_fu_294_p1;
        zext_ln364_reg_626[8 : 3] <= zext_ln364_fu_338_p1[8 : 3];
        zext_ln537_reg_637[8 : 3] <= zext_ln537_fu_376_p1[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        gmem_addr_1_read_reg_651 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        gmem_addr_2_read_reg_656 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        gmem_addr_3_read_reg_705 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        gmem_addr_read_reg_646 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln539_reg_642 <= icmp_ln539_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln559_fu_390_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        trunc_ln174_reg_694 <= trunc_ln174_fu_464_p1;
        trunc_ln364_reg_689 <= trunc_ln364_fu_460_p1;
        trunc_ln555_reg_684 <= trunc_ln555_fu_456_p1;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state147_blk = 1'b1;
    end else begin
        ap_ST_fsm_state147_blk = 1'b0;
    end
end

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state151_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln539_reg_642 == 1'd0) & (sourceStream_full_n == 1'b0))) begin
        ap_ST_fsm_state152_blk = 1'b1;
    end else begin
        ap_ST_fsm_state152_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((startCopy_ap_vld == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

assign ap_ST_fsm_state76_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        destStr_AOV_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        destStr_AOV_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        destStr_AOV_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state148)) begin
        destStr_AOV_address0 = zext_ln559_reg_661;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        destStr_AOV_address0 = 64'd1;
    end else begin
        destStr_AOV_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        destStr_AOV_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        destStr_AOV_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        destStr_AOV_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        destStr_AOV_address1 = 64'd0;
    end else begin
        destStr_AOV_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state148) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state76))) begin
        destStr_AOV_ce0 = 1'b1;
    end else begin
        destStr_AOV_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state76))) begin
        destStr_AOV_ce1 = 1'b1;
    end else begin
        destStr_AOV_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state148)) begin
        destStr_AOV_we0 = 1'b1;
    end else begin
        destStr_AOV_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state147) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state77)) begin
            m_axi_gmem_ARADDR = sext_ln561_fu_467_p1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_631;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_620;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_614;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state147)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln539_reg_642 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
        sourceStream_blk_n = sourceStream_full_n;
    end else begin
        sourceStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln539_reg_642 == 1'd0) & (sourceStream_full_n == 1'b0)) & (icmp_ln539_reg_642 == 1'd0) & (1'b1 == ap_CS_fsm_state152))) begin
        sourceStream_write = 1'b1;
    end else begin
        sourceStream_write = 1'b0;
    end
end

always @ (*) begin
    if (((startCopy_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        startCopy_ap_ack = 1'b1;
    end else begin
        startCopy_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        startCopy_blk_n = startCopy_ap_vld;
    end else begin
        startCopy_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln539_fu_380_p2 == 1'd1) & (startCopy_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end else if (((icmp_ln539_fu_380_p2 == 1'd0) & (startCopy_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln559_fu_390_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state147))) begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            if ((~((icmp_ln539_reg_642 == 1'd0) & (sourceStream_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state152))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln364_fu_362_p2 = (empty_61_fu_274_p1 + 6'd4);

assign add_ln555_fu_324_p2 = (empty_61_fu_274_p1 + 6'd6);

assign add_ln559_fu_396_p2 = (i_reg_257 + 4'd1);

assign add_ln561_1_fu_428_p2 = (zext_ln561_1_fu_424_p1 + inputAOV);

assign add_ln561_2_fu_443_p2 = (add_ln561_fu_418_p2 + empty_61_reg_569);

assign add_ln561_fu_418_p2 = (zext_ln561_fu_414_p1 + 6'd12);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state152 = ((icmp_ln539_reg_642 == 1'd0) & (sourceStream_full_n == 1'b0));
end

assign ap_done = ap_done_reg;

assign ap_ready = 1'b0;

assign bitcast_ln174_1_fu_508_p1 = destStr_AOV_load_1_reg_715;

assign bitcast_ln174_2_fu_511_p1 = destStr_AOV_load_2_reg_720;

assign bitcast_ln174_3_fu_514_p1 = destStr_AOV_load_3_reg_725;

assign bitcast_ln174_4_fu_517_p1 = destStr_AOV_load_4_reg_730;

assign bitcast_ln174_5_fu_520_p1 = destStr_AOV_load_5_reg_735;

assign bitcast_ln174_6_fu_523_p1 = destStr_AOV_q0;

assign bitcast_ln174_7_fu_527_p1 = destStr_AOV_q1;

assign bitcast_ln174_fu_505_p1 = destStr_AOV_load_reg_710;

assign destStr_AOV_d0 = trunc_ln561_1_fu_493_p1;

assign destStr_gap0_1_fu_102 = 8'd0;

assign empty_61_fu_274_p1 = inputAOV[5:0];

assign empty_62_fu_278_p2 = (inputAOV + 64'd4);

assign empty_fu_268_p2 = (inputAOV + 64'd6);

assign icmp_ln539_fu_380_p2 = ((startCopy == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln559_fu_390_p2 = ((i_reg_257 == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln364_fu_452_p2 = gmem_addr_2_read_reg_656 >> zext_ln537_reg_637;

assign lshr_ln555_fu_448_p2 = gmem_addr_1_read_reg_651 >> zext_ln364_reg_626;

assign lshr_ln561_fu_488_p2 = gmem_addr_3_read_reg_705 >> zext_ln561_2_fu_484_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign sext_ln364_1_fu_352_p1 = $signed(trunc_ln364_6_fu_342_p4);

assign sext_ln364_fu_294_p1 = $signed(trunc_ln_fu_284_p4);

assign sext_ln555_fu_314_p1 = $signed(trunc_ln2_fu_304_p4);

assign sext_ln561_fu_467_p1 = $signed(trunc_ln3_reg_674);

assign shl_ln1_fu_368_p3 = {{add_ln364_fu_362_p2}, {3'd0}};

assign shl_ln2_fu_406_p3 = {{trunc_ln561_fu_402_p1}, {2'd0}};

assign shl_ln561_1_fu_477_p3 = {{add_ln561_2_reg_679}, {3'd0}};

assign shl_ln_fu_330_p3 = {{add_ln555_fu_324_p2}, {3'd0}};

assign sourceStream_din = {{{{{{{{{{{{{bitcast_ln174_7_fu_527_p1}, {bitcast_ln174_6_fu_523_p1}}, {bitcast_ln174_5_fu_520_p1}}, {bitcast_ln174_4_fu_517_p1}}, {bitcast_ln174_3_fu_514_p1}}, {bitcast_ln174_2_fu_511_p1}}, {bitcast_ln174_1_fu_508_p1}}, {bitcast_ln174_fu_505_p1}}, {destStr_gap0_1_fu_102}}, {8'd0}}, {trunc_ln555_reg_684}}, {trunc_ln364_reg_689}}, {trunc_ln174_reg_694}};

assign trunc_ln174_fu_464_p1 = gmem_addr_read_reg_646[23:0];

assign trunc_ln2_fu_304_p4 = {{empty_fu_268_p2[63:6]}};

assign trunc_ln364_6_fu_342_p4 = {{empty_62_fu_278_p2[63:6]}};

assign trunc_ln364_fu_460_p1 = lshr_ln364_fu_452_p2[15:0];

assign trunc_ln555_fu_456_p1 = lshr_ln555_fu_448_p2[7:0];

assign trunc_ln561_1_fu_493_p1 = lshr_ln561_fu_488_p2[31:0];

assign trunc_ln561_fu_402_p1 = i_reg_257[2:0];

assign trunc_ln_fu_284_p4 = {{inputAOV[63:6]}};

assign zext_ln364_fu_338_p1 = shl_ln_fu_330_p3;

assign zext_ln537_fu_376_p1 = shl_ln1_fu_368_p3;

assign zext_ln559_fu_386_p1 = i_reg_257;

assign zext_ln561_1_fu_424_p1 = add_ln561_fu_418_p2;

assign zext_ln561_2_fu_484_p1 = shl_ln561_1_fu_477_p3;

assign zext_ln561_fu_414_p1 = shl_ln2_fu_406_p3;

always @ (posedge ap_clk) begin
    ap_done_reg <= 1'b0;
    zext_ln364_reg_626[2:0] <= 3'b000;
    zext_ln364_reg_626[511:9] <= 503'b
    zext_ln537_reg_637[2:0] <= 3'b000;
    zext_ln537_reg_637[511:9] <= 503'b
    zext_ln559_reg_661[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //run_read_data
