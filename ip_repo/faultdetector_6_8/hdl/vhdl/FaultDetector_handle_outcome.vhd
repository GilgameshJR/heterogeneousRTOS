-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FaultDetector_handle_outcome is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    errorInTask_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    errorInTask_ce0 : OUT STD_LOGIC;
    errorInTask_we0 : OUT STD_LOGIC;
    errorInTask_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    lastTestDescriptor_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    lastTestDescriptor_ce0 : OUT STD_LOGIC;
    lastTestDescriptor_we0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lastTestDescriptor_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    failedTask : OUT STD_LOGIC_VECTOR (15 downto 0);
    failedTask_ap_vld : OUT STD_LOGIC;
    failedTask_ap_ack : IN STD_LOGIC;
    destStream_dout : IN STD_LOGIC_VECTOR (234 downto 0);
    destStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    destStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    destStream_empty_n : IN STD_LOGIC;
    destStream_read : OUT STD_LOGIC );
end;


architecture behav of FaultDetector_handle_outcome is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFF1D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111100011101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101011";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal failedTask_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal destStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal destStream_read_reg_587 : STD_LOGIC_VECTOR (234 downto 0);
    signal in_command_V_fu_310_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_command_V_reg_593 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_checkId_V_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_executionId_V_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_taskId_V_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln235_8_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln235_9_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln235_s_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln235_1_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index11_cast_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index11_cast_reg_634 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_441_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_642 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_predicate_op73_write_state5 : BOOLEAN;
    signal regslice_forward_failedTask_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal tmp_reg_655 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_660 : STD_LOGIC_VECTOR (23 downto 0);
    signal outcome_AOV_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_1_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_2_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal outcome_AOV_load_3_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal in_AOV_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_AOV_ce0 : STD_LOGIC;
    signal in_AOV_we0 : STD_LOGIC;
    signal in_AOV_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_AOV_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_AOV_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal in_AOV_ce1 : STD_LOGIC;
    signal in_AOV_we1 : STD_LOGIC;
    signal in_AOV_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal outcome_AOV_ce0 : STD_LOGIC;
    signal outcome_AOV_we0 : STD_LOGIC;
    signal outcome_AOV_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal outcome_AOV_ce1 : STD_LOGIC;
    signal loop_index11_reg_299 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln541_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln235_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln235_1_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln235_2_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln235_3_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln235_4_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln235_5_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln235_6_fu_344_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln235_7_fu_354_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_62_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_61_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_60_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_59_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_58_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_57_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal failedTask_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal failedTask_ap_vld_int_regslice : STD_LOGIC;
    signal failedTask_ap_ack_int_regslice : STD_LOGIC;
    signal regslice_forward_failedTask_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FaultDetector_handle_outcome_in_AOV_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FaultDetector_compute_out_AOV_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FaultDetector_regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    in_AOV_U : component FaultDetector_handle_outcome_in_AOV_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => in_AOV_address0,
        ce0 => in_AOV_ce0,
        we0 => in_AOV_we0,
        d0 => in_AOV_d0,
        q0 => in_AOV_q0,
        address1 => in_AOV_address1,
        ce1 => in_AOV_ce1,
        we1 => in_AOV_we1,
        d1 => in_AOV_d1);

    outcome_AOV_U : component FaultDetector_compute_out_AOV_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outcome_AOV_address0,
        ce0 => outcome_AOV_ce0,
        we0 => outcome_AOV_we0,
        d0 => in_AOV_q0,
        q0 => outcome_AOV_q0,
        address1 => outcome_AOV_address1,
        ce1 => outcome_AOV_ce1,
        q1 => outcome_AOV_q1);

    regslice_forward_failedTask_U : component FaultDetector_regslice_forward
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => failedTask_int_regslice,
        vld_in => failedTask_ap_vld_int_regslice,
        ack_in => failedTask_ap_ack_int_regslice,
        data_out => failedTask,
        vld_out => regslice_forward_failedTask_U_vld_out,
        ack_out => failedTask_ap_ack,
        apdone_blk => regslice_forward_failedTask_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (icmp_ln1019_fu_447_p2 = ap_const_lv1_1) and (exitcond2_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    loop_index11_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                loop_index11_reg_299 <= empty_reg_642;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                loop_index11_reg_299 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                destStream_read_reg_587 <= destStream_dout;
                in_checkId_V_reg_598 <= destStream_dout(9 downto 2);
                in_command_V_reg_593 <= in_command_V_fu_310_p1;
                in_executionId_V_reg_603 <= destStream_dout(33 downto 26);
                in_taskId_V_reg_608 <= destStream_dout(41 downto 34);
                trunc_ln235_1_reg_629 <= destStream_dout(234 downto 203);
                trunc_ln235_8_reg_614 <= destStream_dout(138 downto 107);
                trunc_ln235_9_reg_619 <= destStream_dout(170 downto 139);
                trunc_ln235_s_reg_624 <= destStream_dout(202 downto 171);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                empty_reg_642 <= empty_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    loop_index11_cast_reg_634(2 downto 0) <= loop_index11_cast_fu_430_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                outcome_AOV_load_1_reg_675 <= outcome_AOV_q0;
                outcome_AOV_load_reg_670 <= outcome_AOV_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                outcome_AOV_load_2_reg_680 <= outcome_AOV_q0;
                outcome_AOV_load_3_reg_685 <= outcome_AOV_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1019_fu_447_p2 = ap_const_lv1_0) and (exitcond2_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_5_reg_660 <= destStream_read_reg_587(33 downto 10);
                tmp_reg_655 <= destStream_read_reg_587(42 downto 42);
            end if;
        end if;
    end process;
    loop_index11_cast_reg_634(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, destStream_empty_n, ap_CS_fsm_state5, exitcond2_fu_435_p2, icmp_ln1019_fu_447_p2, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, failedTask_ap_ack_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((destStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (icmp_ln1019_fu_447_p2 = ap_const_lv1_1) and (exitcond2_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (icmp_ln1019_fu_447_p2 = ap_const_lv1_0) and (exitcond2_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (exitcond2_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((failedTask_ap_ack_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(destStream_empty_n)
    begin
        if ((destStream_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, failedTask_ap_ack_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(failedTask_ap_ack_int_regslice)
    begin
        if ((failedTask_ap_ack_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, failedTask_ap_ack_int_regslice)
    begin
                ap_block_state5 <= ((regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)));
    end process;


    ap_block_state5_io_assign_proc : process(ap_predicate_op73_write_state5, failedTask_ap_ack_int_regslice)
    begin
                ap_block_state5_io <= ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, exitcond2_fu_435_p2, icmp_ln1019_fu_447_p2, ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, failedTask_ap_ack_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (icmp_ln1019_fu_447_p2 = ap_const_lv1_1) and (exitcond2_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op73_write_state5_assign_proc : process(exitcond2_fu_435_p2, icmp_ln1019_fu_447_p2)
    begin
                ap_predicate_op73_write_state5 <= ((icmp_ln1019_fu_447_p2 = ap_const_lv1_0) and (exitcond2_fu_435_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_435_p2, icmp_ln1019_fu_447_p2, ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, failedTask_ap_ack_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (icmp_ln1019_fu_447_p2 = ap_const_lv1_1) and (exitcond2_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln235_1_fu_409_p1 <= trunc_ln235_7_fu_354_p4;
    bitcast_ln235_2_fu_414_p1 <= trunc_ln235_8_reg_614;
    bitcast_ln235_3_fu_418_p1 <= trunc_ln235_9_reg_619;
    bitcast_ln235_4_fu_422_p1 <= trunc_ln235_s_reg_624;
    bitcast_ln235_5_fu_426_p1 <= trunc_ln235_1_reg_629;
    bitcast_ln235_fu_404_p1 <= trunc_ln235_6_fu_344_p4;

    destStream_blk_n_assign_proc : process(destStream_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            destStream_blk_n <= destStream_empty_n;
        else 
            destStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    destStream_read_assign_proc : process(destStream_empty_n, ap_CS_fsm_state2)
    begin
        if (((destStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            destStream_read <= ap_const_logic_1;
        else 
            destStream_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_57_fu_484_p1 <= outcome_AOV_load_reg_670;
    empty_58_fu_487_p1 <= outcome_AOV_load_1_reg_675;
    empty_59_fu_490_p1 <= outcome_AOV_load_2_reg_680;
    empty_60_fu_493_p1 <= outcome_AOV_load_3_reg_685;
    empty_61_fu_496_p1 <= outcome_AOV_q0;
    empty_62_fu_500_p1 <= outcome_AOV_q1;
    empty_fu_441_p2 <= std_logic_vector(unsigned(loop_index11_reg_299) + unsigned(ap_const_lv3_1));
    errorInTask_address0 <= zext_ln541_fu_479_p1(3 - 1 downto 0);

    errorInTask_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            errorInTask_ce0 <= ap_const_logic_1;
        else 
            errorInTask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    errorInTask_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_655),8));

    errorInTask_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            errorInTask_we0 <= ap_const_logic_1;
        else 
            errorInTask_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_435_p2 <= "1" when (loop_index11_reg_299 = ap_const_lv3_6) else "0";
    failedTask_ap_vld <= regslice_forward_failedTask_U_vld_out;

    failedTask_ap_vld_int_regslice_assign_proc : process(ap_CS_fsm_state5, ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, failedTask_ap_ack_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_predicate_op73_write_state5 = ap_const_boolean_1))) then 
            failedTask_ap_vld_int_regslice <= ap_const_logic_1;
        else 
            failedTask_ap_vld_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    failedTask_blk_n_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_435_p2, icmp_ln1019_fu_447_p2, ap_CS_fsm_state7, failedTask_ap_ack_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln1019_fu_447_p2 = ap_const_lv1_0) and (exitcond2_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            failedTask_blk_n <= failedTask_ap_ack_int_regslice;
        else 
            failedTask_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    failedTask_int_regslice <= (in_executionId_V_reg_603 & in_taskId_V_reg_608);
    icmp_ln1019_fu_447_p2 <= "1" when (in_command_V_reg_593 = ap_const_lv2_1) else "0";

    in_AOV_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, loop_index11_cast_fu_430_p1, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_AOV_address0 <= loop_index11_cast_fu_430_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_AOV_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_AOV_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_AOV_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            in_AOV_address0 <= "XXX";
        end if; 
    end process;


    in_AOV_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_AOV_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_AOV_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_AOV_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            in_AOV_address1 <= "XXX";
        end if; 
    end process;


    in_AOV_ce0_assign_proc : process(destStream_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, ap_CS_fsm_state4, ap_CS_fsm_state3, failedTask_ap_ack_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((destStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_AOV_ce0 <= ap_const_logic_1;
        else 
            in_AOV_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_AOV_ce1_assign_proc : process(destStream_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((destStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_AOV_ce1 <= ap_const_logic_1;
        else 
            in_AOV_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_AOV_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, bitcast_ln235_1_fu_409_p1, ap_CS_fsm_state3, bitcast_ln235_3_fu_418_p1, bitcast_ln235_5_fu_426_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_AOV_d0 <= bitcast_ln235_5_fu_426_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_AOV_d0 <= bitcast_ln235_3_fu_418_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_AOV_d0 <= bitcast_ln235_1_fu_409_p1;
        else 
            in_AOV_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_AOV_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, bitcast_ln235_fu_404_p1, ap_CS_fsm_state3, bitcast_ln235_2_fu_414_p1, bitcast_ln235_4_fu_422_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_AOV_d1 <= bitcast_ln235_4_fu_422_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_AOV_d1 <= bitcast_ln235_2_fu_414_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_AOV_d1 <= bitcast_ln235_fu_404_p1;
        else 
            in_AOV_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_AOV_we0_assign_proc : process(destStream_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((destStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_AOV_we0 <= ap_const_logic_1;
        else 
            in_AOV_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_AOV_we1_assign_proc : process(destStream_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((destStream_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_AOV_we1 <= ap_const_logic_1;
        else 
            in_AOV_we1 <= ap_const_logic_0;
        end if; 
    end process;

    in_command_V_fu_310_p1 <= destStream_dout(2 - 1 downto 0);
    lastTestDescriptor_address0 <= zext_ln541_fu_479_p1(3 - 1 downto 0);

    lastTestDescriptor_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            lastTestDescriptor_ce0 <= ap_const_logic_1;
        else 
            lastTestDescriptor_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lastTestDescriptor_d0 <= (((((((((empty_62_fu_500_p1 & empty_61_fu_496_p1) & empty_60_fu_493_p1) & empty_59_fu_490_p1) & empty_58_fu_487_p1) & empty_57_fu_484_p1) & ap_const_lv24_0) & tmp_5_reg_660) & ap_const_lv8_0) & in_checkId_V_reg_598);

    lastTestDescriptor_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            lastTestDescriptor_we0 <= ap_const_lv32_FFFFFF1D;
        else 
            lastTestDescriptor_we0 <= ap_const_lv32_0;
        end if; 
    end process;

    loop_index11_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index11_reg_299),64));

    outcome_AOV_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, loop_index11_cast_reg_634, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            outcome_AOV_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            outcome_AOV_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outcome_AOV_address0 <= loop_index11_cast_reg_634(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            outcome_AOV_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            outcome_AOV_address0 <= "XXX";
        end if; 
    end process;


    outcome_AOV_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            outcome_AOV_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            outcome_AOV_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            outcome_AOV_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            outcome_AOV_address1 <= "XXX";
        end if; 
    end process;


    outcome_AOV_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, ap_CS_fsm_state8, ap_CS_fsm_state6, failedTask_ap_ack_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((failedTask_ap_ack_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outcome_AOV_ce0 <= ap_const_logic_1;
        else 
            outcome_AOV_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outcome_AOV_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_predicate_op73_write_state5, regslice_forward_failedTask_U_apdone_blk, ap_block_state5_io, ap_CS_fsm_state8, failedTask_ap_ack_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((failedTask_ap_ack_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((ap_const_boolean_1 = ap_block_state5_io) or (regslice_forward_failedTask_U_apdone_blk = ap_const_logic_1) or ((failedTask_ap_ack_int_regslice = ap_const_logic_0) and (ap_predicate_op73_write_state5 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outcome_AOV_ce1 <= ap_const_logic_1;
        else 
            outcome_AOV_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outcome_AOV_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outcome_AOV_we0 <= ap_const_logic_1;
        else 
            outcome_AOV_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln235_6_fu_344_p4 <= destStream_dout(74 downto 43);
    trunc_ln235_7_fu_354_p4 <= destStream_dout(106 downto 75);
    zext_ln541_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_taskId_V_reg_608),64));
end behav;
