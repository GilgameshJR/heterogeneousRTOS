-- (c) Copyright 1995-2022 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
-- DO NOT MODIFY THIS FILE.

-- IP VLNV: xilinx.com:ip:tmr_voter:1.0
-- IP Revision: 4

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

LIBRARY tmr_voter_v1_0_4;
USE tmr_voter_v1_0_4.tmr_voter;

ENTITY design_1_tmr_voter_1_0 IS
  PORT (
    Clk : IN STD_LOGIC;
    S_AXI1_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI1_AWVALID : IN STD_LOGIC;
    S_AXI1_AWREADY : OUT STD_LOGIC;
    S_AXI1_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI1_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S_AXI1_WVALID : IN STD_LOGIC;
    S_AXI1_WREADY : OUT STD_LOGIC;
    S_AXI1_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S_AXI1_BVALID : OUT STD_LOGIC;
    S_AXI1_BREADY : IN STD_LOGIC;
    S_AXI1_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI1_ARVALID : IN STD_LOGIC;
    S_AXI1_ARREADY : OUT STD_LOGIC;
    S_AXI1_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI1_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S_AXI1_RVALID : OUT STD_LOGIC;
    S_AXI1_RREADY : IN STD_LOGIC;
    S_AXI2_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI2_AWVALID : IN STD_LOGIC;
    S_AXI2_AWREADY : OUT STD_LOGIC;
    S_AXI2_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI2_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S_AXI2_WVALID : IN STD_LOGIC;
    S_AXI2_WREADY : OUT STD_LOGIC;
    S_AXI2_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S_AXI2_BVALID : OUT STD_LOGIC;
    S_AXI2_BREADY : IN STD_LOGIC;
    S_AXI2_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI2_ARVALID : IN STD_LOGIC;
    S_AXI2_ARREADY : OUT STD_LOGIC;
    S_AXI2_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI2_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S_AXI2_RVALID : OUT STD_LOGIC;
    S_AXI2_RREADY : IN STD_LOGIC;
    S_AXI3_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI3_AWVALID : IN STD_LOGIC;
    S_AXI3_AWREADY : OUT STD_LOGIC;
    S_AXI3_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI3_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    S_AXI3_WVALID : IN STD_LOGIC;
    S_AXI3_WREADY : OUT STD_LOGIC;
    S_AXI3_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S_AXI3_BVALID : OUT STD_LOGIC;
    S_AXI3_BREADY : IN STD_LOGIC;
    S_AXI3_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI3_ARVALID : IN STD_LOGIC;
    S_AXI3_ARREADY : OUT STD_LOGIC;
    S_AXI3_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    S_AXI3_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    S_AXI3_RVALID : OUT STD_LOGIC;
    S_AXI3_RREADY : IN STD_LOGIC;
    M_AXI_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M_AXI_AWVALID : OUT STD_LOGIC;
    M_AXI_AWREADY : IN STD_LOGIC;
    M_AXI_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M_AXI_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_WVALID : OUT STD_LOGIC;
    M_AXI_WREADY : IN STD_LOGIC;
    M_AXI_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_BVALID : IN STD_LOGIC;
    M_AXI_BREADY : OUT STD_LOGIC;
    M_AXI_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M_AXI_ARVALID : OUT STD_LOGIC;
    M_AXI_ARREADY : IN STD_LOGIC;
    M_AXI_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    M_AXI_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_RVALID : IN STD_LOGIC;
    M_AXI_RREADY : OUT STD_LOGIC
  );
END design_1_tmr_voter_1_0;

ARCHITECTURE design_1_tmr_voter_1_0_arch OF design_1_tmr_voter_1_0 IS
  ATTRIBUTE DowngradeIPIdentifiedWarnings : STRING;
  ATTRIBUTE DowngradeIPIdentifiedWarnings OF design_1_tmr_voter_1_0_arch: ARCHITECTURE IS "yes";
  COMPONENT tmr_voter IS
    GENERIC (
      C_INTERFACE : INTEGER;
      C_TMR : INTEGER;
      C_USE_TMR_DISABLE : INTEGER;
      C_COMPARATOR : INTEGER;
      C_INPUT_REGISTER : INTEGER;
      C_VOTER_CHECK : INTEGER;
      C_INCLUDE_MASK : STD_LOGIC_VECTOR;
      C_TEST_COMPARATOR : INTEGER;
      C_TEST_LAST_INTERFACE : INTEGER;
      C_TEST_AXIS_DATA_WIDTH : INTEGER;
      C_TEMPORAL_DEPTH1 : INTEGER;
      C_TEMPORAL_DEPTH2 : INTEGER;
      C_DISCRETE_WIDTH : INTEGER;
      C_LMB_AWIDTH : INTEGER;
      C_LMB_DWIDTH : INTEGER;
      C_LMB_PROTOCOL : INTEGER;
      C_ECC : INTEGER;
      C_AXI_ID_WIDTH : INTEGER;
      C_AXI_DATA_WIDTH : INTEGER;
      C_AXI_ADDR_WIDTH : INTEGER;
      C_AXI_AWUSER_WIDTH : INTEGER;
      C_AXI_ARUSER_WIDTH : INTEGER;
      C_AXI_WUSER_WIDTH : INTEGER;
      C_AXI_RUSER_WIDTH : INTEGER;
      C_AXI_BUSER_WIDTH : INTEGER;
      C_AXIS_DATA_WIDTH : INTEGER;
      C_AXIS_ID_WIDTH : INTEGER;
      C_AXIS_DEST_WIDTH : INTEGER;
      C_AXIS_USER_WIDTH : INTEGER;
      C_DATA_SIZE : INTEGER;
      C_ADDR_SIZE : INTEGER;
      C_LOW_LATENCY : INTEGER;
      C_GPO_SIZE : INTEGER;
      C_GPI_SIZE : INTEGER
    );
    PORT (
      TMR_Disable : IN STD_LOGIC;
      Clk : IN STD_LOGIC;
      Rst : IN STD_LOGIC;
      Test_Comparator : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXIS_TLAST_Test : IN STD_LOGIC;
      S_AXIS_TDATA_Test : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXIS_TVALID_Test : IN STD_LOGIC;
      S_AXIS_TREADY_Test : OUT STD_LOGIC;
      M_AXIS_TLAST_Test : OUT STD_LOGIC;
      M_AXIS_TDATA_Test : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXIS_TVALID_Test : OUT STD_LOGIC;
      M_AXIS_TREADY_Test : IN STD_LOGIC;
      Discrete1 : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      Discrete2 : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      Discrete3 : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      Discrete : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      LMB1_ABus : IN STD_LOGIC_VECTOR(0 TO 31);
      LMB1_WriteDBus : IN STD_LOGIC_VECTOR(0 TO 31);
      LMB1_AddrStrobe : IN STD_LOGIC;
      LMB1_ReadStrobe : IN STD_LOGIC;
      LMB1_WriteStrobe : IN STD_LOGIC;
      LMB1_BE : IN STD_LOGIC_VECTOR(0 TO 3);
      Sl1_DBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      Sl1_Ready : OUT STD_LOGIC;
      Sl1_Wait : OUT STD_LOGIC;
      Sl1_UE : OUT STD_LOGIC;
      Sl1_CE : OUT STD_LOGIC;
      LMB2_ABus : IN STD_LOGIC_VECTOR(0 TO 31);
      LMB2_WriteDBus : IN STD_LOGIC_VECTOR(0 TO 31);
      LMB2_AddrStrobe : IN STD_LOGIC;
      LMB2_ReadStrobe : IN STD_LOGIC;
      LMB2_WriteStrobe : IN STD_LOGIC;
      LMB2_BE : IN STD_LOGIC_VECTOR(0 TO 3);
      Sl2_DBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      Sl2_Ready : OUT STD_LOGIC;
      Sl2_Wait : OUT STD_LOGIC;
      Sl2_UE : OUT STD_LOGIC;
      Sl2_CE : OUT STD_LOGIC;
      LMB3_ABus : IN STD_LOGIC_VECTOR(0 TO 31);
      LMB3_WriteDBus : IN STD_LOGIC_VECTOR(0 TO 31);
      LMB3_AddrStrobe : IN STD_LOGIC;
      LMB3_ReadStrobe : IN STD_LOGIC;
      LMB3_WriteStrobe : IN STD_LOGIC;
      LMB3_BE : IN STD_LOGIC_VECTOR(0 TO 3);
      Sl3_DBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      Sl3_Ready : OUT STD_LOGIC;
      Sl3_Wait : OUT STD_LOGIC;
      Sl3_UE : OUT STD_LOGIC;
      Sl3_CE : OUT STD_LOGIC;
      LMB_ABus : OUT STD_LOGIC_VECTOR(0 TO 31);
      LMB_WriteDBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      LMB_AddrStrobe : OUT STD_LOGIC;
      LMB_ReadStrobe : OUT STD_LOGIC;
      LMB_WriteStrobe : OUT STD_LOGIC;
      LMB_BE : OUT STD_LOGIC_VECTOR(0 TO 3);
      Sl_DBus : IN STD_LOGIC_VECTOR(0 TO 31);
      Sl_Ready : IN STD_LOGIC;
      Sl_Wait : IN STD_LOGIC;
      Sl_UE : IN STD_LOGIC;
      Sl_CE : IN STD_LOGIC;
      S_LMB1_ABus : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_LMB1_WriteDBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_LMB1_AddrStrobe : OUT STD_LOGIC;
      S_LMB1_ReadStrobe : OUT STD_LOGIC;
      S_LMB1_WriteStrobe : OUT STD_LOGIC;
      S_LMB1_BE : OUT STD_LOGIC_VECTOR(0 TO 3);
      S_Sl1_DBus : IN STD_LOGIC_VECTOR(0 TO 31);
      S_Sl1_Ready : IN STD_LOGIC;
      S_Sl1_Wait : IN STD_LOGIC;
      S_Sl1_UE : IN STD_LOGIC;
      S_Sl1_CE : IN STD_LOGIC;
      S_LMB2_ABus : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_LMB2_WriteDBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_LMB2_AddrStrobe : OUT STD_LOGIC;
      S_LMB2_ReadStrobe : OUT STD_LOGIC;
      S_LMB2_WriteStrobe : OUT STD_LOGIC;
      S_LMB2_BE : OUT STD_LOGIC_VECTOR(0 TO 3);
      S_Sl2_DBus : IN STD_LOGIC_VECTOR(0 TO 31);
      S_Sl2_Ready : IN STD_LOGIC;
      S_Sl2_Wait : IN STD_LOGIC;
      S_Sl2_UE : IN STD_LOGIC;
      S_Sl2_CE : IN STD_LOGIC;
      S_LMB3_ABus : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_LMB3_WriteDBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_LMB3_AddrStrobe : OUT STD_LOGIC;
      S_LMB3_ReadStrobe : OUT STD_LOGIC;
      S_LMB3_WriteStrobe : OUT STD_LOGIC;
      S_LMB3_BE : OUT STD_LOGIC_VECTOR(0 TO 3);
      S_Sl3_DBus : IN STD_LOGIC_VECTOR(0 TO 31);
      S_Sl3_Ready : IN STD_LOGIC;
      S_Sl3_Wait : IN STD_LOGIC;
      S_Sl3_UE : IN STD_LOGIC;
      S_Sl3_CE : IN STD_LOGIC;
      S_LMB_ABus : IN STD_LOGIC_VECTOR(0 TO 31);
      S_LMB_WriteDBus : IN STD_LOGIC_VECTOR(0 TO 31);
      S_LMB_AddrStrobe : IN STD_LOGIC;
      S_LMB_ReadStrobe : IN STD_LOGIC;
      S_LMB_WriteStrobe : IN STD_LOGIC;
      S_LMB_BE : IN STD_LOGIC_VECTOR(0 TO 3);
      S_Sl_DBus : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_Sl_Ready : OUT STD_LOGIC;
      S_Sl_Wait : OUT STD_LOGIC;
      S_Sl_UE : OUT STD_LOGIC;
      S_Sl_CE : OUT STD_LOGIC;
      BRAM1_Rst : IN STD_LOGIC;
      BRAM1_Clk : IN STD_LOGIC;
      BRAM1_Addr : IN STD_LOGIC_VECTOR(0 TO 31);
      BRAM1_EN : IN STD_LOGIC;
      BRAM1_WE : IN STD_LOGIC_VECTOR(0 TO 3);
      BRAM1_Dout : IN STD_LOGIC_VECTOR(0 TO 31);
      BRAM1_Din : OUT STD_LOGIC_VECTOR(0 TO 31);
      BRAM2_Rst : IN STD_LOGIC;
      BRAM2_Clk : IN STD_LOGIC;
      BRAM2_Addr : IN STD_LOGIC_VECTOR(0 TO 31);
      BRAM2_EN : IN STD_LOGIC;
      BRAM2_WE : IN STD_LOGIC_VECTOR(0 TO 3);
      BRAM2_Dout : IN STD_LOGIC_VECTOR(0 TO 31);
      BRAM2_Din : OUT STD_LOGIC_VECTOR(0 TO 31);
      BRAM3_Rst : IN STD_LOGIC;
      BRAM3_Clk : IN STD_LOGIC;
      BRAM3_Addr : IN STD_LOGIC_VECTOR(0 TO 31);
      BRAM3_EN : IN STD_LOGIC;
      BRAM3_WE : IN STD_LOGIC_VECTOR(0 TO 3);
      BRAM3_Dout : IN STD_LOGIC_VECTOR(0 TO 31);
      BRAM3_Din : OUT STD_LOGIC_VECTOR(0 TO 31);
      BRAM_Rst : OUT STD_LOGIC;
      BRAM_Clk : OUT STD_LOGIC;
      BRAM_Addr : OUT STD_LOGIC_VECTOR(0 TO 31);
      BRAM_EN : OUT STD_LOGIC;
      BRAM_WE : OUT STD_LOGIC_VECTOR(0 TO 3);
      BRAM_Dout : OUT STD_LOGIC_VECTOR(0 TO 31);
      BRAM_Din : IN STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM1_Rst : OUT STD_LOGIC;
      M_BRAM1_Clk : OUT STD_LOGIC;
      M_BRAM1_Addr : OUT STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM1_EN : OUT STD_LOGIC;
      M_BRAM1_WE : OUT STD_LOGIC_VECTOR(0 TO 3);
      M_BRAM1_Dout : OUT STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM1_Din : IN STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM2_Rst : IN STD_LOGIC;
      M_BRAM2_Clk : IN STD_LOGIC;
      M_BRAM2_Addr : IN STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM2_EN : IN STD_LOGIC;
      M_BRAM2_WE : IN STD_LOGIC_VECTOR(0 TO 3);
      M_BRAM2_Dout : IN STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM2_Din : IN STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM3_Rst : IN STD_LOGIC;
      M_BRAM3_Clk : IN STD_LOGIC;
      M_BRAM3_Addr : IN STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM3_EN : IN STD_LOGIC;
      M_BRAM3_WE : IN STD_LOGIC_VECTOR(0 TO 3);
      M_BRAM3_Dout : IN STD_LOGIC_VECTOR(0 TO 31);
      M_BRAM3_Din : IN STD_LOGIC_VECTOR(0 TO 31);
      S_BRAM_Rst : IN STD_LOGIC;
      S_BRAM_Clk : IN STD_LOGIC;
      S_BRAM_Addr : IN STD_LOGIC_VECTOR(0 TO 31);
      S_BRAM_EN : IN STD_LOGIC;
      S_BRAM_WE : IN STD_LOGIC_VECTOR(0 TO 3);
      S_BRAM_Dout : IN STD_LOGIC_VECTOR(0 TO 31);
      S_BRAM_Din : OUT STD_LOGIC_VECTOR(0 TO 31);
      S_AXI1_AWID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI1_AWLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI1_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI1_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_AWLOCK : IN STD_LOGIC;
      S_AXI1_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI1_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI1_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI1_AWVALID : IN STD_LOGIC;
      S_AXI1_AWREADY : OUT STD_LOGIC;
      S_AXI1_AWUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_AWDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_AWSNOOP : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI1_AWBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI1_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI1_WLAST : IN STD_LOGIC;
      S_AXI1_WVALID : IN STD_LOGIC;
      S_AXI1_WREADY : OUT STD_LOGIC;
      S_AXI1_WUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_BID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_BVALID : OUT STD_LOGIC;
      S_AXI1_BREADY : IN STD_LOGIC;
      S_AXI1_BUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_WACK : IN STD_LOGIC;
      S_AXI1_ARID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI1_ARLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI1_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI1_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_ARLOCK : IN STD_LOGIC;
      S_AXI1_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI1_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI1_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI1_ARVALID : IN STD_LOGIC;
      S_AXI1_ARREADY : OUT STD_LOGIC;
      S_AXI1_ARUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_ARDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_ARSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI1_ARBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_RID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI1_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI1_RLAST : OUT STD_LOGIC;
      S_AXI1_RVALID : OUT STD_LOGIC;
      S_AXI1_RREADY : IN STD_LOGIC;
      S_AXI1_RUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI1_RACK : IN STD_LOGIC;
      S_AXI1_ACVALID : OUT STD_LOGIC;
      S_AXI1_ACADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI1_ACSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI1_ACPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI1_ACREADY : IN STD_LOGIC;
      S_AXI1_CRVALID : IN STD_LOGIC;
      S_AXI1_CRRESP : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
      S_AXI1_CRREADY : OUT STD_LOGIC;
      S_AXI1_CDVALID : IN STD_LOGIC;
      S_AXI1_CDDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI1_CDLAST : IN STD_LOGIC;
      S_AXI1_CDREADY : OUT STD_LOGIC;
      S_AXI2_AWID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI2_AWLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI2_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI2_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_AWLOCK : IN STD_LOGIC;
      S_AXI2_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI2_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI2_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI2_AWVALID : IN STD_LOGIC;
      S_AXI2_AWREADY : OUT STD_LOGIC;
      S_AXI2_AWUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_AWDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_AWSNOOP : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI2_AWBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI2_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI2_WLAST : IN STD_LOGIC;
      S_AXI2_WVALID : IN STD_LOGIC;
      S_AXI2_WREADY : OUT STD_LOGIC;
      S_AXI2_WUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_BID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_BVALID : OUT STD_LOGIC;
      S_AXI2_BREADY : IN STD_LOGIC;
      S_AXI2_BUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_WACK : IN STD_LOGIC;
      S_AXI2_ARID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI2_ARLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI2_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI2_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_ARLOCK : IN STD_LOGIC;
      S_AXI2_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI2_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI2_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI2_ARVALID : IN STD_LOGIC;
      S_AXI2_ARREADY : OUT STD_LOGIC;
      S_AXI2_ARUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_ARDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_ARSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI2_ARBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_RID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI2_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI2_RLAST : OUT STD_LOGIC;
      S_AXI2_RVALID : OUT STD_LOGIC;
      S_AXI2_RREADY : IN STD_LOGIC;
      S_AXI2_RUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI2_RACK : IN STD_LOGIC;
      S_AXI2_ACVALID : OUT STD_LOGIC;
      S_AXI2_ACADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI2_ACSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI2_ACPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI2_ACREADY : IN STD_LOGIC;
      S_AXI2_CRVALID : IN STD_LOGIC;
      S_AXI2_CRRESP : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
      S_AXI2_CRREADY : OUT STD_LOGIC;
      S_AXI2_CDVALID : IN STD_LOGIC;
      S_AXI2_CDDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI2_CDLAST : IN STD_LOGIC;
      S_AXI2_CDREADY : OUT STD_LOGIC;
      S_AXI3_AWID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI3_AWLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI3_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI3_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_AWLOCK : IN STD_LOGIC;
      S_AXI3_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI3_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI3_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI3_AWVALID : IN STD_LOGIC;
      S_AXI3_AWREADY : OUT STD_LOGIC;
      S_AXI3_AWDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_AWSNOOP : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI3_AWBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_AWUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI3_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI3_WLAST : IN STD_LOGIC;
      S_AXI3_WVALID : IN STD_LOGIC;
      S_AXI3_WREADY : OUT STD_LOGIC;
      S_AXI3_WUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_BID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_BVALID : OUT STD_LOGIC;
      S_AXI3_BREADY : IN STD_LOGIC;
      S_AXI3_BUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_WACK : IN STD_LOGIC;
      S_AXI3_ARID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI3_ARLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI3_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI3_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_ARLOCK : IN STD_LOGIC;
      S_AXI3_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI3_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI3_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI3_ARVALID : IN STD_LOGIC;
      S_AXI3_ARREADY : OUT STD_LOGIC;
      S_AXI3_ARUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_ARDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_ARSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI3_ARBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_RID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI3_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI3_RLAST : OUT STD_LOGIC;
      S_AXI3_RVALID : OUT STD_LOGIC;
      S_AXI3_RREADY : IN STD_LOGIC;
      S_AXI3_RUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI3_RACK : IN STD_LOGIC;
      S_AXI3_ACVALID : OUT STD_LOGIC;
      S_AXI3_ACADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI3_ACSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI3_ACPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI3_ACREADY : IN STD_LOGIC;
      S_AXI3_CRVALID : IN STD_LOGIC;
      S_AXI3_CRRESP : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
      S_AXI3_CRREADY : OUT STD_LOGIC;
      S_AXI3_CDVALID : IN STD_LOGIC;
      S_AXI3_CDDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI3_CDLAST : IN STD_LOGIC;
      S_AXI3_CDREADY : OUT STD_LOGIC;
      M_AXI_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_AWLOCK : OUT STD_LOGIC;
      M_AXI_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_AWVALID : OUT STD_LOGIC;
      M_AXI_AWREADY : IN STD_LOGIC;
      M_AXI_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_AWDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_AWSNOOP : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_AWBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_WLAST : OUT STD_LOGIC;
      M_AXI_WVALID : OUT STD_LOGIC;
      M_AXI_WREADY : IN STD_LOGIC;
      M_AXI_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_BVALID : IN STD_LOGIC;
      M_AXI_BREADY : OUT STD_LOGIC;
      M_AXI_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_WACK : OUT STD_LOGIC;
      M_AXI_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_ARLOCK : OUT STD_LOGIC;
      M_AXI_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_ARVALID : OUT STD_LOGIC;
      M_AXI_ARREADY : IN STD_LOGIC;
      M_AXI_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_ARDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_ARSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_ARBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_RLAST : IN STD_LOGIC;
      M_AXI_RVALID : IN STD_LOGIC;
      M_AXI_RREADY : OUT STD_LOGIC;
      M_AXI_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI_RACK : OUT STD_LOGIC;
      M_AXI_ACVALID : IN STD_LOGIC;
      M_AXI_ACADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_ACSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_ACPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_ACREADY : OUT STD_LOGIC;
      M_AXI_CRVALID : OUT STD_LOGIC;
      M_AXI_CRRESP : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
      M_AXI_CRREADY : IN STD_LOGIC;
      M_AXI_CDVALID : OUT STD_LOGIC;
      M_AXI_CDDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_CDLAST : OUT STD_LOGIC;
      M_AXI_CDREADY : IN STD_LOGIC;
      M_AXI1_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI1_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI1_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI1_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_AWLOCK : OUT STD_LOGIC;
      M_AXI1_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI1_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI1_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI1_AWVALID : OUT STD_LOGIC;
      M_AXI1_AWREADY : IN STD_LOGIC;
      M_AXI1_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_AWDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_AWSNOOP : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI1_AWBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI1_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI1_WLAST : OUT STD_LOGIC;
      M_AXI1_WVALID : OUT STD_LOGIC;
      M_AXI1_WREADY : IN STD_LOGIC;
      M_AXI1_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_BVALID : IN STD_LOGIC;
      M_AXI1_BREADY : OUT STD_LOGIC;
      M_AXI1_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_WACK : OUT STD_LOGIC;
      M_AXI1_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI1_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI1_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI1_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_ARLOCK : OUT STD_LOGIC;
      M_AXI1_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI1_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI1_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI1_ARVALID : OUT STD_LOGIC;
      M_AXI1_ARREADY : IN STD_LOGIC;
      M_AXI1_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_ARDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_ARSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI1_ARBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI1_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI1_RLAST : IN STD_LOGIC;
      M_AXI1_RVALID : IN STD_LOGIC;
      M_AXI1_RREADY : OUT STD_LOGIC;
      M_AXI1_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI1_RACK : OUT STD_LOGIC;
      M_AXI1_ACVALID : IN STD_LOGIC;
      M_AXI1_ACADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI1_ACSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI1_ACPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI1_ACREADY : OUT STD_LOGIC;
      M_AXI1_CRVALID : OUT STD_LOGIC;
      M_AXI1_CRRESP : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
      M_AXI1_CRREADY : IN STD_LOGIC;
      M_AXI1_CDVALID : OUT STD_LOGIC;
      M_AXI1_CDDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI1_CDLAST : OUT STD_LOGIC;
      M_AXI1_CDREADY : IN STD_LOGIC;
      M_AXI2_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI2_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI2_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI2_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_AWLOCK : OUT STD_LOGIC;
      M_AXI2_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI2_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI2_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI2_AWVALID : OUT STD_LOGIC;
      M_AXI2_AWREADY : IN STD_LOGIC;
      M_AXI2_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_AWDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_AWSNOOP : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI2_AWBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI2_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI2_WLAST : OUT STD_LOGIC;
      M_AXI2_WVALID : OUT STD_LOGIC;
      M_AXI2_WREADY : IN STD_LOGIC;
      M_AXI2_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_BVALID : IN STD_LOGIC;
      M_AXI2_BREADY : OUT STD_LOGIC;
      M_AXI2_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_WACK : OUT STD_LOGIC;
      M_AXI2_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI2_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI2_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI2_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_ARLOCK : OUT STD_LOGIC;
      M_AXI2_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI2_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI2_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI2_ARVALID : OUT STD_LOGIC;
      M_AXI2_ARREADY : IN STD_LOGIC;
      M_AXI2_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_ARDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_ARSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI2_ARBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI2_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI2_RLAST : IN STD_LOGIC;
      M_AXI2_RVALID : IN STD_LOGIC;
      M_AXI2_RREADY : OUT STD_LOGIC;
      M_AXI2_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI2_RACK : OUT STD_LOGIC;
      M_AXI2_ACVALID : IN STD_LOGIC;
      M_AXI2_ACADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI2_ACSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI2_ACPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI2_ACREADY : OUT STD_LOGIC;
      M_AXI2_CRVALID : OUT STD_LOGIC;
      M_AXI2_CRRESP : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
      M_AXI2_CRREADY : IN STD_LOGIC;
      M_AXI2_CDVALID : OUT STD_LOGIC;
      M_AXI2_CDDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI2_CDLAST : OUT STD_LOGIC;
      M_AXI2_CDREADY : IN STD_LOGIC;
      M_AXI3_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI3_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI3_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI3_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_AWLOCK : OUT STD_LOGIC;
      M_AXI3_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI3_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI3_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI3_AWVALID : OUT STD_LOGIC;
      M_AXI3_AWREADY : IN STD_LOGIC;
      M_AXI3_AWDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_AWSNOOP : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI3_AWBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI3_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI3_WLAST : OUT STD_LOGIC;
      M_AXI3_WVALID : OUT STD_LOGIC;
      M_AXI3_WREADY : IN STD_LOGIC;
      M_AXI3_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_BVALID : IN STD_LOGIC;
      M_AXI3_BREADY : OUT STD_LOGIC;
      M_AXI3_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_WACK : OUT STD_LOGIC;
      M_AXI3_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI3_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      M_AXI3_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI3_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_ARLOCK : OUT STD_LOGIC;
      M_AXI3_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI3_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI3_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI3_ARVALID : OUT STD_LOGIC;
      M_AXI3_ARREADY : IN STD_LOGIC;
      M_AXI3_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_ARDOMAIN : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_ARSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI3_ARBAR : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI3_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI3_RLAST : IN STD_LOGIC;
      M_AXI3_RVALID : IN STD_LOGIC;
      M_AXI3_RREADY : OUT STD_LOGIC;
      M_AXI3_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXI3_RACK : OUT STD_LOGIC;
      M_AXI3_ACVALID : IN STD_LOGIC;
      M_AXI3_ACADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI3_ACSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI3_ACPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI3_ACREADY : OUT STD_LOGIC;
      M_AXI3_CRVALID : OUT STD_LOGIC;
      M_AXI3_CRRESP : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
      M_AXI3_CRREADY : IN STD_LOGIC;
      M_AXI3_CDVALID : OUT STD_LOGIC;
      M_AXI3_CDDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI3_CDLAST : OUT STD_LOGIC;
      M_AXI3_CDREADY : IN STD_LOGIC;
      S_AXI_AWID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_AWLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_AWLOCK : IN STD_LOGIC;
      S_AXI_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_AWVALID : IN STD_LOGIC;
      S_AXI_AWREADY : OUT STD_LOGIC;
      S_AXI_AWUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_AWDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_AWSNOOP : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_AWBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_WLAST : IN STD_LOGIC;
      S_AXI_WVALID : IN STD_LOGIC;
      S_AXI_WREADY : OUT STD_LOGIC;
      S_AXI_WUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_BID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_BVALID : OUT STD_LOGIC;
      S_AXI_BREADY : IN STD_LOGIC;
      S_AXI_BUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_WACK : IN STD_LOGIC;
      S_AXI_ARID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_ARLEN : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ARLOCK : IN STD_LOGIC;
      S_AXI_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ARVALID : IN STD_LOGIC;
      S_AXI_ARREADY : OUT STD_LOGIC;
      S_AXI_ARUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_ARDOMAIN : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ARSNOOP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ARBAR : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_RID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_RLAST : OUT STD_LOGIC;
      S_AXI_RVALID : OUT STD_LOGIC;
      S_AXI_RREADY : IN STD_LOGIC;
      S_AXI_RUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXI_RACK : IN STD_LOGIC;
      S_AXI_ACVALID : OUT STD_LOGIC;
      S_AXI_ACADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_ACSNOOP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ACPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACREADY : IN STD_LOGIC;
      S_AXI_CRVALID : IN STD_LOGIC;
      S_AXI_CRRESP : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
      S_AXI_CRREADY : OUT STD_LOGIC;
      S_AXI_CDVALID : IN STD_LOGIC;
      S_AXI_CDDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_CDLAST : IN STD_LOGIC;
      S_AXI_CDREADY : OUT STD_LOGIC;
      S_AXIS1_TLAST : IN STD_LOGIC;
      S_AXIS1_TDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXIS1_TVALID : IN STD_LOGIC;
      S_AXIS1_TREADY : OUT STD_LOGIC;
      S_AXIS1_TSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS1_TKEEP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS1_TID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS1_TDEST : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS1_TUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS2_TLAST : IN STD_LOGIC;
      S_AXIS2_TDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXIS2_TVALID : IN STD_LOGIC;
      S_AXIS2_TREADY : OUT STD_LOGIC;
      S_AXIS2_TSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS2_TKEEP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS2_TID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS2_TDEST : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS2_TUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS3_TLAST : IN STD_LOGIC;
      S_AXIS3_TDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXIS3_TVALID : IN STD_LOGIC;
      S_AXIS3_TREADY : OUT STD_LOGIC;
      S_AXIS3_TSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS3_TKEEP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS3_TID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS3_TDEST : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS3_TUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS_TLAST : OUT STD_LOGIC;
      M_AXIS_TDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXIS_TVALID : OUT STD_LOGIC;
      M_AXIS_TREADY : IN STD_LOGIC;
      M_AXIS_TSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS_TKEEP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS_TID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS_TDEST : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS_TUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS1_TLAST : OUT STD_LOGIC;
      M_AXIS1_TDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXIS1_TVALID : OUT STD_LOGIC;
      M_AXIS1_TREADY : IN STD_LOGIC;
      M_AXIS1_TSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS1_TKEEP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS1_TID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS1_TDEST : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS1_TUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS2_TLAST : OUT STD_LOGIC;
      M_AXIS2_TDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXIS2_TVALID : OUT STD_LOGIC;
      M_AXIS2_TREADY : IN STD_LOGIC;
      M_AXIS2_TSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS2_TKEEP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS2_TID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS2_TDEST : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS2_TUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS3_TLAST : OUT STD_LOGIC;
      M_AXIS3_TDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXIS3_TVALID : OUT STD_LOGIC;
      M_AXIS3_TREADY : IN STD_LOGIC;
      M_AXIS3_TSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS3_TKEEP : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXIS3_TID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS3_TDEST : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      M_AXIS3_TUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS_TLAST : IN STD_LOGIC;
      S_AXIS_TDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXIS_TVALID : IN STD_LOGIC;
      S_AXIS_TREADY : OUT STD_LOGIC;
      S_AXIS_TSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS_TKEEP : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXIS_TID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS_TDEST : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      S_AXIS_TUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      Trace1_Instruction : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace1_Valid_Instr : IN STD_LOGIC;
      Trace1_PC : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace1_Reg_Write : IN STD_LOGIC;
      Trace1_Reg_Addr : IN STD_LOGIC_VECTOR(0 TO 4);
      Trace1_MSR_Reg : IN STD_LOGIC_VECTOR(0 TO 14);
      Trace1_PID_Reg : IN STD_LOGIC_VECTOR(0 TO 7);
      Trace1_New_Reg_Value : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace1_Exception_Taken : IN STD_LOGIC;
      Trace1_Exception_Kind : IN STD_LOGIC_VECTOR(0 TO 4);
      Trace1_Jump_Taken : IN STD_LOGIC;
      Trace1_Delay_Slot : IN STD_LOGIC;
      Trace1_Data_Address : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace1_Data_Write_Value : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace1_Data_Byte_Enable : IN STD_LOGIC_VECTOR(0 TO 3);
      Trace1_Data_Access : IN STD_LOGIC;
      Trace1_Data_Read : IN STD_LOGIC;
      Trace1_Data_Write : IN STD_LOGIC;
      Trace1_DCache_Req : IN STD_LOGIC;
      Trace1_DCache_Hit : IN STD_LOGIC;
      Trace1_DCache_Rdy : IN STD_LOGIC;
      Trace1_DCache_Read : IN STD_LOGIC;
      Trace1_ICache_Req : IN STD_LOGIC;
      Trace1_ICache_Hit : IN STD_LOGIC;
      Trace1_ICache_Rdy : IN STD_LOGIC;
      Trace1_OF_PipeRun : IN STD_LOGIC;
      Trace1_EX_PipeRun : IN STD_LOGIC;
      Trace1_MEM_PipeRun : IN STD_LOGIC;
      Trace1_MB_Halted : IN STD_LOGIC;
      Trace1_Jump_Hit : IN STD_LOGIC;
      Trace2_Instruction : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace2_Valid_Instr : IN STD_LOGIC;
      Trace2_PC : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace2_Reg_Write : IN STD_LOGIC;
      Trace2_Reg_Addr : IN STD_LOGIC_VECTOR(0 TO 4);
      Trace2_MSR_Reg : IN STD_LOGIC_VECTOR(0 TO 14);
      Trace2_PID_Reg : IN STD_LOGIC_VECTOR(0 TO 7);
      Trace2_New_Reg_Value : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace2_Exception_Taken : IN STD_LOGIC;
      Trace2_Exception_Kind : IN STD_LOGIC_VECTOR(0 TO 4);
      Trace2_Jump_Taken : IN STD_LOGIC;
      Trace2_Delay_Slot : IN STD_LOGIC;
      Trace2_Data_Address : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace2_Data_Write_Value : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace2_Data_Byte_Enable : IN STD_LOGIC_VECTOR(0 TO 3);
      Trace2_Data_Access : IN STD_LOGIC;
      Trace2_Data_Read : IN STD_LOGIC;
      Trace2_Data_Write : IN STD_LOGIC;
      Trace2_DCache_Req : IN STD_LOGIC;
      Trace2_DCache_Hit : IN STD_LOGIC;
      Trace2_DCache_Rdy : IN STD_LOGIC;
      Trace2_DCache_Read : IN STD_LOGIC;
      Trace2_ICache_Req : IN STD_LOGIC;
      Trace2_ICache_Hit : IN STD_LOGIC;
      Trace2_ICache_Rdy : IN STD_LOGIC;
      Trace2_OF_PipeRun : IN STD_LOGIC;
      Trace2_EX_PipeRun : IN STD_LOGIC;
      Trace2_MEM_PipeRun : IN STD_LOGIC;
      Trace2_MB_Halted : IN STD_LOGIC;
      Trace2_Jump_Hit : IN STD_LOGIC;
      Trace3_Instruction : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace3_Valid_Instr : IN STD_LOGIC;
      Trace3_PC : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace3_Reg_Write : IN STD_LOGIC;
      Trace3_Reg_Addr : IN STD_LOGIC_VECTOR(0 TO 4);
      Trace3_MSR_Reg : IN STD_LOGIC_VECTOR(0 TO 14);
      Trace3_PID_Reg : IN STD_LOGIC_VECTOR(0 TO 7);
      Trace3_New_Reg_Value : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace3_Exception_Taken : IN STD_LOGIC;
      Trace3_Exception_Kind : IN STD_LOGIC_VECTOR(0 TO 4);
      Trace3_Jump_Taken : IN STD_LOGIC;
      Trace3_Delay_Slot : IN STD_LOGIC;
      Trace3_Data_Address : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace3_Data_Write_Value : IN STD_LOGIC_VECTOR(0 TO 31);
      Trace3_Data_Byte_Enable : IN STD_LOGIC_VECTOR(0 TO 3);
      Trace3_Data_Access : IN STD_LOGIC;
      Trace3_Data_Read : IN STD_LOGIC;
      Trace3_Data_Write : IN STD_LOGIC;
      Trace3_DCache_Req : IN STD_LOGIC;
      Trace3_DCache_Hit : IN STD_LOGIC;
      Trace3_DCache_Rdy : IN STD_LOGIC;
      Trace3_DCache_Read : IN STD_LOGIC;
      Trace3_ICache_Req : IN STD_LOGIC;
      Trace3_ICache_Hit : IN STD_LOGIC;
      Trace3_ICache_Rdy : IN STD_LOGIC;
      Trace3_OF_PipeRun : IN STD_LOGIC;
      Trace3_EX_PipeRun : IN STD_LOGIC;
      Trace3_MEM_PipeRun : IN STD_LOGIC;
      Trace3_MB_Halted : IN STD_LOGIC;
      Trace3_Jump_Hit : IN STD_LOGIC;
      Trace_Instruction : OUT STD_LOGIC_VECTOR(0 TO 31);
      Trace_Valid_Instr : OUT STD_LOGIC;
      Trace_PC : OUT STD_LOGIC_VECTOR(0 TO 31);
      Trace_Reg_Write : OUT STD_LOGIC;
      Trace_Reg_Addr : OUT STD_LOGIC_VECTOR(0 TO 4);
      Trace_MSR_Reg : OUT STD_LOGIC_VECTOR(0 TO 14);
      Trace_PID_Reg : OUT STD_LOGIC_VECTOR(0 TO 7);
      Trace_New_Reg_Value : OUT STD_LOGIC_VECTOR(0 TO 31);
      Trace_Exception_Taken : OUT STD_LOGIC;
      Trace_Exception_Kind : OUT STD_LOGIC_VECTOR(0 TO 4);
      Trace_Jump_Taken : OUT STD_LOGIC;
      Trace_Delay_Slot : OUT STD_LOGIC;
      Trace_Data_Address : OUT STD_LOGIC_VECTOR(0 TO 31);
      Trace_Data_Write_Value : OUT STD_LOGIC_VECTOR(0 TO 31);
      Trace_Data_Byte_Enable : OUT STD_LOGIC_VECTOR(0 TO 3);
      Trace_Data_Access : OUT STD_LOGIC;
      Trace_Data_Read : OUT STD_LOGIC;
      Trace_Data_Write : OUT STD_LOGIC;
      Trace_DCache_Req : OUT STD_LOGIC;
      Trace_DCache_Hit : OUT STD_LOGIC;
      Trace_DCache_Rdy : OUT STD_LOGIC;
      Trace_DCache_Read : OUT STD_LOGIC;
      Trace_ICache_Req : OUT STD_LOGIC;
      Trace_ICache_Hit : OUT STD_LOGIC;
      Trace_ICache_Rdy : OUT STD_LOGIC;
      Trace_OF_PipeRun : OUT STD_LOGIC;
      Trace_EX_PipeRun : OUT STD_LOGIC;
      Trace_MEM_PipeRun : OUT STD_LOGIC;
      Trace_MB_Halted : OUT STD_LOGIC;
      Trace_Jump_Hit : OUT STD_LOGIC;
      IRQ1 : OUT STD_LOGIC;
      IRQ1_Address : OUT STD_LOGIC_VECTOR(0 TO 31);
      IRQ1_Ack : IN STD_LOGIC_VECTOR(0 TO 1);
      IRQ2 : OUT STD_LOGIC;
      IRQ2_Address : OUT STD_LOGIC_VECTOR(0 TO 31);
      IRQ2_Ack : IN STD_LOGIC_VECTOR(0 TO 1);
      IRQ3 : OUT STD_LOGIC;
      IRQ3_Address : OUT STD_LOGIC_VECTOR(0 TO 31);
      IRQ3_Ack : IN STD_LOGIC_VECTOR(0 TO 1);
      IRQ : IN STD_LOGIC;
      IRQ_Address : IN STD_LOGIC_VECTOR(0 TO 31);
      IRQ_Ack : OUT STD_LOGIC_VECTOR(0 TO 1);
      S_IRQ1 : IN STD_LOGIC;
      S_IRQ1_Address : IN STD_LOGIC_VECTOR(0 TO 31);
      S_IRQ1_Ack : OUT STD_LOGIC_VECTOR(0 TO 1);
      S_IRQ2 : IN STD_LOGIC;
      S_IRQ2_Address : IN STD_LOGIC_VECTOR(0 TO 31);
      S_IRQ2_Ack : OUT STD_LOGIC_VECTOR(0 TO 1);
      S_IRQ3 : IN STD_LOGIC;
      S_IRQ3_Address : IN STD_LOGIC_VECTOR(0 TO 31);
      S_IRQ3_Ack : OUT STD_LOGIC_VECTOR(0 TO 1);
      M_IRQ : OUT STD_LOGIC;
      M_IRQ_Address : OUT STD_LOGIC_VECTOR(0 TO 31);
      M_IRQ_Ack : IN STD_LOGIC_VECTOR(0 TO 1);
      IO1_Addr_Strobe : IN STD_LOGIC;
      IO1_Read_Strobe : IN STD_LOGIC;
      IO1_Write_Strobe : IN STD_LOGIC;
      IO1_Address : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO1_Byte_Enable : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      IO1_Write_Data : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO1_Read_Data : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO1_Ready : OUT STD_LOGIC;
      IO2_Addr_Strobe : IN STD_LOGIC;
      IO2_Read_Strobe : IN STD_LOGIC;
      IO2_Write_Strobe : IN STD_LOGIC;
      IO2_Address : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO2_Byte_Enable : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      IO2_Write_Data : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO2_Read_Data : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO2_Ready : OUT STD_LOGIC;
      IO3_Addr_Strobe : IN STD_LOGIC;
      IO3_Read_Strobe : IN STD_LOGIC;
      IO3_Write_Strobe : IN STD_LOGIC;
      IO3_Address : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO3_Byte_Enable : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      IO3_Write_Data : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO3_Read_Data : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO3_Ready : OUT STD_LOGIC;
      IO_Addr_Strobe : OUT STD_LOGIC;
      IO_Read_Strobe : OUT STD_LOGIC;
      IO_Write_Strobe : OUT STD_LOGIC;
      IO_Address : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO_Byte_Enable : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      IO_Write_Data : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO_Read_Data : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      IO_Ready : IN STD_LOGIC;
      GPO1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPT1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPI1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPO2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPT2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPI2 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPO3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPT3 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPI3 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPO : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPT : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      GPI : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      UART1_TxD : IN STD_LOGIC;
      UART1_RxD : OUT STD_LOGIC;
      UART1_RTSn : IN STD_LOGIC;
      UART1_CTSn : OUT STD_LOGIC;
      UART1_DTRn : IN STD_LOGIC;
      UART1_DSRn : OUT STD_LOGIC;
      UART1_BAUDOUTn : IN STD_LOGIC;
      UART1_RCLK : OUT STD_LOGIC;
      UART1_XIN : OUT STD_LOGIC;
      UART1_XOUT : IN STD_LOGIC;
      UART1_DCDn : OUT STD_LOGIC;
      UART1_DDIS : IN STD_LOGIC;
      UART1_OUT1n : IN STD_LOGIC;
      UART1_OUT2n : IN STD_LOGIC;
      UART1_TXRDYn : IN STD_LOGIC;
      UART1_RXRDYn : IN STD_LOGIC;
      UART1_RI : OUT STD_LOGIC;
      UART2_TxD : IN STD_LOGIC;
      UART2_RxD : OUT STD_LOGIC;
      UART2_RTSn : IN STD_LOGIC;
      UART2_CTSn : OUT STD_LOGIC;
      UART2_DTRn : IN STD_LOGIC;
      UART2_DSRn : OUT STD_LOGIC;
      UART2_BAUDOUTn : IN STD_LOGIC;
      UART2_RCLK : OUT STD_LOGIC;
      UART2_XIN : OUT STD_LOGIC;
      UART2_XOUT : IN STD_LOGIC;
      UART2_DCDn : OUT STD_LOGIC;
      UART2_DDIS : IN STD_LOGIC;
      UART2_OUT1n : IN STD_LOGIC;
      UART2_OUT2n : IN STD_LOGIC;
      UART2_TXRDYn : IN STD_LOGIC;
      UART2_RXRDYn : IN STD_LOGIC;
      UART2_RI : OUT STD_LOGIC;
      UART3_TxD : IN STD_LOGIC;
      UART3_RxD : OUT STD_LOGIC;
      UART3_RTSn : IN STD_LOGIC;
      UART3_CTSn : OUT STD_LOGIC;
      UART3_DTRn : IN STD_LOGIC;
      UART3_DSRn : OUT STD_LOGIC;
      UART3_BAUDOUTn : IN STD_LOGIC;
      UART3_RCLK : OUT STD_LOGIC;
      UART3_XIN : OUT STD_LOGIC;
      UART3_XOUT : IN STD_LOGIC;
      UART3_DCDn : OUT STD_LOGIC;
      UART3_DDIS : IN STD_LOGIC;
      UART3_OUT1n : IN STD_LOGIC;
      UART3_OUT2n : IN STD_LOGIC;
      UART3_TXRDYn : IN STD_LOGIC;
      UART3_RXRDYn : IN STD_LOGIC;
      UART3_RI : OUT STD_LOGIC;
      UART_TxD : OUT STD_LOGIC;
      UART_RxD : IN STD_LOGIC;
      UART_RTSn : OUT STD_LOGIC;
      UART_CTSn : IN STD_LOGIC;
      UART_DTRn : OUT STD_LOGIC;
      UART_DSRn : IN STD_LOGIC;
      UART_BAUDOUTn : OUT STD_LOGIC;
      UART_RCLK : IN STD_LOGIC;
      UART_XIN : IN STD_LOGIC;
      UART_XOUT : OUT STD_LOGIC;
      UART_DCDn : IN STD_LOGIC;
      UART_DDIS : OUT STD_LOGIC;
      UART_OUT1n : OUT STD_LOGIC;
      UART_OUT2n : OUT STD_LOGIC;
      UART_TXRDYn : OUT STD_LOGIC;
      UART_RXRDYn : OUT STD_LOGIC;
      UART_RI : IN STD_LOGIC;
      IIC1_scl_i : OUT STD_LOGIC;
      IIC1_scl_o : IN STD_LOGIC;
      IIC1_scl_t : IN STD_LOGIC;
      IIC1_sda_i : OUT STD_LOGIC;
      IIC1_sda_o : IN STD_LOGIC;
      IIC1_sda_t : IN STD_LOGIC;
      IIC2_scl_i : OUT STD_LOGIC;
      IIC2_scl_o : IN STD_LOGIC;
      IIC2_scl_t : IN STD_LOGIC;
      IIC2_sda_i : OUT STD_LOGIC;
      IIC2_sda_o : IN STD_LOGIC;
      IIC2_sda_t : IN STD_LOGIC;
      IIC3_scl_i : OUT STD_LOGIC;
      IIC3_scl_o : IN STD_LOGIC;
      IIC3_scl_t : IN STD_LOGIC;
      IIC3_sda_i : OUT STD_LOGIC;
      IIC3_sda_o : IN STD_LOGIC;
      IIC3_sda_t : IN STD_LOGIC;
      IIC_scl_i : IN STD_LOGIC;
      IIC_scl_o : OUT STD_LOGIC;
      IIC_scl_t : OUT STD_LOGIC;
      IIC_sda_i : IN STD_LOGIC;
      IIC_sda_o : OUT STD_LOGIC;
      IIC_sda_t : OUT STD_LOGIC;
      Compare : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_BRAM_MisMatch : OUT STD_LOGIC
    );
  END COMPONENT tmr_voter;
  ATTRIBUTE X_INTERFACE_INFO : STRING;
  ATTRIBUTE X_INTERFACE_PARAMETER : STRING;
  ATTRIBUTE X_INTERFACE_PARAMETER OF Clk: SIGNAL IS "XIL_INTERFACENAME CLK.Clk, ASSOCIATED_BUSIF LMB1:LMB2:LMB3:LMB:S_LMB1:S_LMB2:S_LMB3:S_LMB:BRAM1:BRAM2:BRAM3:BRAM:M_BRAM1:M_BRAM2:M_BRAM3:S_BRAM:S_AXI1:S_AXI2:S_AXI3:M_AXI:M_AXI1:M_AXI2:M_AXI3:S_AXI:S_ACE1:S_ACE2:S_ACE3:M_ACE:M_ACE1:M_ACE2:M_ACE3:S_ACE:S_AXIS1:S_AXIS2:S_AXIS3:M_AXIS:M_AXIS1:M_AXIS2:M_AXIS3:S_AXIS:TRACE1:TRACE2:TRACE3:TRACE:IRQ1:IRQ2:IRA3:IRQ:S_IRQ1:S_IRQ2:S_IRQ3:M_IRQ:IO1:IO2:IO3:IO:GPIO1:GPIO2:GPIO3:GPIO:UART1:UART2:UART3:UART:S_AXIS_TEST:M_AXIS_TEST:IIC1:IIC2:IIC3:IIC, ASSOCIAT" & 
"ED_RESET Rst, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF Clk: SIGNAL IS "xilinx.com:signal:clock:1.0 CLK.Clk CLK";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI ARVALID";
  ATTRIBUTE X_INTERFACE_PARAMETER OF M_AXI_AWADDR: SIGNAL IS "XIL_INTERFACENAME M_AXI, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.0, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS " & 
"1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 ARVALID";
  ATTRIBUTE X_INTERFACE_PARAMETER OF S_AXI1_AWADDR: SIGNAL IS "XIL_INTERFACENAME S_AXI1, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 8, NUM_WRITE_OUTSTANDING 8, MAX_BURST_LENGTH 1, PHASE 0.0, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS" & 
" 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI1_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI1 WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 ARVALID";
  ATTRIBUTE X_INTERFACE_PARAMETER OF S_AXI2_AWADDR: SIGNAL IS "XIL_INTERFACENAME S_AXI2, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 8, NUM_WRITE_OUTSTANDING 8, MAX_BURST_LENGTH 1, PHASE 0.0, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS" & 
" 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI2_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI2 WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 ARVALID";
  ATTRIBUTE X_INTERFACE_PARAMETER OF S_AXI3_AWADDR: SIGNAL IS "XIL_INTERFACENAME S_AXI3, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 8, NUM_WRITE_OUTSTANDING 8, MAX_BURST_LENGTH 1, PHASE 0.0, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS" & 
" 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF S_AXI3_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 S_AXI3 WVALID";
BEGIN
  U0 : tmr_voter
    GENERIC MAP (
      C_INTERFACE => 8,
      C_TMR => 1,
      C_USE_TMR_DISABLE => 0,
      C_COMPARATOR => 0,
      C_INPUT_REGISTER => 0,
      C_VOTER_CHECK => 0,
      C_INCLUDE_MASK => B"1111111111111111111110000000000000011100000001111111111000000011",
      C_TEST_COMPARATOR => 0,
      C_TEST_LAST_INTERFACE => 0,
      C_TEST_AXIS_DATA_WIDTH => 32,
      C_TEMPORAL_DEPTH1 => 0,
      C_TEMPORAL_DEPTH2 => 0,
      C_DISCRETE_WIDTH => 1,
      C_LMB_AWIDTH => 32,
      C_LMB_DWIDTH => 32,
      C_LMB_PROTOCOL => 0,
      C_ECC => 0,
      C_AXI_ID_WIDTH => 1,
      C_AXI_DATA_WIDTH => 32,
      C_AXI_ADDR_WIDTH => 32,
      C_AXI_AWUSER_WIDTH => 1,
      C_AXI_ARUSER_WIDTH => 1,
      C_AXI_WUSER_WIDTH => 1,
      C_AXI_RUSER_WIDTH => 1,
      C_AXI_BUSER_WIDTH => 1,
      C_AXIS_DATA_WIDTH => 32,
      C_AXIS_ID_WIDTH => 1,
      C_AXIS_DEST_WIDTH => 1,
      C_AXIS_USER_WIDTH => 1,
      C_DATA_SIZE => 32,
      C_ADDR_SIZE => 32,
      C_LOW_LATENCY => 0,
      C_GPO_SIZE => 32,
      C_GPI_SIZE => 32
    )
    PORT MAP (
      TMR_Disable => '0',
      Clk => Clk,
      Rst => '0',
      Test_Comparator => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXIS_TLAST_Test => '0',
      S_AXIS_TDATA_Test => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXIS_TVALID_Test => '0',
      M_AXIS_TREADY_Test => '0',
      Discrete1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      Discrete2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      Discrete3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      LMB1_ABus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      LMB1_WriteDBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      LMB1_AddrStrobe => '0',
      LMB1_ReadStrobe => '0',
      LMB1_WriteStrobe => '0',
      LMB1_BE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      LMB2_ABus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      LMB2_WriteDBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      LMB2_AddrStrobe => '0',
      LMB2_ReadStrobe => '0',
      LMB2_WriteStrobe => '0',
      LMB2_BE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      LMB3_ABus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      LMB3_WriteDBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      LMB3_AddrStrobe => '0',
      LMB3_ReadStrobe => '0',
      LMB3_WriteStrobe => '0',
      LMB3_BE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      Sl_DBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Sl_Ready => '0',
      Sl_Wait => '0',
      Sl_UE => '0',
      Sl_CE => '0',
      S_Sl1_DBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_Sl1_Ready => '0',
      S_Sl1_Wait => '0',
      S_Sl1_UE => '0',
      S_Sl1_CE => '0',
      S_Sl2_DBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_Sl2_Ready => '0',
      S_Sl2_Wait => '0',
      S_Sl2_UE => '0',
      S_Sl2_CE => '0',
      S_Sl3_DBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_Sl3_Ready => '0',
      S_Sl3_Wait => '0',
      S_Sl3_UE => '0',
      S_Sl3_CE => '0',
      S_LMB_ABus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_LMB_WriteDBus => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_LMB_AddrStrobe => '0',
      S_LMB_ReadStrobe => '0',
      S_LMB_WriteStrobe => '0',
      S_LMB_BE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      BRAM1_Rst => '0',
      BRAM1_Clk => '0',
      BRAM1_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      BRAM1_EN => '0',
      BRAM1_WE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      BRAM1_Dout => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      BRAM2_Rst => '0',
      BRAM2_Clk => '0',
      BRAM2_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      BRAM2_EN => '0',
      BRAM2_WE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      BRAM2_Dout => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      BRAM3_Rst => '0',
      BRAM3_Clk => '0',
      BRAM3_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      BRAM3_EN => '0',
      BRAM3_WE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      BRAM3_Dout => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      BRAM_Din => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_BRAM1_Din => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_BRAM2_Rst => '0',
      M_BRAM2_Clk => '0',
      M_BRAM2_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_BRAM2_EN => '0',
      M_BRAM2_WE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      M_BRAM2_Dout => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_BRAM2_Din => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_BRAM3_Rst => '0',
      M_BRAM3_Clk => '0',
      M_BRAM3_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_BRAM3_EN => '0',
      M_BRAM3_WE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      M_BRAM3_Dout => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_BRAM3_Din => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_BRAM_Rst => '0',
      S_BRAM_Clk => '0',
      S_BRAM_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_BRAM_EN => '0',
      S_BRAM_WE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_BRAM_Dout => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI1_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI1_AWADDR => S_AXI1_AWADDR,
      S_AXI1_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI1_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI1_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI1_AWLOCK => '0',
      S_AXI1_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI1_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI1_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI1_AWVALID => S_AXI1_AWVALID,
      S_AXI1_AWREADY => S_AXI1_AWREADY,
      S_AXI1_AWUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI1_AWDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI1_AWSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI1_AWBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI1_WDATA => S_AXI1_WDATA,
      S_AXI1_WSTRB => S_AXI1_WSTRB,
      S_AXI1_WLAST => '0',
      S_AXI1_WVALID => S_AXI1_WVALID,
      S_AXI1_WREADY => S_AXI1_WREADY,
      S_AXI1_WUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI1_BRESP => S_AXI1_BRESP,
      S_AXI1_BVALID => S_AXI1_BVALID,
      S_AXI1_BREADY => S_AXI1_BREADY,
      S_AXI1_WACK => '0',
      S_AXI1_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI1_ARADDR => S_AXI1_ARADDR,
      S_AXI1_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI1_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI1_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI1_ARLOCK => '0',
      S_AXI1_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI1_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI1_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI1_ARVALID => S_AXI1_ARVALID,
      S_AXI1_ARREADY => S_AXI1_ARREADY,
      S_AXI1_ARUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI1_ARDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI1_ARSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI1_ARBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI1_RDATA => S_AXI1_RDATA,
      S_AXI1_RRESP => S_AXI1_RRESP,
      S_AXI1_RVALID => S_AXI1_RVALID,
      S_AXI1_RREADY => S_AXI1_RREADY,
      S_AXI1_RACK => '0',
      S_AXI1_ACREADY => '0',
      S_AXI1_CRVALID => '0',
      S_AXI1_CRRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      S_AXI1_CDVALID => '0',
      S_AXI1_CDDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI1_CDLAST => '0',
      S_AXI2_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI2_AWADDR => S_AXI2_AWADDR,
      S_AXI2_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI2_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI2_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI2_AWLOCK => '0',
      S_AXI2_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI2_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI2_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI2_AWVALID => S_AXI2_AWVALID,
      S_AXI2_AWREADY => S_AXI2_AWREADY,
      S_AXI2_AWUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI2_AWDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI2_AWSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI2_AWBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI2_WDATA => S_AXI2_WDATA,
      S_AXI2_WSTRB => S_AXI2_WSTRB,
      S_AXI2_WLAST => '0',
      S_AXI2_WVALID => S_AXI2_WVALID,
      S_AXI2_WREADY => S_AXI2_WREADY,
      S_AXI2_WUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI2_BRESP => S_AXI2_BRESP,
      S_AXI2_BVALID => S_AXI2_BVALID,
      S_AXI2_BREADY => S_AXI2_BREADY,
      S_AXI2_WACK => '0',
      S_AXI2_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI2_ARADDR => S_AXI2_ARADDR,
      S_AXI2_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI2_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI2_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI2_ARLOCK => '0',
      S_AXI2_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI2_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI2_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI2_ARVALID => S_AXI2_ARVALID,
      S_AXI2_ARREADY => S_AXI2_ARREADY,
      S_AXI2_ARUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI2_ARDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI2_ARSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI2_ARBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI2_RDATA => S_AXI2_RDATA,
      S_AXI2_RRESP => S_AXI2_RRESP,
      S_AXI2_RVALID => S_AXI2_RVALID,
      S_AXI2_RREADY => S_AXI2_RREADY,
      S_AXI2_RACK => '0',
      S_AXI2_ACREADY => '0',
      S_AXI2_CRVALID => '0',
      S_AXI2_CRRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      S_AXI2_CDVALID => '0',
      S_AXI2_CDDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI2_CDLAST => '0',
      S_AXI3_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI3_AWADDR => S_AXI3_AWADDR,
      S_AXI3_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI3_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI3_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI3_AWLOCK => '0',
      S_AXI3_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI3_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI3_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI3_AWVALID => S_AXI3_AWVALID,
      S_AXI3_AWREADY => S_AXI3_AWREADY,
      S_AXI3_AWDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI3_AWSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI3_AWBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI3_AWUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI3_WDATA => S_AXI3_WDATA,
      S_AXI3_WSTRB => S_AXI3_WSTRB,
      S_AXI3_WLAST => '0',
      S_AXI3_WVALID => S_AXI3_WVALID,
      S_AXI3_WREADY => S_AXI3_WREADY,
      S_AXI3_WUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI3_BRESP => S_AXI3_BRESP,
      S_AXI3_BVALID => S_AXI3_BVALID,
      S_AXI3_BREADY => S_AXI3_BREADY,
      S_AXI3_WACK => '0',
      S_AXI3_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI3_ARADDR => S_AXI3_ARADDR,
      S_AXI3_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI3_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI3_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI3_ARLOCK => '0',
      S_AXI3_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI3_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI3_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI3_ARVALID => S_AXI3_ARVALID,
      S_AXI3_ARREADY => S_AXI3_ARREADY,
      S_AXI3_ARUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI3_ARDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI3_ARSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI3_ARBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI3_RDATA => S_AXI3_RDATA,
      S_AXI3_RRESP => S_AXI3_RRESP,
      S_AXI3_RVALID => S_AXI3_RVALID,
      S_AXI3_RREADY => S_AXI3_RREADY,
      S_AXI3_RACK => '0',
      S_AXI3_ACREADY => '0',
      S_AXI3_CRVALID => '0',
      S_AXI3_CRRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      S_AXI3_CDVALID => '0',
      S_AXI3_CDDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI3_CDLAST => '0',
      M_AXI_AWADDR => M_AXI_AWADDR,
      M_AXI_AWVALID => M_AXI_AWVALID,
      M_AXI_AWREADY => M_AXI_AWREADY,
      M_AXI_WDATA => M_AXI_WDATA,
      M_AXI_WSTRB => M_AXI_WSTRB,
      M_AXI_WVALID => M_AXI_WVALID,
      M_AXI_WREADY => M_AXI_WREADY,
      M_AXI_BID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI_BRESP => M_AXI_BRESP,
      M_AXI_BVALID => M_AXI_BVALID,
      M_AXI_BREADY => M_AXI_BREADY,
      M_AXI_BUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI_ARADDR => M_AXI_ARADDR,
      M_AXI_ARVALID => M_AXI_ARVALID,
      M_AXI_ARREADY => M_AXI_ARREADY,
      M_AXI_RID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI_RDATA => M_AXI_RDATA,
      M_AXI_RRESP => M_AXI_RRESP,
      M_AXI_RLAST => '0',
      M_AXI_RVALID => M_AXI_RVALID,
      M_AXI_RREADY => M_AXI_RREADY,
      M_AXI_RUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI_ACVALID => '0',
      M_AXI_ACADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_AXI_ACSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      M_AXI_ACPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      M_AXI_CRREADY => '0',
      M_AXI_CDREADY => '0',
      M_AXI1_AWREADY => '0',
      M_AXI1_WREADY => '0',
      M_AXI1_BID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI1_BRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI1_BVALID => '0',
      M_AXI1_BUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI1_ARREADY => '0',
      M_AXI1_RID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI1_RDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_AXI1_RRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI1_RLAST => '0',
      M_AXI1_RVALID => '0',
      M_AXI1_RUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI1_ACVALID => '0',
      M_AXI1_ACADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_AXI1_ACSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      M_AXI1_ACPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      M_AXI1_CRREADY => '0',
      M_AXI1_CDREADY => '0',
      M_AXI2_AWREADY => '0',
      M_AXI2_WREADY => '0',
      M_AXI2_BID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI2_BRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI2_BVALID => '0',
      M_AXI2_BUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI2_ARREADY => '0',
      M_AXI2_RID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI2_RDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_AXI2_RRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI2_RLAST => '0',
      M_AXI2_RVALID => '0',
      M_AXI2_RUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI2_ACVALID => '0',
      M_AXI2_ACADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_AXI2_ACSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      M_AXI2_ACPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      M_AXI2_CRREADY => '0',
      M_AXI2_CDREADY => '0',
      M_AXI3_AWREADY => '0',
      M_AXI3_WREADY => '0',
      M_AXI3_BID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI3_BRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI3_BVALID => '0',
      M_AXI3_BUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI3_ARREADY => '0',
      M_AXI3_RID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI3_RDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_AXI3_RRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI3_RLAST => '0',
      M_AXI3_RVALID => '0',
      M_AXI3_RUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXI3_ACVALID => '0',
      M_AXI3_ACADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_AXI3_ACSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      M_AXI3_ACPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      M_AXI3_CRREADY => '0',
      M_AXI3_CDREADY => '0',
      S_AXI_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_AWLOCK => '0',
      S_AXI_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_AWVALID => '0',
      S_AXI_AWUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI_AWDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_AWSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_AWBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_WLAST => '0',
      S_AXI_WVALID => '0',
      S_AXI_WUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI_BREADY => '0',
      S_AXI_WACK => '0',
      S_AXI_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_ARLOCK => '0',
      S_AXI_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ARVALID => '0',
      S_AXI_ARUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXI_ARDOMAIN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_ARSNOOP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ARBAR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_RREADY => '0',
      S_AXI_RACK => '0',
      S_AXI_ACREADY => '0',
      S_AXI_CRVALID => '0',
      S_AXI_CRRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      S_AXI_CDVALID => '0',
      S_AXI_CDDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_CDLAST => '0',
      S_AXIS1_TLAST => '0',
      S_AXIS1_TDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXIS1_TVALID => '0',
      S_AXIS1_TSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS1_TKEEP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS1_TID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS1_TDEST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS1_TUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS2_TLAST => '0',
      S_AXIS2_TDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXIS2_TVALID => '0',
      S_AXIS2_TSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS2_TKEEP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS2_TID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS2_TDEST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS2_TUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS3_TLAST => '0',
      S_AXIS3_TDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXIS3_TVALID => '0',
      S_AXIS3_TSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS3_TKEEP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS3_TID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS3_TDEST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS3_TUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      M_AXIS_TREADY => '0',
      M_AXIS1_TREADY => '0',
      M_AXIS2_TREADY => '0',
      M_AXIS3_TREADY => '0',
      S_AXIS_TLAST => '0',
      S_AXIS_TDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXIS_TVALID => '0',
      S_AXIS_TSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS_TKEEP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXIS_TID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS_TDEST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      S_AXIS_TUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      Trace1_Instruction => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace1_Valid_Instr => '0',
      Trace1_PC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace1_Reg_Write => '0',
      Trace1_Reg_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      Trace1_MSR_Reg => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 15)),
      Trace1_PID_Reg => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      Trace1_New_Reg_Value => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace1_Exception_Taken => '0',
      Trace1_Exception_Kind => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      Trace1_Jump_Taken => '0',
      Trace1_Delay_Slot => '0',
      Trace1_Data_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace1_Data_Write_Value => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace1_Data_Byte_Enable => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      Trace1_Data_Access => '0',
      Trace1_Data_Read => '0',
      Trace1_Data_Write => '0',
      Trace1_DCache_Req => '0',
      Trace1_DCache_Hit => '0',
      Trace1_DCache_Rdy => '0',
      Trace1_DCache_Read => '0',
      Trace1_ICache_Req => '0',
      Trace1_ICache_Hit => '0',
      Trace1_ICache_Rdy => '0',
      Trace1_OF_PipeRun => '0',
      Trace1_EX_PipeRun => '0',
      Trace1_MEM_PipeRun => '0',
      Trace1_MB_Halted => '0',
      Trace1_Jump_Hit => '0',
      Trace2_Instruction => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace2_Valid_Instr => '0',
      Trace2_PC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace2_Reg_Write => '0',
      Trace2_Reg_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      Trace2_MSR_Reg => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 15)),
      Trace2_PID_Reg => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      Trace2_New_Reg_Value => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace2_Exception_Taken => '0',
      Trace2_Exception_Kind => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      Trace2_Jump_Taken => '0',
      Trace2_Delay_Slot => '0',
      Trace2_Data_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace2_Data_Write_Value => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace2_Data_Byte_Enable => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      Trace2_Data_Access => '0',
      Trace2_Data_Read => '0',
      Trace2_Data_Write => '0',
      Trace2_DCache_Req => '0',
      Trace2_DCache_Hit => '0',
      Trace2_DCache_Rdy => '0',
      Trace2_DCache_Read => '0',
      Trace2_ICache_Req => '0',
      Trace2_ICache_Hit => '0',
      Trace2_ICache_Rdy => '0',
      Trace2_OF_PipeRun => '0',
      Trace2_EX_PipeRun => '0',
      Trace2_MEM_PipeRun => '0',
      Trace2_MB_Halted => '0',
      Trace2_Jump_Hit => '0',
      Trace3_Instruction => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace3_Valid_Instr => '0',
      Trace3_PC => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace3_Reg_Write => '0',
      Trace3_Reg_Addr => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      Trace3_MSR_Reg => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 15)),
      Trace3_PID_Reg => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      Trace3_New_Reg_Value => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace3_Exception_Taken => '0',
      Trace3_Exception_Kind => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      Trace3_Jump_Taken => '0',
      Trace3_Delay_Slot => '0',
      Trace3_Data_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace3_Data_Write_Value => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      Trace3_Data_Byte_Enable => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      Trace3_Data_Access => '0',
      Trace3_Data_Read => '0',
      Trace3_Data_Write => '0',
      Trace3_DCache_Req => '0',
      Trace3_DCache_Hit => '0',
      Trace3_DCache_Rdy => '0',
      Trace3_DCache_Read => '0',
      Trace3_ICache_Req => '0',
      Trace3_ICache_Hit => '0',
      Trace3_ICache_Rdy => '0',
      Trace3_OF_PipeRun => '0',
      Trace3_EX_PipeRun => '0',
      Trace3_MEM_PipeRun => '0',
      Trace3_MB_Halted => '0',
      Trace3_Jump_Hit => '0',
      IRQ1_Ack => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      IRQ2_Ack => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      IRQ3_Ack => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      IRQ => '0',
      IRQ_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_IRQ1 => '0',
      S_IRQ1_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_IRQ2 => '0',
      S_IRQ2_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_IRQ3 => '0',
      S_IRQ3_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      M_IRQ_Ack => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      IO1_Addr_Strobe => '0',
      IO1_Read_Strobe => '0',
      IO1_Write_Strobe => '0',
      IO1_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      IO1_Byte_Enable => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      IO1_Write_Data => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      IO2_Addr_Strobe => '0',
      IO2_Read_Strobe => '0',
      IO2_Write_Strobe => '0',
      IO2_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      IO2_Byte_Enable => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      IO2_Write_Data => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      IO3_Addr_Strobe => '0',
      IO3_Read_Strobe => '0',
      IO3_Write_Strobe => '0',
      IO3_Address => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      IO3_Byte_Enable => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      IO3_Write_Data => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      IO_Read_Data => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      IO_Ready => '0',
      GPO1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      GPT1 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      GPO2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      GPT2 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      GPO3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      GPT3 => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      GPI => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      UART1_TxD => '0',
      UART1_RTSn => '0',
      UART1_DTRn => '0',
      UART1_BAUDOUTn => '0',
      UART1_XOUT => '0',
      UART1_DDIS => '0',
      UART1_OUT1n => '0',
      UART1_OUT2n => '0',
      UART1_TXRDYn => '0',
      UART1_RXRDYn => '0',
      UART2_TxD => '0',
      UART2_RTSn => '0',
      UART2_DTRn => '0',
      UART2_BAUDOUTn => '0',
      UART2_XOUT => '0',
      UART2_DDIS => '0',
      UART2_OUT1n => '0',
      UART2_OUT2n => '0',
      UART2_TXRDYn => '0',
      UART2_RXRDYn => '0',
      UART3_TxD => '0',
      UART3_RTSn => '0',
      UART3_DTRn => '0',
      UART3_BAUDOUTn => '0',
      UART3_XOUT => '0',
      UART3_DDIS => '0',
      UART3_OUT1n => '0',
      UART3_OUT2n => '0',
      UART3_TXRDYn => '0',
      UART3_RXRDYn => '0',
      UART_RxD => '0',
      UART_CTSn => '0',
      UART_DSRn => '0',
      UART_RCLK => '0',
      UART_XIN => '0',
      UART_DCDn => '0',
      UART_RI => '0',
      IIC1_scl_o => '0',
      IIC1_scl_t => '0',
      IIC1_sda_o => '0',
      IIC1_sda_t => '0',
      IIC2_scl_o => '0',
      IIC2_scl_t => '0',
      IIC2_sda_o => '0',
      IIC2_sda_t => '0',
      IIC3_scl_o => '0',
      IIC3_scl_t => '0',
      IIC3_sda_o => '0',
      IIC3_sda_t => '0',
      IIC_scl_i => '0',
      IIC_sda_i => '0'
    );
END design_1_tmr_voter_1_0_arch;
